{
  "api/Semiodesk.Trinity.ISparqlQueryResult.html": {
    "href": "api/Semiodesk.Trinity.ISparqlQueryResult.html",
    "title": "Interface ISparqlQueryResult",
    "keywords": "Interface ISparqlQueryResult Inherited Members IResourceQueryResult.Count() IResourceQueryResult.GetResources(Int32, Int32) IResourceQueryResult.GetResources<T>(Int32, Int32) System.IDisposable.Dispose() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public interface ISparqlQueryResult : IResourceQueryResult, IDisposable Methods | Improve this Doc View Source GetAnwser() Returns the bool value from ASK query forms. Declaration bool GetAnwser() Returns Type Description System.Boolean True on success, False otherwise. | Improve this Doc View Source GetBindings() Returns a set of bound values (bindings) returned from SELECT query forms. Declaration IEnumerable<BindingSet> GetBindings() Returns Type Description System.Collections.Generic.IEnumerable < BindingSet > An enumeration of bound solution variables (BindingSet). | Improve this Doc View Source GetResources() Returns marshalled Resource objects returned from DESCRIBE, CONSTRUCT or interpretable SELECT query forms. Declaration IEnumerable<Resource> GetResources() Returns Type Description System.Collections.Generic.IEnumerable < Resource > An enumeration of Resource objects. | Improve this Doc View Source GetResources<T>() Returns marshalled instances of the given Resource type which were returned from DESCRIBE, CONSTRUCT or interpretable SELECT query forms. Declaration IEnumerable<T> GetResources<T>() where T : Resource Returns Type Description System.Collections.Generic.IEnumerable <T> An enumeration of instances of the given type. Type Parameters Name Description T The Resource type object."
  },
  "api/Semiodesk.Trinity.TransactionEventArgs.html": {
    "href": "api/Semiodesk.Trinity.TransactionEventArgs.html",
    "title": "Class TransactionEventArgs",
    "keywords": "Class TransactionEventArgs This class encapsulates arguments for transaction event. Inheritance System.Object System.EventArgs TransactionEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class TransactionEventArgs : EventArgs Constructors | Improve this Doc View Source TransactionEventArgs(Boolean) Cosntructor Declaration public TransactionEventArgs(bool success) Parameters Type Name Description System.Boolean success Pass true to indicate that a commit happened. Pass false to indicate that a rollback happend. Fields | Improve this Doc View Source FinishedWithCommit Indicates that the transaction finished with a commit. Declaration public readonly bool FinishedWithCommit Field Value Type Description System.Boolean | Improve this Doc View Source FinishedWithRollback Indicates that the transaction finished with a rollback. Declaration public readonly bool FinishedWithRollback Field Value Type Description System.Boolean"
  },
  "api/Semiodesk.Trinity.XsdTypeMapper.ObjectDeserializationDelegate.html": {
    "href": "api/Semiodesk.Trinity.XsdTypeMapper.ObjectDeserializationDelegate.html",
    "title": "Delegate XsdTypeMapper.ObjectDeserializationDelegate",
    "keywords": "Delegate XsdTypeMapper.ObjectDeserializationDelegate Deserialization delegate, format for deserialization functions. Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public delegate object ObjectDeserializationDelegate(string str); Parameters Type Name Description System.String str Returns Type Description System.Object"
  },
  "api/Semiodesk.Trinity.html": {
    "href": "api/Semiodesk.Trinity.html",
    "title": "Namespace Semiodesk.Trinity",
    "keywords": "Namespace Semiodesk.Trinity Classes BindingSet A dictionary of named value bindings which represents a single query solution. Class Represents a RDF class FileSystemInfoExtensions Extension to FileSystemInfo concerting UriRef handling MappingDiscovery This static class is responsible for discovering mapped classes. Every assembly that defines mapping classes needs to register them with this service. MappingDiscovery.MappingClass A class containing information about a RDF class mapped to c#. Model A set of resources which represent a logical model for a given application domain. ModelChangedEventArgs Provides information about changes in a RDF model. ModelGroupFactory NamespaceManager Allows for easier namespace management for queries. NotifyPropertyChangedAttribute Marks the property as NotifyingProperty. Ontology Abstract class which marks subclasses as ontologies. Needed for automatic discovery. OntologyDiscovery This static class contains a mapping of all properties and classes to its uris for discovery of the proper object and its attributes. For future reference: look into PreApplicationStartMethodAttribute Class or ModuleInitializer Property Objects of this class represent RDF properties. PropertyMapping<T> This class does the heavy lifting of the property mapping mechanism. It stores the value and acts as intermediary for the resource. PropertyValue RdfClassAttribute Decorate a class with this attribute to mark it as mapping for an RDF class of the given type. RdfNamespaceAttribute RdfPropertyAttribute Decorate a property with this attribute to mark it as mapped RDF property with the given type. Resource This class repesents a RDF resource. ResourceExtensions ResourceLockedException ResourceProvider ResourceQuery ResourceQuery.rdf The RDF Vocabulary (RDF) ResourceQueryResult SortCriterion SparqlPreprocessor A very simple SPARQL parser. This class is primarily intended to support a limited range of query preprocessing tasks such as setting the values of query parameters (@-variables) as quickly as possible. It does not aim to support the full SPARQL standard syntax. SparqlQuery A simple SPAQL Query class. This class aims to ease formulating SPARQL query strings by automatically setting PREFIX declarations from a given namespace manager. SparqlQueryItemsProvider<T> The item provider for sparql queries. SparqlQueryPreprocessor SparqlSerializer Provides functionality to perform serialization of native .NET types into SPARQL strings. SparqlUpdate A simple SPARQL Update class. This class aims to ease formulating SPARQL query strings by automatically setting PREFIX declarations from a given namespace manager. StatementPattern StoreBase This class encapsulates the functionality of an abstract triple store. Cannot be used directly. Use StoreFactory to get a concret implementation. StoreFactory This is the factory for object implementing the IStore interface. If you want to use your own store, you can load the assembly containing the provider with the LoadProvider method. StoreProvider This is the abstract store provider class. Implement it if you want to write your own store provider. StringExtensions Collection of string extension related to Uris TransactionEventArgs This class encapsulates arguments for transaction event. UriExtensions Extension of Uri class concering UriRef handling. UriRef This class extends the framework Uri class to also include fragments for equality testing. VirtualizingResourceCollection<T> A virtualizing collection of a resource query. VirtualizingSparqlCollection<T> A virtualizing collection for sparql query results XsdTypeMapper Provides functionality for the serialization and deserialization of .NET objects to XML Schema encoded strings. Interfaces IModel An interface for classes which provide functionality to manage a set of resources. IModelGroup The model group can be used to query over multiple models at once. IResource This interface encapsulates the access to the methods of a RDF resource. IResourceQueryResult Interface for results of a resource query. ISparqlQuery A generic sparql query interface. ISparqlQueryResult IStore The IStorage interface describes the methods an RDF Storage has to implement. ITransaction ITransactional Interface for a transactional object Enums FilterOperation Available filter operations. ModelChangeType Lists all possible changes to a RDF model. RdfSerializationFormat Enumerates all supported RDF serialization formats. SortDirection SparqlQueryType The SPARQL query forms as specified in http://www.w3.org/TR/rdf-sparql-query/#QueryForms SparqlQueryVariableScope Delegates FinishedTransactionEvent Handle for transaction events. ModelChangedDelegate Interface for ModelChanged event handlers. XsdTypeMapper.ObjectDeserializationDelegate Deserialization delegate, format for deserialization functions. XsdTypeMapper.ObjectSerializationDelegate The object serialization delegate"
  },
  "api/Semiodesk.Trinity.Collections.AsyncVirtualizingCollection-1.html": {
    "href": "api/Semiodesk.Trinity.Collections.AsyncVirtualizingCollection-1.html",
    "title": "Class AsyncVirtualizingCollection<T>",
    "keywords": "Class AsyncVirtualizingCollection<T> Derived VirtualizatingCollection, performing loading asychronously. Inheritance System.Object VirtualizingCollection <T> AsyncVirtualizingCollection<T> AsyncVirtualizingResourceCollection<T> AsyncVirtualizingSparqlCollection<T> Implements System.Collections.Generic.IList <T> System.Collections.Generic.ICollection <T> System.Collections.Generic.IEnumerable <T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable System.Collections.Specialized.INotifyCollectionChanged System.ComponentModel.INotifyPropertyChanged Inherited Members VirtualizingCollection<T>._pageSize VirtualizingCollection<T>._pageTimeout VirtualizingCollection<T>.PageSize VirtualizingCollection<T>.PageTimeout VirtualizingCollection<T>.Count VirtualizingCollection<T>.SyncRoot VirtualizingCollection<T>.IsSynchronized VirtualizingCollection<T>.IsReadOnly VirtualizingCollection<T>.IsFixedSize VirtualizingCollection<T>.Item[Int32] VirtualizingCollection<T>.IList.Item[Int32] VirtualizingCollection<T>.GetEnumerator() VirtualizingCollection<T>.IEnumerable.GetEnumerator() VirtualizingCollection<T>.Add(T) VirtualizingCollection<T>.IList.Add(Object) VirtualizingCollection<T>.IList.Contains(Object) VirtualizingCollection<T>.Contains(T) VirtualizingCollection<T>.Clear() VirtualizingCollection<T>.IList.IndexOf(Object) VirtualizingCollection<T>.IndexOf(T) VirtualizingCollection<T>.Insert(Int32, T) VirtualizingCollection<T>.IList.Insert(Int32, Object) VirtualizingCollection<T>.RemoveAt(Int32) VirtualizingCollection<T>.IList.Remove(Object) VirtualizingCollection<T>.Remove(T) VirtualizingCollection<T>.CopyTo(T[], Int32) VirtualizingCollection<T>.ICollection.CopyTo(Array, Int32) VirtualizingCollection<T>.CleanUpPages() VirtualizingCollection<T>.PopulatePage(Int32, IList<T>) VirtualizingCollection<T>.RequestPage(Int32) VirtualizingCollection<T>.FetchPage(Int32) VirtualizingCollection<T>.FetchCount() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity.Collections Assembly : Semiodesk.Trinity.dll Syntax public class AsyncVirtualizingCollection<T> : VirtualizingCollection<T>, IList<T>, ICollection<T>, IEnumerable<T>, IList, ICollection, IEnumerable, INotifyCollectionChanged, INotifyPropertyChanged where T : Resource Type Parameters Name Description T The type of items in the collection Constructors | Improve this Doc View Source AsyncVirtualizingCollection(IItemsProvider<T>) Initializes a new instance of the AsyncVirtualizingCollection<T> class. Declaration public AsyncVirtualizingCollection(IItemsProvider<T> itemsProvider) Parameters Type Name Description IItemsProvider <T> itemsProvider The items provider. | Improve this Doc View Source AsyncVirtualizingCollection(IItemsProvider<T>, Int32) Initializes a new instance of the AsyncVirtualizingCollection<T> class. Declaration public AsyncVirtualizingCollection(IItemsProvider<T> itemsProvider, int pageSize) Parameters Type Name Description IItemsProvider <T> itemsProvider The items provider. System.Int32 pageSize Size of the page. | Improve this Doc View Source AsyncVirtualizingCollection(IItemsProvider<T>, Int32, Int32) Initializes a new instance of the AsyncVirtualizingCollection<T> class. Declaration public AsyncVirtualizingCollection(IItemsProvider<T> itemsProvider, int pageSize, int pageTimeout) Parameters Type Name Description IItemsProvider <T> itemsProvider The items provider. System.Int32 pageSize Size of the page. System.Int32 pageTimeout The page timeout. Properties | Improve this Doc View Source IsLoading Gets or sets a value indicating whether the collection is loading. Declaration public bool IsLoading { get; set; } Property Value Type Description System.Boolean true if this collection is loading; otherwise, false . | Improve this Doc View Source SynchronizationContext Gets the synchronization context used for UI-related operations. This is obtained as the current SynchronizationContext when the AsyncVirtualizingCollection is created. Declaration protected SynchronizationContext SynchronizationContext { get; } Property Value Type Description System.Threading.SynchronizationContext The synchronization context. Methods | Improve this Doc View Source LoadCount() Asynchronously loads the count of items. Declaration protected override void LoadCount() Overrides Semiodesk.Trinity.Collections.VirtualizingCollection<T>.LoadCount() | Improve this Doc View Source LoadPage(Int32) Asynchronously loads the page. Declaration protected override void LoadPage(int index) Parameters Type Name Description System.Int32 index The index. Overrides Semiodesk.Trinity.Collections.VirtualizingCollection<T>.LoadPage(System.Int32) Events | Improve this Doc View Source CollectionChanged The event that gets notified if the collection gets changed. Declaration public event NotifyCollectionChangedEventHandler CollectionChanged Event Type Type Description System.Collections.Specialized.NotifyCollectionChangedEventHandler | Improve this Doc View Source PropertyChanged The event that gets notified if a property has changed. Declaration public event PropertyChangedEventHandler PropertyChanged Event Type Type Description System.ComponentModel.PropertyChangedEventHandler Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable System.Collections.Specialized.INotifyCollectionChanged System.ComponentModel.INotifyPropertyChanged"
  },
  "api/Semiodesk.Trinity.FilterOperation.html": {
    "href": "api/Semiodesk.Trinity.FilterOperation.html",
    "title": "Enum FilterOperation",
    "keywords": "Enum FilterOperation Available filter operations. Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public enum FilterOperation Fields Name Description Contains Contains Equal Equal (==) GreaterOrEqual Greater or Eqal (>=) GreaterThan Greater than (>) LessOrEqual Less or Equal (<=) LessThan Less Than (<) None No filter NotEqual Not Equal (!=)"
  },
  "api/Semiodesk.Trinity.IResource.html": {
    "href": "api/Semiodesk.Trinity.IResource.html",
    "title": "Interface IResource",
    "keywords": "Interface IResource This interface encapsulates the access to the methods of a RDF resource. Inherited Members System.ComponentModel.INotifyPropertyChanged.PropertyChanged System.IDisposable.Dispose() ITransactional.Commit() ITransactional.Rollback() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public interface IResource : INotifyPropertyChanged, IDisposable, ITransactional Properties | Improve this Doc View Source IsDisposed Indicates if the resources has been disposed. Declaration bool IsDisposed { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsReadOnly Indicates that this resource is not writable, thus Commit() is illegal. Declaration bool IsReadOnly { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Language Set the language of this resource. This will change te mapped strings to this language. Declaration string Language { get; set; } Property Value Type Description System.String | Improve this Doc View Source Model Model from which the resource was instantiated. Declaration IModel Model { get; } Property Value Type Description IModel | Improve this Doc View Source Uri Uniform Resource Identifier (URI). Declaration UriRef Uri { get; set; } Property Value Type Description UriRef Methods | Improve this Doc View Source AddProperty(Property, IResource) Adds a new property with the given value to the resource. Declaration void AddProperty(Property property, IResource value) Parameters Type Name Description Property property Property the value should be associated with. IResource value A instance of IResource. | Improve this Doc View Source AddProperty(Property, Boolean) Adds a new property with the given value to the resource. Declaration void AddProperty(Property property, bool value) Parameters Type Name Description Property property Property the value should be associated with. System.Boolean value A boolean value. | Improve this Doc View Source AddProperty(Property, Byte[]) Adds a new property with the given value to the resource. Declaration void AddProperty(Property property, byte[] value) Parameters Type Name Description Property property Property the value should be associated with. System.Byte [] value Arbitrary data in form of a byte array. | Improve this Doc View Source AddProperty(Property, DateTime) Adds a new property with the given value to the resource. Declaration void AddProperty(Property property, DateTime value) Parameters Type Name Description Property property Property the value should be associated with. System.DateTime value A datetime value. | Improve this Doc View Source AddProperty(Property, Decimal) Adds a new property with the given value to the resource. Declaration void AddProperty(Property property, decimal value) Parameters Type Name Description Property property Property the value should be associated with. System.Decimal value A decimal value. | Improve this Doc View Source AddProperty(Property, Double) Adds a new property with the given value to the resource. Declaration void AddProperty(Property property, double value) Parameters Type Name Description Property property Property the value should be associated with. System.Double value A double precision float value. | Improve this Doc View Source AddProperty(Property, Int16) Adds a new property with the given value to the resource. Declaration void AddProperty(Property property, short value) Parameters Type Name Description Property property Property the value should be associated with. System.Int16 value A 16-bit integer value. | Improve this Doc View Source AddProperty(Property, Int32) Adds a new property with the given value to the resource. Declaration void AddProperty(Property property, int value) Parameters Type Name Description Property property Property the value should be associated with. System.Int32 value A 32-bit integer value. | Improve this Doc View Source AddProperty(Property, Int64) Adds a new property with the given value to the resource. Declaration void AddProperty(Property property, long value) Parameters Type Name Description Property property Property the value should be associated with. System.Int64 value A 64-bit integer value. | Improve this Doc View Source AddProperty(Property, Single) Adds a new property with the given value to the resource. Declaration void AddProperty(Property property, float value) Parameters Type Name Description Property property Property the value should be associated with. System.Single value A single precision float value. | Improve this Doc View Source AddProperty(Property, String) Adds a new property with the given value to the resource. Declaration void AddProperty(Property property, string value) Parameters Type Name Description Property property Property the value should be associated with. System.String value A string literal. | Improve this Doc View Source AddProperty(Property, String, CultureInfo) Adds a new property with the given value to the resource. Declaration void AddProperty(Property property, string value, CultureInfo language) Parameters Type Name Description Property property Property the value should be associated with. System.String value A string literal. System.Globalization.CultureInfo language The culture of the string literal. | Improve this Doc View Source AddProperty(Property, String, String) Adds a new property with the given value to the resource. Declaration void AddProperty(Property property, string value, string language) Parameters Type Name Description Property property Property the value should be associated with. System.String value A string literal. System.String language The language of the string literal. | Improve this Doc View Source AddProperty(Property, UInt16) Adds a new property with the given value to the resource. Declaration void AddProperty(Property property, ushort value) Parameters Type Name Description Property property Property the value should be associated with. System.UInt16 value A 16-bit unsigned integer value. | Improve this Doc View Source AddProperty(Property, UInt32) Adds a new property with the given value to the resource. Declaration void AddProperty(Property property, uint value) Parameters Type Name Description Property property Property the value should be associated with. System.UInt32 value A 32-bit unsigned integer value. | Improve this Doc View Source AddProperty(Property, UInt64) Adds a new property with the given value to the resource. Declaration void AddProperty(Property property, ulong value) Parameters Type Name Description Property property Property the value should be associated with. System.UInt64 value A 64-bit unsigned integer value. | Improve this Doc View Source AddProperty(Property, Uri) Adds a new property with the given value to the resource. Declaration void AddProperty(Property property, Uri value) Parameters Type Name Description Property property Property the value should be associated with. System.Uri value An Uri. | Improve this Doc View Source GetValue(Property) Gets the value of a uniquely asserted property. Declaration object GetValue(Property property) Parameters Type Name Description Property property A RDF property. Returns Type Description System.Object | Improve this Doc View Source GetValue(Property, Object) Gets the value of a uniquely asserted property. Declaration object GetValue(Property property, object defaultValue) Parameters Type Name Description Property property A RDF property. System.Object defaultValue Specifies a default value that should be returned if no value exists. Returns Type Description System.Object | Improve this Doc View Source HasProperty(Property) Indicates if the resource has at least one property of the given type. Declaration bool HasProperty(Property property) Parameters Type Name Description Property property Returns Type Description System.Boolean True on success, False otherwise. | Improve this Doc View Source HasProperty(Property, Object) Indicates if the resource has a property with the given value. Declaration bool HasProperty(Property property, object value) Parameters Type Name Description Property property System.Object value Returns Type Description System.Boolean True on success, False otherwise. | Improve this Doc View Source HasProperty(Property, String, CultureInfo) Indicates if the resource has a property with the given translated string value. Declaration bool HasProperty(Property property, string value, CultureInfo language) Parameters Type Name Description Property property System.String value System.Globalization.CultureInfo language Returns Type Description System.Boolean True on success, False otherwise. | Improve this Doc View Source HasProperty(Property, String, String) Indicates if the resource has a property with the given translated string value. Declaration bool HasProperty(Property property, string value, string language) Parameters Type Name Description Property property System.String value System.String language Returns Type Description System.Boolean True on success, False otherwise. | Improve this Doc View Source ListProperties() Enumerates all properties associated with this resource. Declaration IEnumerable<Property> ListProperties() Returns Type Description System.Collections.Generic.IEnumerable < Property > | Improve this Doc View Source ListValues() Enumerates all properties associated with this resource in form of a tuple mapping properties to their corresponding values. Declaration IEnumerable<Tuple<Property, object>> ListValues() Returns Type Description System.Collections.Generic.IEnumerable < System.Tuple < Property , System.Object >> | Improve this Doc View Source ListValues(Property) Enumerates all property values associated with this resource. Declaration IEnumerable<object> ListValues(Property property) Parameters Type Name Description Property property Returns Type Description System.Collections.Generic.IEnumerable < System.Object > | Improve this Doc View Source RemoveProperty(Property, IResource) Removes an associated property from the resource. Declaration void RemoveProperty(Property property, IResource value) Parameters Type Name Description Property property Property the given value is associated with. IResource value An IResource instance. | Improve this Doc View Source RemoveProperty(Property, Boolean) Removes an associated property from the resource. Declaration void RemoveProperty(Property property, bool value) Parameters Type Name Description Property property Property the given value is associated with. System.Boolean value A blooean value. | Improve this Doc View Source RemoveProperty(Property, Byte[]) Removes an associated property from the resource. Declaration void RemoveProperty(Property property, byte[] value) Parameters Type Name Description Property property Property the given value is associated with. System.Byte [] value Arbitrary data in form of a byte array. | Improve this Doc View Source RemoveProperty(Property, DateTime) Removes an associated property from the resource. Declaration void RemoveProperty(Property property, DateTime value) Parameters Type Name Description Property property Property the given value is associated with. System.DateTime value A date value. | Improve this Doc View Source RemoveProperty(Property, Decimal) Removes an associated property from the resource. Declaration void RemoveProperty(Property property, decimal value) Parameters Type Name Description Property property Property the given value is associated with. System.Decimal value A decimal value. | Improve this Doc View Source RemoveProperty(Property, Double) Removes an associated property from the resource. Declaration void RemoveProperty(Property property, double value) Parameters Type Name Description Property property Property the given value is associated with. System.Double value A double precision float value. | Improve this Doc View Source RemoveProperty(Property, Int16) Removes an associated property from the resource. Declaration void RemoveProperty(Property property, short value) Parameters Type Name Description Property property Property the given value is associated with. System.Int16 value A 16-bit integer value. | Improve this Doc View Source RemoveProperty(Property, Int32) Removes an associated property from the resource. Declaration void RemoveProperty(Property property, int value) Parameters Type Name Description Property property Property the given value is associated with. System.Int32 value A 32-bit integer value. | Improve this Doc View Source RemoveProperty(Property, Int64) Removes an associated property from the resource. Declaration void RemoveProperty(Property property, long value) Parameters Type Name Description Property property Property the given value is associated with. System.Int64 value A 64-bit integer value. | Improve this Doc View Source RemoveProperty(Property, Single) Removes an associated property from the resource. Declaration void RemoveProperty(Property property, float value) Parameters Type Name Description Property property Property the given value is associated with. System.Single value A single precision float value. | Improve this Doc View Source RemoveProperty(Property, String) Removes an associated property from the resource. Declaration void RemoveProperty(Property property, string value) Parameters Type Name Description Property property Property the given value is associated with. System.String value A instance of IResource. | Improve this Doc View Source RemoveProperty(Property, String, CultureInfo) Removes an associated property from the resource. Declaration void RemoveProperty(Property property, string value, CultureInfo language) Parameters Type Name Description Property property Property the given value is associated with. System.String value A string literal. System.Globalization.CultureInfo language The culture of the string | Improve this Doc View Source RemoveProperty(Property, String, String) Removes an associated property from the resource. Declaration void RemoveProperty(Property property, string value, string language) Parameters Type Name Description Property property Property the given value is associated with. System.String value A string literal. System.String language The language of the string. | Improve this Doc View Source RemoveProperty(Property, UInt16) Removes an associated property from the resource. Declaration void RemoveProperty(Property property, ushort value) Parameters Type Name Description Property property Property the given value is associated with. System.UInt16 value A 16-bit unsigned integer value. | Improve this Doc View Source RemoveProperty(Property, UInt32) Removes an associated property from the resource. Declaration void RemoveProperty(Property property, uint value) Parameters Type Name Description Property property Property the given value is associated with. System.UInt32 value A 32-bit unsigned integer value. | Improve this Doc View Source RemoveProperty(Property, UInt64) Removes an associated property from the resource. Declaration void RemoveProperty(Property property, ulong value) Parameters Type Name Description Property property Property the given value is associated with. System.UInt64 value A 64-bit unsigned integer value. | Improve this Doc View Source RemoveProperty(Property, Uri) Removes an associated property from the resource. Declaration void RemoveProperty(Property property, Uri value) Parameters Type Name Description Property property Property the given value is associated with. System.Uri value An Uri. Extension Methods ResourceExtensions.FindAll<T>(IResource, T, Int32) ResourceExtensions.FindAll<T>(IResource, IEnumerable<T>, Int32)"
  },
  "api/Semiodesk.Trinity.Collections.VirtualizingCollection-1.html": {
    "href": "api/Semiodesk.Trinity.Collections.VirtualizingCollection-1.html",
    "title": "Class VirtualizingCollection<T>",
    "keywords": "Class VirtualizingCollection<T> A generic virtualizing collection. Inheritance System.Object VirtualizingCollection<T> AsyncVirtualizingCollection<T> VirtualizingResourceCollection<T> VirtualizingSparqlCollection<T> Implements System.Collections.Generic.IList <T> System.Collections.Generic.ICollection <T> System.Collections.Generic.IEnumerable <T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity.Collections Assembly : Semiodesk.Trinity.dll Syntax public class VirtualizingCollection<T> : IList<T>, ICollection<T>, IEnumerable<T>, IList, ICollection, IEnumerable Type Parameters Name Description T Constructors | Improve this Doc View Source VirtualizingCollection(IItemsProvider<T>) Initializes a new instance of the VirtualizingCollection<T> class. Declaration public VirtualizingCollection(IItemsProvider<T> itemsProvider) Parameters Type Name Description IItemsProvider <T> itemsProvider | Improve this Doc View Source VirtualizingCollection(IItemsProvider<T>, Int32) Initializes a new instance of the VirtualizingCollection<T> class. Declaration public VirtualizingCollection(IItemsProvider<T> itemsProvider, int pageSize) Parameters Type Name Description IItemsProvider <T> itemsProvider The items provider. System.Int32 pageSize Size of the page. | Improve this Doc View Source VirtualizingCollection(IItemsProvider<T>, Int32, Int32) Initializes a new instance of the VirtualizingCollection<T> class. Declaration public VirtualizingCollection(IItemsProvider<T> itemsProvider, int pageSize, int pageTimeout) Parameters Type Name Description IItemsProvider <T> itemsProvider Items provider System.Int32 pageSize Size of the page. System.Int32 pageTimeout The page timeout. Fields | Improve this Doc View Source _pageSize The page size contains the number of elements per page. Declaration protected int _pageSize Field Value Type Description System.Int32 | Improve this Doc View Source _pageTimeout The time after which a page can be removed. Declaration protected long _pageTimeout Field Value Type Description System.Int64 Properties | Improve this Doc View Source Count Number of elements in the list. Declaration public virtual int Count { get; protected set; } Property Value Type Description System.Int32 | Improve this Doc View Source IsFixedSize Gets a value indicating whether the System.Collections.IList has a fixed size. Declaration public bool IsFixedSize { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsReadOnly Gets a value indicating whether the System.Collections.Generic.ICollection<T> is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsSynchronized Gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread safe). Declaration public bool IsSynchronized { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[Int32] Access an element at a certain index. Declaration public T this[int index] { get; set; } Parameters Type Name Description System.Int32 index Property Value Type Description T | Improve this Doc View Source PageSize The page size contains the number of elements per page. Declaration public int PageSize { get; } Property Value Type Description System.Int32 | Improve this Doc View Source PageTimeout Timeout in ms. If the page has not been touched it can be removed with CleanUpPages. Declaration public long PageTimeout { get; } Property Value Type Description System.Int64 | Improve this Doc View Source SyncRoot Gets an object that can be used to synchronize access to the System.Collections.ICollection . Declaration public object SyncRoot { get; } Property Value Type Description System.Object Methods | Improve this Doc View Source Add(T) The list is read-only, not supported. Declaration public void Add(T item) Parameters Type Name Description T item | Improve this Doc View Source CleanUpPages() Removes pages that have not been touched recently. The timeout can be configured with the PageTimeout. Declaration public void CleanUpPages() | Improve this Doc View Source Clear() The list is read-only, not supported. Declaration public void Clear() | Improve this Doc View Source Contains(T) The list is read-only, not supported. Declaration public bool Contains(T item) Parameters Type Name Description T item Returns Type Description System.Boolean | Improve this Doc View Source CopyTo(T[], Int32) The list is read-only, not supported. Declaration public void CopyTo(T[] array, int arrayIndex) Parameters Type Name Description T[] array System.Int32 arrayIndex | Improve this Doc View Source FetchCount() Gets the element count from the item provider. Declaration protected int FetchCount() Returns Type Description System.Int32 | Improve this Doc View Source FetchPage(Int32) Gets the page from the item provider. Declaration protected IList<T> FetchPage(int pageIndex) Parameters Type Name Description System.Int32 pageIndex Returns Type Description System.Collections.Generic.IList <T> | Improve this Doc View Source GetEnumerator() Returns the enumerator of the collection Declaration public IEnumerator<T> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <T> | Improve this Doc View Source IndexOf(T) Returns the index of a certain element. Declaration public int IndexOf(T item) Parameters Type Name Description T item Returns Type Description System.Int32 | Improve this Doc View Source Insert(Int32, T) The list is read-only, not supported. Declaration public void Insert(int index, T item) Parameters Type Name Description System.Int32 index T item | Improve this Doc View Source LoadCount() Loads the count of the collection. Declaration protected virtual void LoadCount() | Improve this Doc View Source LoadPage(Int32) Load page with the given index. Declaration protected virtual void LoadPage(int pageIndex) Parameters Type Name Description System.Int32 pageIndex | Improve this Doc View Source PopulatePage(Int32, IList<T>) Sets the given page to the given index. Declaration protected virtual void PopulatePage(int pageIndex, IList<T> page) Parameters Type Name Description System.Int32 pageIndex System.Collections.Generic.IList <T> page | Improve this Doc View Source Remove(T) The list is read-only, not supported. Declaration public bool Remove(T item) Parameters Type Name Description T item Returns Type Description System.Boolean | Improve this Doc View Source RemoveAt(Int32) The list is read-only, not supported. Declaration public void RemoveAt(int index) Parameters Type Name Description System.Int32 index | Improve this Doc View Source RequestPage(Int32) Load the page with the given index. Declaration protected virtual void RequestPage(int pageIndex) Parameters Type Name Description System.Int32 pageIndex Explicit Interface Implementations | Improve this Doc View Source ICollection.CopyTo(Array, Int32) The list is read-only, not supported. Declaration void ICollection.CopyTo(Array array, int index) Parameters Type Name Description System.Array array System.Int32 index | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator | Improve this Doc View Source IList.Add(Object) Declaration int IList.Add(object value) Parameters Type Name Description System.Object value Returns Type Description System.Int32 | Improve this Doc View Source IList.Contains(Object) Declaration bool IList.Contains(object value) Parameters Type Name Description System.Object value Returns Type Description System.Boolean | Improve this Doc View Source IList.IndexOf(Object) Declaration int IList.IndexOf(object value) Parameters Type Name Description System.Object value Returns Type Description System.Int32 | Improve this Doc View Source IList.Insert(Int32, Object) The list is read-only, not supported. Declaration void IList.Insert(int index, object value) Parameters Type Name Description System.Int32 index System.Object value | Improve this Doc View Source IList.Item[Int32] Declaration object IList.this[int index] { get; set; } Parameters Type Name Description System.Int32 index Returns Type Description System.Object | Improve this Doc View Source IList.Remove(Object) The list is read-only, not supported. Declaration void IList.Remove(object value) Parameters Type Name Description System.Object value Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable"
  },
  "api/Semiodesk.Trinity.ITransactional.html": {
    "href": "api/Semiodesk.Trinity.ITransactional.html",
    "title": "Interface ITransactional",
    "keywords": "Interface ITransactional Interface for a transactional object Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public interface ITransactional Methods | Improve this Doc View Source Commit() Persist any changes to the object. Declaration void Commit() | Improve this Doc View Source Rollback() Discard any changes to the object. Declaration void Rollback()"
  },
  "api/Semiodesk.Trinity.ModelGroupFactory.html": {
    "href": "api/Semiodesk.Trinity.ModelGroupFactory.html",
    "title": "Class ModelGroupFactory",
    "keywords": "Class ModelGroupFactory Inheritance System.Object ModelGroupFactory Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class ModelGroupFactory Methods | Improve this Doc View Source CreateModelGroup(IStore, IEnumerable<IModel>) Declaration public static IModelGroup CreateModelGroup(IStore store, IEnumerable<IModel> models) Parameters Type Name Description IStore store System.Collections.Generic.IEnumerable < IModel > models Returns Type Description IModelGroup"
  },
  "api/Semiodesk.Trinity.Property.html": {
    "href": "api/Semiodesk.Trinity.Property.html",
    "title": "Class Property",
    "keywords": "Class Property Objects of this class represent RDF properties. Inheritance System.Object Resource Property Implements IResource System.ComponentModel.INotifyPropertyChanged System.IDisposable ITransactional Inherited Members Resource.Model Resource.Uri Resource.IsNew Resource.IsDisposed Resource.IsSynchronized Resource.IsReadOnly Resource.SetIsReadOnly(Boolean) Resource.Language Resource.SetModel(IModel) Resource.GetTypes() Resource.ToString() Resource.AddProperty(Property, IResource) Resource.AddProperty(Property, String) Resource.AddProperty(Property, String, CultureInfo) Resource.AddProperty(Property, String, String) Resource.AddProperty(Property, Int16) Resource.AddProperty(Property, Int32) Resource.AddProperty(Property, Int64) Resource.AddProperty(Property, UInt16) Resource.AddProperty(Property, UInt32) Resource.AddProperty(Property, UInt64) Resource.AddProperty(Property, Single) Resource.AddProperty(Property, Double) Resource.AddProperty(Property, Decimal) Resource.AddProperty(Property, Boolean) Resource.AddProperty(Property, DateTime) Resource.AddProperty(Property, TimeSpan) Resource.AddProperty(Property, Byte[]) Resource.AddProperty(Property, Uri) Resource.RemoveProperty(Property, IResource) Resource.RemoveProperty(Property, String) Resource.RemoveProperty(Property, String, CultureInfo) Resource.RemoveProperty(Property, String, String) Resource.RemoveProperty(Property, Int16) Resource.RemoveProperty(Property, Int32) Resource.RemoveProperty(Property, Int64) Resource.RemoveProperty(Property, UInt16) Resource.RemoveProperty(Property, UInt32) Resource.RemoveProperty(Property, UInt64) Resource.RemoveProperty(Property, Single) Resource.RemoveProperty(Property, Double) Resource.RemoveProperty(Property, Decimal) Resource.RemoveProperty(Property, Boolean) Resource.RemoveProperty(Property, DateTime) Resource.RemoveProperty(Property, Byte[]) Resource.RemoveProperty(Property, Uri) Resource.HasProperty(Property) Resource.HasProperty(Property, Object) Resource.HasProperty(Property, String, CultureInfo) Resource.HasProperty(Property, String, String) Resource.ListValues() Resource.ListValues(Property) Resource.ListProperties() Resource.GetValue(Property) Resource.GetValue(Property, Object) Resource.Commit() Resource.Rollback() Resource.HasPropertyMapping(Property, Type) Resource.GetValue<T>(PropertyMapping<T>) Resource.SetValue<T>(PropertyMapping<T>, T) Resource.RegisterPropertyChanged(String) Resource.RaisePropertyChanged(String) Resource.ReloadLocalizedMappings() Resource.Dispose() Resource.PropertyChanged Resource.VerifyPropertyName(String) Resource.ThrowOnInvalidPropertyName System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class Property : Resource, IResource, INotifyPropertyChanged, IDisposable, ITransactional Constructors | Improve this Doc View Source Property(UriRef) Constructor taking a UriRef parameter Declaration public Property(UriRef uri) Parameters Type Name Description UriRef uri Uri of the property | Improve this Doc View Source Property(Uri) Constructor taking a Uri parameter Declaration public Property(Uri uri) Parameters Type Name Description System.Uri uri Uri of the property Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides Resource.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Resource.GetHashCode() Implements IResource System.ComponentModel.INotifyPropertyChanged System.IDisposable ITransactional Extension Methods ResourceExtensions.FindAll<T>(IResource, T, Int32) ResourceExtensions.FindAll<T>(IResource, IEnumerable<T>, Int32)"
  },
  "api/Semiodesk.Trinity.Query.NodeFactoryExtensions.html": {
    "href": "api/Semiodesk.Trinity.Query.NodeFactoryExtensions.html",
    "title": "Class NodeFactoryExtensions",
    "keywords": "Class NodeFactoryExtensions Inheritance System.Object NodeFactoryExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity.Query Assembly : Semiodesk.Trinity.dll Syntax public static class NodeFactoryExtensions Methods | Improve this Doc View Source CreateLiteralNode(NodeFactory, Boolean) Declaration public static INode CreateLiteralNode(this NodeFactory factory, bool value) Parameters Type Name Description VDS.RDF.NodeFactory factory System.Boolean value Returns Type Description VDS.RDF.INode"
  },
  "api/Semiodesk.Trinity.Resource.html": {
    "href": "api/Semiodesk.Trinity.Resource.html",
    "title": "Class Resource",
    "keywords": "Class Resource This class repesents a RDF resource. Inheritance System.Object Resource Class Property Implements IResource System.ComponentModel.INotifyPropertyChanged System.IDisposable ITransactional Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class Resource : IResource, INotifyPropertyChanged, IDisposable, ITransactional Constructors | Improve this Doc View Source Resource(Resource) Create a new instance of the class and copy the properties from another class instance. Declaration public Resource(Resource other) Parameters Type Name Description Resource other | Improve this Doc View Source Resource(UriRef) Create a new resource with a given Uri. Declaration public Resource(UriRef uri) Parameters Type Name Description UriRef uri | Improve this Doc View Source Resource(String) Create a new resource with a given string. Throws an exception if string is Uri compatible. Declaration public Resource(string uriString) Parameters Type Name Description System.String uriString The string converted to a Uri. Throws an exception if not possible. | Improve this Doc View Source Resource(Uri) Create a new resource with a given Uri. Declaration public Resource(Uri uri) Parameters Type Name Description System.Uri uri Properties | Improve this Doc View Source IsDisposed Indicates if the resources has been disposed. Declaration [JsonIgnore] public bool IsDisposed { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsNew New resource which have never been committed need to be treated differently. Declaration [JsonIgnore] public bool IsNew { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsReadOnly Indicates this resource is read-only. Declaration [JsonIgnore] public virtual bool IsReadOnly { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsSynchronized True if the properties of the resources has been committed to the model. Declaration [Browsable(false)] [JsonIgnore] public bool IsSynchronized { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Language Set the language of this resource. This will change te mapped strings to this language. Declaration [JsonIgnore] public string Language { get; set; } Property Value Type Description System.String | Improve this Doc View Source Model Public accessor to the model. Declaration public IModel Model { get; set; } Property Value Type Description IModel | Improve this Doc View Source ThrowOnInvalidPropertyName Returns whether an exception is thrown, or if a Debug.Fail() is used when an invalid property name is passed to the VerifyPropertyName method. The default value is false, but subclasses used by unit tests might override this property's getter to return true. Declaration protected virtual bool ThrowOnInvalidPropertyName { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Uri The uri which represents the resource. Declaration public UriRef Uri { get; set; } Property Value Type Description UriRef Methods | Improve this Doc View Source AddProperty(Property, IResource) Add a property with a resource as value. If this property is mapped with a compatible type, it will be filled with the given value. Declaration public virtual void AddProperty(Property property, IResource value) Parameters Type Name Description Property property IResource value | Improve this Doc View Source AddProperty(Property, Boolean) Add a property with a bool as value. If this property is mapped with a compatible type, it will be filled with the given value. Declaration public void AddProperty(Property property, bool value) Parameters Type Name Description Property property System.Boolean value | Improve this Doc View Source AddProperty(Property, Byte[]) Add a property with a byte array as value. If this property is mapped with a compatible type, it will be filled with the given value. Declaration public void AddProperty(Property property, byte[] value) Parameters Type Name Description Property property System.Byte [] value | Improve this Doc View Source AddProperty(Property, DateTime) Add a property with a DateTime as value. If this property is mapped with a compatible type, it will be filled with the given value. Declaration public void AddProperty(Property property, DateTime value) Parameters Type Name Description Property property System.DateTime value | Improve this Doc View Source AddProperty(Property, Decimal) Add a property with a decimal as value. If this property is mapped with a compatible type, it will be filled with the given value. Declaration public void AddProperty(Property property, decimal value) Parameters Type Name Description Property property System.Decimal value | Improve this Doc View Source AddProperty(Property, Double) Add a property with a double as value. If this property is mapped with a compatible type, it will be filled with the given value. Declaration public void AddProperty(Property property, double value) Parameters Type Name Description Property property System.Double value | Improve this Doc View Source AddProperty(Property, Int16) Add a property with a Int16 as value. If this property is mapped with a compatible type, it will be filled with the given value. Declaration public void AddProperty(Property property, short value) Parameters Type Name Description Property property System.Int16 value | Improve this Doc View Source AddProperty(Property, Int32) Add a property with a Int32 as value. If this property is mapped with a compatible type, it will be filled with the given value. Declaration public void AddProperty(Property property, int value) Parameters Type Name Description Property property System.Int32 value | Improve this Doc View Source AddProperty(Property, Int64) Add a property with a Int64 as value. If this property is mapped with a compatible type, it will be filled with the given value. Declaration public void AddProperty(Property property, long value) Parameters Type Name Description Property property System.Int64 value | Improve this Doc View Source AddProperty(Property, Single) Add a property with a float as value. If this property is mapped with a compatible type, it will be filled with the given value. Declaration public void AddProperty(Property property, float value) Parameters Type Name Description Property property System.Single value | Improve this Doc View Source AddProperty(Property, String) Add a property with a string as value. If this property is mapped with a compatible type, it will be filled with the given value. Declaration public void AddProperty(Property property, string value) Parameters Type Name Description Property property System.String value | Improve this Doc View Source AddProperty(Property, String, CultureInfo) Add a property with a string and language as value. If this property is mapped with a compatible type, it will be filled with the given value. Declaration public void AddProperty(Property property, string value, CultureInfo language) Parameters Type Name Description Property property System.String value System.Globalization.CultureInfo language | Improve this Doc View Source AddProperty(Property, String, String) Add a property with a string and language as value. If this property is mapped with a compatible type, it will be filled with the given value. Declaration public void AddProperty(Property property, string value, string language) Parameters Type Name Description Property property System.String value System.String language | Improve this Doc View Source AddProperty(Property, TimeSpan) Add a property with a TimeSpan as value. If this property is mapped with a compatible type, it will be filled with the given value. Declaration public void AddProperty(Property property, TimeSpan value) Parameters Type Name Description Property property System.TimeSpan value | Improve this Doc View Source AddProperty(Property, UInt16) Add a property with a UInt16 as value. If this property is mapped with a compatible type, it will be filled with the given value. Declaration public void AddProperty(Property property, ushort value) Parameters Type Name Description Property property System.UInt16 value | Improve this Doc View Source AddProperty(Property, UInt32) Add a property with a UInt32 as value. If this property is mapped with a compatible type, it will be filled with the given value. Declaration public void AddProperty(Property property, uint value) Parameters Type Name Description Property property System.UInt32 value | Improve this Doc View Source AddProperty(Property, UInt64) Add a property with a UInt64 as value. If this property is mapped with a compatible type, it will be filled with the given value. Declaration public void AddProperty(Property property, ulong value) Parameters Type Name Description Property property System.UInt64 value | Improve this Doc View Source AddProperty(Property, Uri) Add a property with an Uri as value. If this property is mapped with a compatible type, it will be filled with the given value. Declaration public virtual void AddProperty(Property property, Uri value) Parameters Type Name Description Property property System.Uri value | Improve this Doc View Source Commit() Persist changes in the model. Declaration public virtual void Commit() | Improve this Doc View Source Dispose() Dispose this resource. Does nothing meaningful currently. Declaration public void Dispose() | Improve this Doc View Source Equals(Object) A resource is at the moment deemed equal if the Uri is equal. Declaration public override bool Equals(object comparand) Parameters Type Name Description System.Object comparand Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source Finalize() Destructor Declaration protected void Finalize() | Improve this Doc View Source GetHashCode() We return the hashcode of the original string of the uri Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source GetTypes() Overwrite this method to return the RDF classes of your resource type. Declaration public virtual IEnumerable<Class> GetTypes() Returns Type Description System.Collections.Generic.IEnumerable < Class > | Improve this Doc View Source GetValue(Property) Return the value for a given property. Declaration public virtual object GetValue(Property property) Parameters Type Name Description Property property A RDF property. Returns Type Description System.Object The value on success, null if the object has no such property. | Improve this Doc View Source GetValue(Property, Object) Return the value for a given property with a predefined default value. Declaration public object GetValue(Property property, object defaultValue) Parameters Type Name Description Property property A RDF property. System.Object defaultValue Specifies a default value that should be returned if no value exists. Returns Type Description System.Object The value on success, the default value if the object has no such property. | Improve this Doc View Source GetValue<T>(PropertyMapping<T>) Returns the value from the mapped property. Declaration protected virtual T GetValue<T>(PropertyMapping<T> propertyMapping) Parameters Type Name Description PropertyMapping <T> propertyMapping Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source HasProperty(Property) Returns true if the resource has any object connected with the specified property. Declaration public virtual bool HasProperty(Property property) Parameters Type Name Description Property property The property to be checked. Returns Type Description System.Boolean true if the property is associated, false if not | Improve this Doc View Source HasProperty(Property, Object) Returns true if the specified value is connected to this resource with the given property. Declaration public virtual bool HasProperty(Property property, object value) Parameters Type Name Description Property property The property to be checked System.Object value The value that should be tested Returns Type Description System.Boolean true if the value is associated with the property, false if not | Improve this Doc View Source HasProperty(Property, String, CultureInfo) Returns true if the specified string value with the given language is connected to this resource with the given property. Declaration public virtual bool HasProperty(Property property, string value, CultureInfo language) Parameters Type Name Description Property property The property System.String value The string value. System.Globalization.CultureInfo language The language the string is in. Returns Type Description System.Boolean | Improve this Doc View Source HasProperty(Property, String, String) Returns true if the specified string value with the given language is connected to this resource with the given property. Declaration public virtual bool HasProperty(Property property, string value, string language) Parameters Type Name Description Property property The property System.String value The string value. System.String language The language the string is in. Returns Type Description System.Boolean | Improve this Doc View Source HasPropertyMapping(Property, Type) This method returns if property is mapped. Declaration public bool HasPropertyMapping(Property property, Type type) Parameters Type Name Description Property property Rdf property to be tested. System.Type type Type of the mapping. Returns Type Description System.Boolean | Improve this Doc View Source ListProperties() List all available properties. This includes mapped properties if they have valid values. Declaration public virtual IEnumerable<Property> ListProperties() Returns Type Description System.Collections.Generic.IEnumerable < Property > | Improve this Doc View Source ListValues() This method lists all combinations of properties and values. Declaration public virtual IEnumerable<Tuple<Property, object>> ListValues() Returns Type Description System.Collections.Generic.IEnumerable < System.Tuple < Property , System.Object >> | Improve this Doc View Source ListValues(Property) Lists all values associated with one property. This inclues the mapped values as well. Declaration public virtual IEnumerable<object> ListValues(Property property) Parameters Type Name Description Property property Returns Type Description System.Collections.Generic.IEnumerable < System.Object > | Improve this Doc View Source RaisePropertyChanged(String) Raises the PropertyChanged event of the object. Declaration protected virtual void RaisePropertyChanged(string propertyName) Parameters Type Name Description System.String propertyName Name of a property. | Improve this Doc View Source RegisterPropertyChanged(String) Register a property name to raise the INotifyProperty signal on rollback. Declaration protected void RegisterPropertyChanged(string propertyName) Parameters Type Name Description System.String propertyName Name of a property. | Improve this Doc View Source ReloadLocalizedMappings() Declaration protected void ReloadLocalizedMappings() | Improve this Doc View Source RemoveProperty(Property, IResource) Removes a property with a IResource value. If this property is mapped with a compatible type, the given value will be removed. Declaration public void RemoveProperty(Property property, IResource value) Parameters Type Name Description Property property IResource value | Improve this Doc View Source RemoveProperty(Property, Boolean) Removes a property with a bool value. If this property is mapped with a compatible type, the given value will be removed. Declaration public void RemoveProperty(Property property, bool value) Parameters Type Name Description Property property System.Boolean value | Improve this Doc View Source RemoveProperty(Property, Byte[]) Removes a property with a byte array value. If this property is mapped with a compatible type, the given value will be removed. Declaration public void RemoveProperty(Property property, byte[] value) Parameters Type Name Description Property property System.Byte [] value | Improve this Doc View Source RemoveProperty(Property, DateTime) Removes a property with a DateTime value. If this property is mapped with a compatible type, the given value will be removed. Declaration public void RemoveProperty(Property property, DateTime value) Parameters Type Name Description Property property System.DateTime value | Improve this Doc View Source RemoveProperty(Property, Decimal) Removes a property with a decimal value. If this property is mapped with a compatible type, the given value will be removed. Declaration public void RemoveProperty(Property property, decimal value) Parameters Type Name Description Property property System.Decimal value | Improve this Doc View Source RemoveProperty(Property, Double) Removes a property with a double value. If this property is mapped with a compatible type, the given value will be removed. Declaration public void RemoveProperty(Property property, double value) Parameters Type Name Description Property property System.Double value | Improve this Doc View Source RemoveProperty(Property, Int16) Removes a property with a Int16 value. If this property is mapped with a compatible type, the given value will be removed. Declaration public void RemoveProperty(Property property, short value) Parameters Type Name Description Property property System.Int16 value | Improve this Doc View Source RemoveProperty(Property, Int32) Removes a property with a Int32 value. If this property is mapped with a compatible type, the given value will be removed. Declaration public void RemoveProperty(Property property, int value) Parameters Type Name Description Property property System.Int32 value | Improve this Doc View Source RemoveProperty(Property, Int64) Removes a property with a Int64 value. If this property is mapped with a compatible type, the given value will be removed. Declaration public void RemoveProperty(Property property, long value) Parameters Type Name Description Property property System.Int64 value | Improve this Doc View Source RemoveProperty(Property, Single) Removes a property with a float value. If this property is mapped with a compatible type, the given value will be removed. Declaration public void RemoveProperty(Property property, float value) Parameters Type Name Description Property property System.Single value | Improve this Doc View Source RemoveProperty(Property, String) Removes a property with a string value. If this property is mapped with a compatible type, the given value will be removed. Declaration public void RemoveProperty(Property property, string value) Parameters Type Name Description Property property System.String value | Improve this Doc View Source RemoveProperty(Property, String, CultureInfo) Removes a property with a string value associated with the given language. If this property is mapped with a compatible type, the given value will be removed. Declaration public void RemoveProperty(Property property, string value, CultureInfo language) Parameters Type Name Description Property property System.String value System.Globalization.CultureInfo language | Improve this Doc View Source RemoveProperty(Property, String, String) Removes a property with a string value associated with the given language. If this property is mapped with a compatible type, the given value will be removed. Declaration public void RemoveProperty(Property property, string value, string language) Parameters Type Name Description Property property System.String value System.String language | Improve this Doc View Source RemoveProperty(Property, UInt16) Removes a property with a UInt16 value. If this property is mapped with a compatible type, the given value will be removed. Declaration public void RemoveProperty(Property property, ushort value) Parameters Type Name Description Property property System.UInt16 value | Improve this Doc View Source RemoveProperty(Property, UInt32) Removes a property with a UInt32 value. If this property is mapped with a compatible type, the given value will be removed. Declaration public void RemoveProperty(Property property, uint value) Parameters Type Name Description Property property System.UInt32 value | Improve this Doc View Source RemoveProperty(Property, UInt64) Removes a property with a UInt64 value. If this property is mapped with a compatible type, the given value will be removed. Declaration public void RemoveProperty(Property property, ulong value) Parameters Type Name Description Property property System.UInt64 value | Improve this Doc View Source RemoveProperty(Property, Uri) Removes a property with an Uri value. If this property is mapped with a compatible type, the given value will be removed. Declaration public void RemoveProperty(Property property, Uri value) Parameters Type Name Description Property property System.Uri value | Improve this Doc View Source Rollback() Reload the resource from the model. Declaration public void Rollback() | Improve this Doc View Source SetIsReadOnly(Boolean) This method provides a mechanism to change writability in subclasses. Declaration protected virtual void SetIsReadOnly(bool value) Parameters Type Name Description System.Boolean value | Improve this Doc View Source SetModel(IModel) Declaration public void SetModel(IModel model) Parameters Type Name Description IModel model | Improve this Doc View Source SetValue<T>(PropertyMapping<T>, T) Set the mapped value. This also raises the PropertyChanged event. Declaration protected virtual void SetValue<T>(PropertyMapping<T> propertyMapping, T value) Parameters Type Name Description PropertyMapping <T> propertyMapping T value Type Parameters Name Description T | Improve this Doc View Source ToString() Returns the uri with brackets. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() | Improve this Doc View Source VerifyPropertyName(String) Warns the developer if this object does not have a public property with the specified name. This method does not exist in a Release build. Declaration [Conditional(\"DEBUG\")] public void VerifyPropertyName(string propertyName) Parameters Type Name Description System.String propertyName Events | Improve this Doc View Source PropertyChanged Needed for the implementation of the INotifyPropertyChanged interface. Declaration public event PropertyChangedEventHandler PropertyChanged Event Type Type Description System.ComponentModel.PropertyChangedEventHandler Implements IResource System.ComponentModel.INotifyPropertyChanged System.IDisposable ITransactional Extension Methods ResourceExtensions.FindAll<T>(IResource, T, Int32) ResourceExtensions.FindAll<T>(IResource, IEnumerable<T>, Int32)"
  },
  "api/Semiodesk.Trinity.ResourceQueryResult.html": {
    "href": "api/Semiodesk.Trinity.ResourceQueryResult.html",
    "title": "Class ResourceQueryResult",
    "keywords": "Class ResourceQueryResult Inheritance System.Object ResourceQueryResult Implements IResourceQueryResult Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class ResourceQueryResult : IResourceQueryResult Constructors | Improve this Doc View Source ResourceQueryResult(IModel, ResourceQuery, Boolean, ITransaction) Declaration public ResourceQueryResult(IModel model, ResourceQuery query, bool inferenceEnabled, ITransaction transaction) Parameters Type Name Description IModel model ResourceQuery query System.Boolean inferenceEnabled ITransaction transaction Methods | Improve this Doc View Source Count() Declaration public int Count() Returns Type Description System.Int32 | Improve this Doc View Source GetResources(Int32, Int32) Declaration public IEnumerable<Resource> GetResources(int offset = -1, int limit = -1) Parameters Type Name Description System.Int32 offset System.Int32 limit Returns Type Description System.Collections.Generic.IEnumerable < Resource > | Improve this Doc View Source GetResources<T>(Int32, Int32) Declaration public IEnumerable<T> GetResources<T>(int offset = -1, int limit = -1) where T : Resource Parameters Type Name Description System.Int32 offset System.Int32 limit Returns Type Description System.Collections.Generic.IEnumerable <T> Type Parameters Name Description T | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IResourceQueryResult"
  },
  "api/Semiodesk.Trinity.Serialization.JsonResourceConverter.html": {
    "href": "api/Semiodesk.Trinity.Serialization.JsonResourceConverter.html",
    "title": "Class JsonResourceConverter",
    "keywords": "Class JsonResourceConverter Inheritance System.Object Newtonsoft.Json.JsonConverter JsonResourceConverter Inherited Members Newtonsoft.Json.JsonConverter.CanRead System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity.Serialization Assembly : Semiodesk.Trinity.dll Syntax public class JsonResourceConverter : JsonConverter Constructors | Improve this Doc View Source JsonResourceConverter(IStore) Declaration public JsonResourceConverter(IStore store) Parameters Type Name Description IStore store Properties | Improve this Doc View Source CanWrite Declaration public override bool CanWrite { get; } Property Value Type Description System.Boolean Overrides Newtonsoft.Json.JsonConverter.CanWrite Methods | Improve this Doc View Source CanConvert(Type) Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description System.Type objectType Returns Type Description System.Boolean Overrides Newtonsoft.Json.JsonConverter.CanConvert(System.Type) | Improve this Doc View Source ReadJson(JsonReader, Type, Object, JsonSerializer) Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonReader reader System.Type objectType System.Object existingValue Newtonsoft.Json.JsonSerializer serializer Returns Type Description System.Object Overrides Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer) | Improve this Doc View Source WriteJson(JsonWriter, Object, JsonSerializer) Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonWriter writer System.Object value Newtonsoft.Json.JsonSerializer serializer Overrides Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)"
  },
  "api/Semiodesk.Trinity.MappingDiscovery.html": {
    "href": "api/Semiodesk.Trinity.MappingDiscovery.html",
    "title": "Class MappingDiscovery",
    "keywords": "Class MappingDiscovery This static class is responsible for discovering mapped classes. Every assembly that defines mapping classes needs to register them with this service. Inheritance System.Object MappingDiscovery Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public static class MappingDiscovery Fields | Improve this Doc View Source MappingClasses The list of all registered mapped classes. Declaration public static List<MappingDiscovery.MappingClass> MappingClasses Field Value Type Description System.Collections.Generic.List < MappingDiscovery.MappingClass > | Improve this Doc View Source RegisteredAssemblies The list of all registered assemblies Declaration public static List<string> RegisteredAssemblies Field Value Type Description System.Collections.Generic.List < System.String > Methods | Improve this Doc View Source AddMappingClass(Type) Adds a mapped class to the registration. Declaration public static void AddMappingClass(Type _class) Parameters Type Name Description System.Type _class | Improve this Doc View Source AddMappingClasses(IList<Type>) Adds a collection of mapped classes to the registration. Declaration public static void AddMappingClasses(IList<Type> list) Parameters Type Name Description System.Collections.Generic.IList < System.Type > list | Improve this Doc View Source GetBaseTypes(Type, ref List<Class>) Declaration public static void GetBaseTypes(Type _class, ref List<Class> baseTypes) Parameters Type Name Description System.Type _class System.Collections.Generic.List < Class > baseTypes | Improve this Doc View Source GetMatchingTypes(IEnumerable<Class>, Type, Boolean) Returns all types which match the given restrictions. Declaration public static Type[] GetMatchingTypes(IEnumerable<Class> classes, Type type, bool inferencingEnabled = false) Parameters Type Name Description System.Collections.Generic.IEnumerable < Class > classes List of RDF classes System.Type type A c# type in a inheritence tree. Give Resource if you don't know what to do. System.Boolean inferencingEnabled Should inferencing be factored in. Returns Type Description System.Type [] | Improve this Doc View Source GetRdfClasses(Type) The the RDF class of a C# type. Declaration public static IEnumerable<Class> GetRdfClasses(Type type) Parameters Type Name Description System.Type type Returns Type Description System.Collections.Generic.IEnumerable < Class > | Improve this Doc View Source RegisterAllCurrentAssemblies() Register ALL THE THINGS!! from all assemblies currently loaded. Declaration public static void RegisterAllCurrentAssemblies() | Improve this Doc View Source RegisterAssembly(Assembly) Load all mapped classes from the given assembly. Declaration public static void RegisterAssembly(Assembly asm) Parameters Type Name Description System.Reflection.Assembly asm | Improve this Doc View Source RegisterCallingAssembly() Loads all mapped classes from the assembly calling this method. Declaration public static void RegisterCallingAssembly()"
  },
  "api/Semiodesk.Trinity.NamespaceManager.html": {
    "href": "api/Semiodesk.Trinity.NamespaceManager.html",
    "title": "Class NamespaceManager",
    "keywords": "Class NamespaceManager Allows for easier namespace management for queries. Inheritance System.Object System.Xml.XmlNamespaceManager NamespaceManager Implements System.Collections.IEnumerable System.Xml.IXmlNamespaceResolver Inherited Members System.Xml.XmlNamespaceManager.AddNamespace(System.String, System.String) System.Xml.XmlNamespaceManager.GetEnumerator() System.Xml.XmlNamespaceManager.GetNamespacesInScope(System.Xml.XmlNamespaceScope) System.Xml.XmlNamespaceManager.HasNamespace(System.String) System.Xml.XmlNamespaceManager.LookupNamespace(System.String) System.Xml.XmlNamespaceManager.LookupPrefix(System.String) System.Xml.XmlNamespaceManager.PopScope() System.Xml.XmlNamespaceManager.PushScope() System.Xml.XmlNamespaceManager.RemoveNamespace(System.String, System.String) System.Xml.XmlNamespaceManager.DefaultNamespace System.Xml.XmlNamespaceManager.NameTable System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class NamespaceManager : XmlNamespaceManager, IEnumerable, IXmlNamespaceResolver Constructors | Improve this Doc View Source NamespaceManager() Constructor, by default creates the namespaces for RDF and RDFS. Declaration public NamespaceManager() Methods | Improve this Doc View Source AddNamespace(String, Uri) Add a namespace to the manager. Declaration public void AddNamespace(string prefix, Uri namespaceUri) Parameters Type Name Description System.String prefix System.Uri namespaceUri | Improve this Doc View Source RemoveNamespace(String) Remove a namespace from the manager. Declaration public void RemoveNamespace(string prefix) Parameters Type Name Description System.String prefix Implements System.Collections.IEnumerable System.Xml.IXmlNamespaceResolver"
  },
  "api/Semiodesk.Trinity.PropertyValue.html": {
    "href": "api/Semiodesk.Trinity.PropertyValue.html",
    "title": "Class PropertyValue",
    "keywords": "Class PropertyValue Inheritance System.Object PropertyValue Implements System.IEquatable < PropertyValue > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class PropertyValue : IEquatable<PropertyValue> Constructors | Improve this Doc View Source PropertyValue(Property, Object) Declaration public PropertyValue(Property property, object value) Parameters Type Name Description Property property System.Object value Fields | Improve this Doc View Source Property Declaration public Property Property Field Value Type Description Property | Improve this Doc View Source Value Declaration public object Value Field Value Type Description System.Object Methods | Improve this Doc View Source Equals(PropertyValue) Declaration public bool Equals(PropertyValue other) Parameters Type Name Description PropertyValue other Returns Type Description System.Boolean Implements System.IEquatable<T>"
  },
  "api/Semiodesk.Trinity.Query.html": {
    "href": "api/Semiodesk.Trinity.Query.html",
    "title": "Namespace Semiodesk.Trinity.Query",
    "keywords": "Namespace Semiodesk.Trinity.Query Classes ConstantExpressionExtensions MemberInfoExtensions MethodCallExpressionExtensions NodeFactoryExtensions"
  },
  "api/Semiodesk.Trinity.ResourceExtensions.html": {
    "href": "api/Semiodesk.Trinity.ResourceExtensions.html",
    "title": "Class ResourceExtensions",
    "keywords": "Class ResourceExtensions Inheritance System.Object ResourceExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public static class ResourceExtensions Methods | Improve this Doc View Source FindAll<T>(IResource, T, Int32) Executes a breath first search on the property of the resource and returns all Declaration public static IEnumerable<T> FindAll<T>(this IResource resource, T relation, int depth = 2147483647) where T : IResource Parameters Type Name Description IResource resource T relation System.Int32 depth Returns Type Description System.Collections.Generic.IEnumerable <T> Type Parameters Name Description T | Improve this Doc View Source FindAll<T>(IResource, IEnumerable<T>, Int32) Executes a breath first search on the property of the resource and returns all Declaration public static IEnumerable<T> FindAll<T>(this IResource resource, IEnumerable<T> relation, int depth = 2147483647) where T : IResource Parameters Type Name Description IResource resource System.Collections.Generic.IEnumerable <T> relation System.Int32 depth Returns Type Description System.Collections.Generic.IEnumerable <T> Type Parameters Name Description T"
  },
  "api/Semiodesk.Trinity.SortCriterion.html": {
    "href": "api/Semiodesk.Trinity.SortCriterion.html",
    "title": "Class SortCriterion",
    "keywords": "Class SortCriterion Inheritance System.Object SortCriterion Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class SortCriterion Constructors | Improve this Doc View Source SortCriterion() Declaration public SortCriterion() | Improve this Doc View Source SortCriterion(String, Property, SortDirection) Declaration public SortCriterion(string name, Property property, SortDirection direction = SortDirection.Ascending) Parameters Type Name Description System.String name Property property SortDirection direction Properties | Improve this Doc View Source Direction Declaration public SortDirection Direction { get; set; } Property Value Type Description SortDirection | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source Property Declaration public Property Property { get; set; } Property Value Type Description Property"
  },
  "api/Semiodesk.Trinity.SortDirection.html": {
    "href": "api/Semiodesk.Trinity.SortDirection.html",
    "title": "Enum SortDirection",
    "keywords": "Enum SortDirection Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public enum SortDirection Fields Name Description Ascending Descending None"
  },
  "api/Semiodesk.Trinity.PropertyMapping-1.html": {
    "href": "api/Semiodesk.Trinity.PropertyMapping-1.html",
    "title": "Class PropertyMapping<T>",
    "keywords": "Class PropertyMapping<T> This class does the heavy lifting of the property mapping mechanism. It stores the value and acts as intermediary for the resource. Inheritance System.Object PropertyMapping<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class PropertyMapping<T> : IPropertyMapping Type Parameters Name Description T Constructors | Improve this Doc View Source PropertyMapping(String, Property, T, Boolean) Creates a new property mapping. Declaration public PropertyMapping(string propertyName, Property property, T defaultValue, bool languageInvariant = false) Parameters Type Name Description System.String propertyName Name of the property in the class Property property The RDF property that should be mapped T defaultValue The default value used to initialize this property System.Boolean languageInvariant This parameter is only valid if the type is string. Tells the mapping that the values should be treated as non-localized literals. | Improve this Doc View Source PropertyMapping(String, Property, Boolean) Creates a new property mapping. Declaration public PropertyMapping(string propertyName, Property property, bool languageInvariant = false) Parameters Type Name Description System.String propertyName Name of the property in the class Property property The RDF property that should be mapped System.Boolean languageInvariant This parameter is only valid if the type is string. Tells the mapping that the values should be treated as non-localized literals. | Improve this Doc View Source PropertyMapping(String, String, T, Boolean) Creates a new property mapping. Declaration public PropertyMapping(string propertyName, string propertyUri, T defaultValue, bool languageInvariant = false) Parameters Type Name Description System.String propertyName Name of the property in the class System.String propertyUri The URI of the RDF property that should be mapped T defaultValue The default value used to initialize this property System.Boolean languageInvariant This parameter is only valid if the type is string. Tells the mapping that the values should be treated as non-localized literals. | Improve this Doc View Source PropertyMapping(String, String, Boolean) Creates a new property mapping. Declaration public PropertyMapping(string propertyName, string propertyUri, bool languageInvariant = false) Parameters Type Name Description System.String propertyName Name of the property in the class System.String propertyUri The URI of the RDF property that should be mapped System.Boolean languageInvariant This parameter is only valid if the type is string. Tells the mapping that the values should be treated as non-localized literals. Properties | Improve this Doc View Source Language Language of the value Declaration public string Language { get; set; } Property Value Type Description System.String | Improve this Doc View Source LanguageInvariant Only valid if type or generic type is string. The mapping ignores the language setting and is always non-localized. Declaration public bool LanguageInvariant { get; } Property Value Type Description System.Boolean | Improve this Doc View Source PropertyName Declaration public string PropertyName { get; } Property Value Type Description System.String | Improve this Doc View Source PropertyUri Declaration public string PropertyUri { get; } Property Value Type Description System.String Methods | Improve this Doc View Source IsNumericType(Type) Declaration public static bool IsNumericType(Type type) Parameters Type Name Description System.Type type Returns Type Description System.Boolean | Improve this Doc View Source IsPrecisionCompatible(Type, Type) Declaration public bool IsPrecisionCompatible(Type source, Type target) Parameters Type Name Description System.Type source System.Type target Returns Type Description System.Boolean"
  },
  "api/Semiodesk.Trinity.RdfSerializationFormat.html": {
    "href": "api/Semiodesk.Trinity.RdfSerializationFormat.html",
    "title": "Enum RdfSerializationFormat",
    "keywords": "Enum RdfSerializationFormat Enumerates all supported RDF serialization formats. Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public enum RdfSerializationFormat Fields Name Description Json JSON JsonLd JSON-LD https://www.w3.org/TR/json-ld/ N3 N3 http://www.w3.org/TeamSubmission/n3/ NQuads NTriples https://www.w3.org/TR/2014/REC-n-quads-20140225/ NTriples NTriples http://www.w3.org/2001/sw/RDFCore/ntriples/ RdfXml RDF/XML http://www.w3.org/TR/REC-rdf-syntax/ Trig TriG http://www.w3.org/TR/trig/ Turtle Turtle http://www.w3.org/TR/turtle/"
  },
  "api/Semiodesk.Trinity.ResourceQuery.html": {
    "href": "api/Semiodesk.Trinity.ResourceQuery.html",
    "title": "Class ResourceQuery",
    "keywords": "Class ResourceQuery Inheritance System.Object ResourceQuery Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class ResourceQuery Constructors | Improve this Doc View Source ResourceQuery() Creates a new instance of this class. Declaration public ResourceQuery() | Improve this Doc View Source ResourceQuery(Class[]) Creates a new instance of this class. Declaration public ResourceQuery(params Class[] types) Parameters Type Name Description Class [] types An array of types of the resource. | Improve this Doc View Source ResourceQuery(IResource) Creates a new instance of this class. Declaration public ResourceQuery(IResource resource) Parameters Type Name Description IResource resource The subject resource. | Improve this Doc View Source ResourceQuery(IEnumerable<Class>) Declaration public ResourceQuery(IEnumerable<Class> types) Parameters Type Name Description System.Collections.Generic.IEnumerable < Class > types | Improve this Doc View Source ResourceQuery(Uri) Creates a new instance of this class. Declaration public ResourceQuery(Uri uri) Parameters Type Name Description System.Uri uri The Uniform Resource Identifier of the subject. Properties | Improve this Doc View Source Limit Declaration public int Limit { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Offset Declaration public int Offset { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Uri The identifier being used as a variable name in the generated query. Declaration public Uri Uri { get; set; } Property Value Type Description System.Uri Methods | Improve this Doc View Source Clone() Declaration public ResourceQuery Clone() Returns Type Description ResourceQuery | Improve this Doc View Source Contains(String, Boolean) Declaration public void Contains(string value, bool caseSensitive = false) Parameters Type Name Description System.String value System.Boolean caseSensitive | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() | Improve this Doc View Source Where(Property, IEnumerable<Object>) Declaration public StatementPattern Where(Property property, IEnumerable<object> objects) Parameters Type Name Description Property property System.Collections.Generic.IEnumerable < System.Object > objects Returns Type Description StatementPattern | Improve this Doc View Source Where(Property, Object) Declaration public StatementPattern Where(Property property, object value = null) Parameters Type Name Description Property property System.Object value Returns Type Description StatementPattern"
  },
  "api/Semiodesk.Trinity.SparqlQueryType.html": {
    "href": "api/Semiodesk.Trinity.SparqlQueryType.html",
    "title": "Enum SparqlQueryType",
    "keywords": "Enum SparqlQueryType The SPARQL query forms as specified in http://www.w3.org/TR/rdf-sparql-query/#QueryForms Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public enum SparqlQueryType Fields Name Description Ask Construct Describe Select Unknown"
  },
  "api/Semiodesk.Trinity.SparqlQueryVariableScope.html": {
    "href": "api/Semiodesk.Trinity.SparqlQueryVariableScope.html",
    "title": "Enum SparqlQueryVariableScope",
    "keywords": "Enum SparqlQueryVariableScope Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public enum SparqlQueryVariableScope Fields Name Description Default Global"
  },
  "api/Semiodesk.Trinity.Store.StardogStoreProvider.html": {
    "href": "api/Semiodesk.Trinity.Store.StardogStoreProvider.html",
    "title": "Class StardogStoreProvider",
    "keywords": "Class StardogStoreProvider This class allows the usage of the Stardog store. An IStore handle can be created by calling StoreFactory.CreateStore(\"provider=stardog;host=http://localhost:5820;uid=admin;pw=admin;sid=MyStore\"); Inheritance System.Object StoreProvider StardogStoreProvider Inherited Members StoreProvider.Name StoreProvider.ConfigurationOptions System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity.Store Assembly : Semiodesk.Trinity.dll Syntax [Export(typeof(StoreProvider))] public class StardogStoreProvider : StoreProvider Constructors | Improve this Doc View Source StardogStoreProvider() Declaration public StardogStoreProvider() Methods | Improve this Doc View Source GetStore(Dictionary<String, String>) Declaration public override IStore GetStore(Dictionary<string, string> configurationDictionary) Parameters Type Name Description System.Collections.Generic.Dictionary < System.String , System.String > configurationDictionary Returns Type Description IStore Overrides StoreProvider.GetStore(Dictionary<String, String>)"
  },
  "api/Semiodesk.Trinity.Store.Virtuoso.Graph.html": {
    "href": "api/Semiodesk.Trinity.Store.Virtuoso.Graph.html",
    "title": "Class Graph",
    "keywords": "Class Graph Inheritance System.Object Graph Namespace : Semiodesk.Trinity.Store.Virtuoso Assembly : Semiodesk.Trinity.Virtuoso.dll Syntax public class Graph : object Properties | Improve this Doc View Source Uri Declaration public string Uri { get; set; } Property Value Type Description System.String"
  },
  "api/Semiodesk.Trinity.BindingSet.html": {
    "href": "api/Semiodesk.Trinity.BindingSet.html",
    "title": "Class BindingSet",
    "keywords": "Class BindingSet A dictionary of named value bindings which represents a single query solution. Inheritance System.Object System.Collections.Generic.Dictionary < System.String , System.Object > BindingSet Implements System.Collections.Generic.IDictionary < System.String , System.Object > System.Collections.Generic.ICollection < System.Collections.Generic.KeyValuePair < System.String , System.Object >> System.Collections.Generic.IReadOnlyDictionary < System.String , System.Object > System.Collections.Generic.IReadOnlyCollection < System.Collections.Generic.KeyValuePair < System.String , System.Object >> System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < System.String , System.Object >> System.Collections.IDictionary System.Collections.ICollection System.Collections.IEnumerable System.Runtime.Serialization.IDeserializationCallback System.Runtime.Serialization.ISerializable Inherited Members System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.get_Item(System.Object) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.set_Item(System.Object, System.Object) System.Collections.Generic.Dictionary<System.String, System.Object>.Add(System.String, System.Object) System.Collections.Generic.Dictionary<System.String, System.Object>.Clear() System.Collections.Generic.Dictionary<System.String, System.Object>.ContainsKey(System.String) System.Collections.Generic.Dictionary<System.String, System.Object>.ContainsValue(System.Object) System.Collections.Generic.Dictionary<System.String, System.Object>.GetEnumerator() System.Collections.Generic.Dictionary<System.String, System.Object>.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Collections.Generic.Dictionary<System.String, System.Object>.OnDeserialization(System.Object) System.Collections.Generic.Dictionary<System.String, System.Object>.Remove(System.String) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Add(System.Collections.Generic.KeyValuePair<System.String, System.Object>) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Contains(System.Collections.Generic.KeyValuePair<System.String, System.Object>) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.CopyTo(System.Collections.Generic.KeyValuePair<System.String, System.Object>[], System.Int32) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Remove(System.Collections.Generic.KeyValuePair<System.String, System.Object>) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.GetEnumerator() System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.ICollection.CopyTo(System.Array, System.Int32) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.Add(System.Object, System.Object) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.Contains(System.Object) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.GetEnumerator() System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.Remove(System.Object) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IEnumerable.GetEnumerator() System.Collections.Generic.Dictionary<System.String, System.Object>.TryGetValue(System.String, System.Object) System.Collections.Generic.Dictionary<System.String, System.Object>.Comparer System.Collections.Generic.Dictionary<System.String, System.Object>.Count System.Collections.Generic.Dictionary<System.String, System.Object>.Item[System.String] System.Collections.Generic.Dictionary<System.String, System.Object>.Keys System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.IsReadOnly System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.IDictionary<System.String, System.Object>.Keys System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.IDictionary<System.String, System.Object>.Values System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>.Keys System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>.Values System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.ICollection.IsSynchronized System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.ICollection.SyncRoot System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.IsFixedSize System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.IsReadOnly System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.Item[System.Object] System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.Keys System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.Values System.Collections.Generic.Dictionary<System.String, System.Object>.Values System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class BindingSet : Dictionary<string, object>, IDictionary<string, object>, ICollection<KeyValuePair<string, object>>, IReadOnlyDictionary<string, object>, IReadOnlyCollection<KeyValuePair<string, object>>, IEnumerable<KeyValuePair<string, object>>, IDictionary, ICollection, IEnumerable, IDeserializationCallback, ISerializable Implements System.Collections.Generic.IDictionary<TKey, TValue> System.Collections.Generic.ICollection<T> System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IDictionary System.Collections.ICollection System.Collections.IEnumerable System.Runtime.Serialization.IDeserializationCallback System.Runtime.Serialization.ISerializable"
  },
  "api/Semiodesk.Trinity.ISparqlQuery.html": {
    "href": "api/Semiodesk.Trinity.ISparqlQuery.html",
    "title": "Interface ISparqlQuery",
    "keywords": "Interface ISparqlQuery A generic sparql query interface. Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public interface ISparqlQuery Properties | Improve this Doc View Source IsInferenceEnabled Indicates if inference should be enabled. It depends on the underlying store if and how this is used. Declaration bool IsInferenceEnabled { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Model The model on which the query will be run. Declaration IModel Model { get; set; } Property Value Type Description IModel | Improve this Doc View Source QueryType The type of the query. Declaration SparqlQueryType QueryType { get; } Property Value Type Description SparqlQueryType Methods | Improve this Doc View Source Bind(String, Object) Bind parameters to specified values. Declaration void Bind(string parameter, object value) Parameters Type Name Description System.String parameter System.Object value | Improve this Doc View Source GetDeclaredPrefixes() Returns all prefixes that were specified by the query. Declaration IEnumerable<string> GetDeclaredPrefixes() Returns Type Description System.Collections.Generic.IEnumerable < System.String > | Improve this Doc View Source GetDefaultModels() Enumerates the graphs which are declared in FROM and FROM NAMED directives at the root level. Declaration IEnumerable<string> GetDefaultModels() Returns Type Description System.Collections.Generic.IEnumerable < System.String > An enumeration of URI strings. | Improve this Doc View Source GetGlobalScopeVariableNames() Declaration string[] GetGlobalScopeVariableNames() Returns Type Description System.String [] | Improve this Doc View Source GetRootGraphPattern() Declaration string GetRootGraphPattern() Returns Type Description System.String | Improve this Doc View Source GetRootOrderByClause() Declaration string GetRootOrderByClause() Returns Type Description System.String | Improve this Doc View Source ProvidesStatements() Declaration bool ProvidesStatements() Returns Type Description System.Boolean | Improve this Doc View Source ToString() Returns the string representation of the query. Declaration string ToString() Returns Type Description System.String"
  },
  "api/Semiodesk.Trinity.Model.html": {
    "href": "api/Semiodesk.Trinity.Model.html",
    "title": "Class Model",
    "keywords": "Class Model A set of resources which represent a logical model for a given application domain. Inheritance System.Object Model Implements IModel Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class Model : IModel Constructors | Improve this Doc View Source Model(IStore, UriRef) This constructor is intended to be used only be the ModelManager. Declaration public Model(IStore store, UriRef uri) Parameters Type Name Description IStore store The underlying triple store implementation to be used. UriRef uri Uniform Resource Identifier of the model. Properties | Improve this Doc View Source IsEmpty Indicates if the model contains statements. Declaration [JsonIgnore] public bool IsEmpty { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Uri The Uniform Resource Identifier which provides a name for the model. Declaration public UriRef Uri { get; set; } Property Value Type Description UriRef Methods | Improve this Doc View Source AddResource(IResource, ITransaction) Adds an existing resource to the model and its backing RDF store. The resulting resource supports the use of the Commit() method. Declaration public virtual IResource AddResource(IResource resource, ITransaction transaction = null) Parameters Type Name Description IResource resource The resource to be added to the model. ITransaction transaction Transaction associated with the action. Returns Type Description IResource The resource which is now connected to the current model. | Improve this Doc View Source AddResource<T>(T, ITransaction) Adds an existing resource to the model and its backing RDF store. The resulting resource supports the use of the Commit() method. Declaration public virtual T AddResource<T>(T resource, ITransaction transaction = null) where T : Resource Parameters Type Name Description T resource The resource to be added to the model. ITransaction transaction Transaction associated with the action. Returns Type Description T The resource which is now connected to the current model. Type Parameters Name Description T | Improve this Doc View Source AsQueryable<T>(Boolean) TODO Declaration public IQueryable<T> AsQueryable<T>(bool inferenceEnabled = false) where T : Resource Parameters Type Name Description System.Boolean inferenceEnabled Returns Type Description System.Linq.IQueryable <T> Type Parameters Name Description T | Improve this Doc View Source BeginTransaction(IsolationLevel) Starts a transaction which can be used to group more queries together to be executed as one. Declaration public ITransaction BeginTransaction(IsolationLevel isolationLevel) Parameters Type Name Description System.Data.IsolationLevel isolationLevel Isolation level used to lock the database. Returns Type Description ITransaction A handle to the transaction. | Improve this Doc View Source Clear() Removes all elements from the model. Declaration public void Clear() | Improve this Doc View Source ContainsResource(IResource, ITransaction) Indicates wheter a given resource is part of the model. Declaration public bool ContainsResource(IResource resource, ITransaction transaction = null) Parameters Type Name Description IResource resource A resource object. ITransaction transaction ransaction associated with this action. Returns Type Description System.Boolean True if the resource is part of the model, False if not. | Improve this Doc View Source ContainsResource(Uri, ITransaction) Indicates wheter a given resource is part of the model. Declaration public bool ContainsResource(Uri uri, ITransaction transaction = null) Parameters Type Name Description System.Uri uri A Uniform Resource Identifier. ITransaction transaction ransaction associated with this action. Returns Type Description System.Boolean True if the resource is part of the model, False if not. | Improve this Doc View Source CreateResource(String, ITransaction) Creates a new resource in the model and its backing RDF store. Provides a resource object of the given type. Declaration public virtual IResource CreateResource(string format = \"urn:uuid:{0}\", ITransaction transaction = null) Parameters Type Name Description System.String format The format of the resulting uri. ITransaction transaction ransaction associated with this action. Returns Type Description IResource An instance of the given object type wrapping the newly created resource. Exceptions Type Condition System.ArgumentException Throws ArgumentException if a resource with the given URI already exists in the model. | Improve this Doc View Source CreateResource(Type, String, ITransaction) Creates a new resource in the model and its backing RDF store. Provides a resource object of the given type. Declaration public virtual object CreateResource(Type t, string format = \"urn:uuid:{0}\", ITransaction transaction = null) Parameters Type Name Description System.Type t Type of the resource object. Must be derived from Resource. System.String format The format of the resulting uri. ITransaction transaction ransaction associated with this action. Returns Type Description System.Object An instance of the given object type wrapping the newly created resource. Exceptions Type Condition System.ArgumentException Throws ArgumentException if a resource with the given URI already exists in the model. | Improve this Doc View Source CreateResource(Uri, ITransaction) Creates a new resource in the model and its backing RDF store. Declaration public virtual IResource CreateResource(Uri uri, ITransaction transaction = null) Parameters Type Name Description System.Uri uri A Uniform Resource Identifier. ITransaction transaction ransaction associated with this action. Returns Type Description IResource The newly created resource. Exceptions Type Condition System.ArgumentException Throws ArgumentException if a resource with the given URI already exists in the model. | Improve this Doc View Source CreateResource(Uri, Type, ITransaction) Creates a new resource in the model and its backing RDF store. Provides a resource object of the given type. This method can be used to create a resource of a type which was asserted at runtime. Declaration public virtual object CreateResource(Uri uri, Type t, ITransaction transaction = null) Parameters Type Name Description System.Uri uri A Uniform Resource Identifier. System.Type t Type of the resource object. Must be derived from Resource. ITransaction transaction ransaction associated with this action. Returns Type Description System.Object An instance of the given object type wrapping the newly created resource. Exceptions Type Condition System.Exception Throws ArgumentException if a resource with the given URI already exists in the model. | Improve this Doc View Source CreateResource<T>(String, ITransaction) Creates a new resource in the model and its backing RDF store. Provides a resource object of the given type. Declaration public virtual T CreateResource<T>(string format = \"urn:uuid:{0}\", ITransaction transaction = null) where T : Resource Parameters Type Name Description System.String format The format of the resulting uri. ITransaction transaction ransaction associated with this action. Returns Type Description T An instance of the given object type wrapping the newly created resource. Type Parameters Name Description T Type of the resource object. Must be derived from Resource. Exceptions Type Condition System.ArgumentException Throws ArgumentException if a resource with the given URI already exists in the model. | Improve this Doc View Source CreateResource<T>(Uri, ITransaction) Creates a new resource in the model and its backing RDF store. Provides a resource object of the given type. Declaration public virtual T CreateResource<T>(Uri uri, ITransaction transaction = null) where T : Resource Parameters Type Name Description System.Uri uri A Uniform Resource Identifier. ITransaction transaction ransaction associated with this action. Returns Type Description T An instance of the given object type wrapping the newly created resource. Type Parameters Name Description T Type of the resource object. Must be derived from Resource. Exceptions Type Condition System.ArgumentException Throws ArgumentException if a resource with the given URI already exists in the model. | Improve this Doc View Source DeleteResource(IResource, ITransaction) Removes the given resource from the model and its backing RDF store. Note that there is no verification that the given resource and its stored represenation have identical properties. Declaration public virtual void DeleteResource(IResource resource, ITransaction transaction = null) Parameters Type Name Description IResource resource A resource object. ITransaction transaction ransaction associated with this action. | Improve this Doc View Source DeleteResource(Uri, ITransaction) Removes the given resource from the model and its backing RDF store. Note that there is no verification that the given resource and its stored represenation have identical properties. Declaration public virtual void DeleteResource(Uri uri, ITransaction transaction = null) Parameters Type Name Description System.Uri uri A Uniform Resource Identifier. ITransaction transaction ransaction associated with this action. | Improve this Doc View Source ExecuteQuery(ISparqlQuery, Boolean, ITransaction) Execute a SPARQL Query. Declaration public ISparqlQueryResult ExecuteQuery(ISparqlQuery query, bool inferenceEnabled = false, ITransaction transaction = null) Parameters Type Name Description ISparqlQuery query A SparqlQuery object. System.Boolean inferenceEnabled Indicate that this query should work with enabled inferencing. ITransaction transaction ransaction associated with this action. Returns Type Description ISparqlQueryResult A SparqlQueryResults object in any case. | Improve this Doc View Source ExecuteQuery(ResourceQuery, Boolean, ITransaction) Execute a resource query. Declaration public IResourceQueryResult ExecuteQuery(ResourceQuery query, bool inferenceEnabled = false, ITransaction transaction = null) Parameters Type Name Description ResourceQuery query A ResourceQuery object containing the query that should be executed. System.Boolean inferenceEnabled Indicate that this query should work with enabled inferencing. ITransaction transaction ransaction associated with this action. Returns Type Description IResourceQueryResult | Improve this Doc View Source ExecuteUpdate(SparqlUpdate, ITransaction) Execute a SPARQL Update. Declaration public void ExecuteUpdate(SparqlUpdate update, ITransaction transaction = null) Parameters Type Name Description SparqlUpdate update A SparqlUpdate object. ITransaction transaction ransaction associated with this action. | Improve this Doc View Source GetBindings(ISparqlQuery, Boolean, ITransaction) Executes a SPARQL-select query and provides a list of binding sets. This method implements transparent type marshalling and delivers the bound variables in C# native data types. Declaration public IEnumerable<BindingSet> GetBindings(ISparqlQuery query, bool inferenceEnabled = false, ITransaction transaction = null) Parameters Type Name Description ISparqlQuery query A SPARQL-select query which results in a set of bound variables. System.Boolean inferenceEnabled Indicate that this query should work with enabled inferencing. ITransaction transaction ransaction associated with this action. Returns Type Description System.Collections.Generic.IEnumerable < BindingSet > An enumeration of bound variables that match the given query. | Improve this Doc View Source GetResource(IResource, ITransaction) Retrieves a resource from the model. Declaration public IResource GetResource(IResource resource, ITransaction transaction = null) Parameters Type Name Description IResource resource The instance of IResource to be retrieved. ITransaction transaction Transaction associated with this action. Returns Type Description IResource A resource with all asserted properties. | Improve this Doc View Source GetResource(Uri, ITransaction) Retrieves a resource from the model. Declaration public IResource GetResource(Uri uri, ITransaction transaction = null) Parameters Type Name Description System.Uri uri A Uniform Resource Identifier. ITransaction transaction ransaction associated with this action. Returns Type Description IResource A resource with all asserted properties. | Improve this Doc View Source GetResource(Uri, Type, ITransaction) Retrieves a resource from the model. Provides a resource object of the given type. This method can be used for runtime asserted types. Declaration public object GetResource(Uri uri, Type type, ITransaction transaction = null) Parameters Type Name Description System.Uri uri A Uniform Resource Identifier. System.Type type Type of the resource object. Must be derived from Resource. ITransaction transaction ransaction associated with this action. Returns Type Description System.Object An instance of the given resource object type, Null otherwise. | Improve this Doc View Source GetResource<T>(IResource, ITransaction) Retrieves a resource from the model. Provides a resource object of the given type. Declaration public T GetResource<T>(IResource resource, ITransaction transaction = null) where T : Resource Parameters Type Name Description IResource resource The resource that should be retrieved. ITransaction transaction ransaction associated with this action. Returns Type Description T A resource with all asserted properties. Type Parameters Name Description T | Improve this Doc View Source GetResource<T>(Uri, ITransaction) Retrieves a resource from the model. Provides a resource object of the given type. Declaration public T GetResource<T>(Uri uri, ITransaction transaction = null) where T : Resource Parameters Type Name Description System.Uri uri A Uniform Resource Identifier. ITransaction transaction ransaction associated with this action. Returns Type Description T A resource with all asserted properties. Type Parameters Name Description T | Improve this Doc View Source GetResources(ISparqlQuery, Boolean, ITransaction) Executes a SPARQL query and provides an enumeration of matching resources. Declaration public IEnumerable<Resource> GetResources(ISparqlQuery query, bool inferenceEnabled = false, ITransaction transaction = null) Parameters Type Name Description ISparqlQuery query The SparqlQuery object that should be executed. System.Boolean inferenceEnabled Indicate that this query should work with enabled inferencing. ITransaction transaction transaction associated with this action. Returns Type Description System.Collections.Generic.IEnumerable < Resource > An enumeration of resources that match the given query. | Improve this Doc View Source GetResources(ResourceQuery, Boolean, ITransaction) Executes a resource query and provides an enumeration of matching resources. Declaration public IEnumerable<Resource> GetResources(ResourceQuery query, bool inferenceEnabled = false, ITransaction transaction = null) Parameters Type Name Description ResourceQuery query A ResourceQuery object containing the query that should be executed. System.Boolean inferenceEnabled Indicate that this query should work with enabled inferencing. ITransaction transaction transaction associated with this action. Returns Type Description System.Collections.Generic.IEnumerable < Resource > An enumeration of resources that match the given query. | Improve this Doc View Source GetResources<T>(ISparqlQuery, Boolean, ITransaction) Executes a SPARQL query and provides an enumeration of matching resources. Provides a resource object of the given type. Declaration public IEnumerable<T> GetResources<T>(ISparqlQuery query, bool inferenceEnabled = false, ITransaction transaction = null) where T : Resource Parameters Type Name Description ISparqlQuery query The SparqlQuery object that should be executed. System.Boolean inferenceEnabled Indicate that this query should work with enabled inferencing. ITransaction transaction transaction associated with this action. Returns Type Description System.Collections.Generic.IEnumerable <T> An enumeration of resources that match the given query. Type Parameters Name Description T | Improve this Doc View Source GetResources<T>(ResourceQuery, Boolean, ITransaction) Executes a Resource query and provides an enumeration of matching resources. Provides a resource object of the given type. Declaration public IEnumerable<T> GetResources<T>(ResourceQuery query, bool inferenceEnabled = false, ITransaction transaction = null) where T : Resource Parameters Type Name Description ResourceQuery query A ResourceQuery object containing the query that should be executed. System.Boolean inferenceEnabled Indicate that this query should work with enabled inferencing. ITransaction transaction transaction associated with this action. Returns Type Description System.Collections.Generic.IEnumerable <T> An enumeration of resources that match the given query. Type Parameters Name Description T | Improve this Doc View Source GetResources<T>(Boolean, ITransaction) Returns a enumeration of all resources that match the given type. Declaration public IEnumerable<T> GetResources<T>(bool inferenceEnabled = false, ITransaction transaction = null) where T : Resource Parameters Type Name Description System.Boolean inferenceEnabled Indicate that this query should work with enabled inferencing. ITransaction transaction transaction associated with this action. Returns Type Description System.Collections.Generic.IEnumerable <T> An enumeration of resources that match the given query. Type Parameters Name Description T | Improve this Doc View Source Read(Stream, RdfSerializationFormat, Boolean) Declaration public bool Read(Stream stream, RdfSerializationFormat format, bool update) Parameters Type Name Description System.IO.Stream stream RdfSerializationFormat format System.Boolean update Returns Type Description System.Boolean | Improve this Doc View Source Read(Uri, RdfSerializationFormat, Boolean) Imports the contents of a model located by the given URL. The method supports importing files and other models stored in the local RDF store. The location of the model is determined by the URI scheme. Declaration public bool Read(Uri url, RdfSerializationFormat format, bool update) Parameters Type Name Description System.Uri url A uniform resource locator. RdfSerializationFormat format Serialization format RdfSerializationFormat System.Boolean update Pass false if you want to overwrite existing data. True if you want to keep the data and add the new entries. Returns Type Description System.Boolean True if the contents of the model were imported, False if not. | Improve this Doc View Source UpdateResource(Resource, ITransaction) Updates the properties of a resource in the backing RDF store. Declaration public virtual void UpdateResource(Resource resource, ITransaction transaction = null) Parameters Type Name Description Resource resource Resource that is to be updated in the backing store. ITransaction transaction ransaction associated with this action. | Improve this Doc View Source Write(Stream, RdfSerializationFormat) Exports the contents of the model and provides a memory stream. Declaration public void Write(Stream fs, RdfSerializationFormat format) Parameters Type Name Description System.IO.Stream fs File stream to write to. RdfSerializationFormat format The serialization format. RdfSerializationFormat Implements IModel"
  },
  "api/Semiodesk.Trinity.NotifyPropertyChangedAttribute.html": {
    "href": "api/Semiodesk.Trinity.NotifyPropertyChangedAttribute.html",
    "title": "Class NotifyPropertyChangedAttribute",
    "keywords": "Class NotifyPropertyChangedAttribute Marks the property as NotifyingProperty. Inheritance System.Object System.Attribute NotifyPropertyChangedAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax [AttributeUsage(AttributeTargets.Property)] public class NotifyPropertyChangedAttribute : Attribute"
  },
  "api/Semiodesk.Trinity.Exceptions.InvalidQueryException.html": {
    "href": "api/Semiodesk.Trinity.Exceptions.InvalidQueryException.html",
    "title": "Class InvalidQueryException",
    "keywords": "Class InvalidQueryException This exception will be thrown if the store rejects the query as invalid. Inheritance System.Object System.Exception System.SystemException System.ArgumentException InvalidQueryException Implements System.Runtime.Serialization.ISerializable Inherited Members System.ArgumentException.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.ArgumentException.Message System.ArgumentException.ParamName System.Exception.GetBaseException() System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Semiodesk.Trinity.Exceptions Assembly : Semiodesk.Trinity.dll Syntax public class InvalidQueryException : ArgumentException, ISerializable Constructors | Improve this Doc View Source InvalidQueryException() Create a new exception without information. Declaration public InvalidQueryException() | Improve this Doc View Source InvalidQueryException(String) Create a new exception with an error string. Declaration public InvalidQueryException(string message) Parameters Type Name Description System.String message Details about the issue. | Improve this Doc View Source InvalidQueryException(String, Exception, String) Create a new exception with an error string and an inner exception. Declaration public InvalidQueryException(string message, Exception innerException, string query) Parameters Type Name Description System.String message Details about the issue. System.Exception innerException The exception that propmted the query failure. System.String query The offending query Properties | Improve this Doc View Source Query Contains the offending query Declaration public string Query { get; } Property Value Type Description System.String Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Semiodesk.Trinity.ITransaction.html": {
    "href": "api/Semiodesk.Trinity.ITransaction.html",
    "title": "Interface ITransaction",
    "keywords": "Interface ITransaction Inherited Members System.IDisposable.Dispose() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public interface ITransaction : IDisposable Properties | Improve this Doc View Source IsolationLevel The isolation level of the transaction. Declaration IsolationLevel IsolationLevel { get; } Property Value Type Description System.Data.IsolationLevel Methods | Improve this Doc View Source Commit() Commit the transaction. Declaration void Commit() | Improve this Doc View Source Rollback() Rolls the transaction back. Declaration void Rollback() Events | Improve this Doc View Source OnFinishedTransaction Will be raised if transaction finishes. Declaration event FinishedTransactionEvent OnFinishedTransaction Event Type Type Description FinishedTransactionEvent"
  },
  "api/Semiodesk.Trinity.MappingDiscovery.MappingClass.html": {
    "href": "api/Semiodesk.Trinity.MappingDiscovery.MappingClass.html",
    "title": "Class MappingDiscovery.MappingClass",
    "keywords": "Class MappingDiscovery.MappingClass A class containing information about a RDF class mapped to c#. Inheritance System.Object MappingDiscovery.MappingClass Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class MappingClass Constructors | Improve this Doc View Source MappingClass(Type, IEnumerable<Class>, IEnumerable<Class>) Constructor to create a new MappingClass Declaration public MappingClass(Type mappingClassType, IEnumerable<Class> rdfClasses, IEnumerable<Class> rdfBaseClasses) Parameters Type Name Description System.Type mappingClassType The c# type System.Collections.Generic.IEnumerable < Class > rdfClasses The mapped rdf classes. System.Collections.Generic.IEnumerable < Class > rdfBaseClasses The rdf base classes. Fields | Improve this Doc View Source BaseClassCount Declaration public readonly uint BaseClassCount Field Value Type Description System.UInt32 | Improve this Doc View Source MappingClassType The c# type of the class. Declaration public readonly Type MappingClassType Field Value Type Description System.Type | Improve this Doc View Source RdfBaseClasses A list of inferenced RDF classes mapped to this class. Currently not used. Declaration public readonly Class[] RdfBaseClasses Field Value Type Description Class [] | Improve this Doc View Source RdfClasses The RDF classes that are mapped to this class Declaration public readonly Class[] RdfClasses Field Value Type Description Class []"
  },
  "api/Semiodesk.Trinity.ModelChangeType.html": {
    "href": "api/Semiodesk.Trinity.ModelChangeType.html",
    "title": "Enum ModelChangeType",
    "keywords": "Enum ModelChangeType Lists all possible changes to a RDF model. Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public enum ModelChangeType Fields Name Description Created Deleted Updated"
  },
  "api/Semiodesk.Trinity.Query.ConstantExpressionExtensions.html": {
    "href": "api/Semiodesk.Trinity.Query.ConstantExpressionExtensions.html",
    "title": "Class ConstantExpressionExtensions",
    "keywords": "Class ConstantExpressionExtensions Inheritance System.Object ConstantExpressionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity.Query Assembly : Semiodesk.Trinity.dll Syntax public static class ConstantExpressionExtensions Methods | Improve this Doc View Source AsIriExpression(ConstantExpression) Declaration public static IriExpression AsIriExpression(this ConstantExpression constant) Parameters Type Name Description System.Linq.Expressions.ConstantExpression constant Returns Type Description VDS.RDF.Query.Builder.Expressions.IriExpression | Improve this Doc View Source AsLiteralExpression(ConstantExpression) Declaration public static LiteralExpression AsLiteralExpression(this ConstantExpression constant) Parameters Type Name Description System.Linq.Expressions.ConstantExpression constant Returns Type Description VDS.RDF.Query.Builder.Expressions.LiteralExpression | Improve this Doc View Source AsNode(ConstantExpression) Declaration public static INode AsNode(this ConstantExpression constant) Parameters Type Name Description System.Linq.Expressions.ConstantExpression constant Returns Type Description VDS.RDF.INode | Improve this Doc View Source AsNumericExpression(ConstantExpression) Declaration public static NumericExpression AsNumericExpression(this ConstantExpression constant) Parameters Type Name Description System.Linq.Expressions.ConstantExpression constant Returns Type Description VDS.RDF.Query.Builder.Expressions.NumericExpression | Improve this Doc View Source AsSparqlExpression(ConstantExpression) Declaration public static ISparqlExpression AsSparqlExpression(this ConstantExpression constant) Parameters Type Name Description System.Linq.Expressions.ConstantExpression constant Returns Type Description VDS.RDF.Query.Expressions.ISparqlExpression | Improve this Doc View Source IsNullOrFalse(ConstantExpression) Declaration public static bool IsNullOrFalse(this ConstantExpression constant) Parameters Type Name Description System.Linq.Expressions.ConstantExpression constant Returns Type Description System.Boolean"
  },
  "api/Semiodesk.Trinity.RdfClassAttribute.html": {
    "href": "api/Semiodesk.Trinity.RdfClassAttribute.html",
    "title": "Class RdfClassAttribute",
    "keywords": "Class RdfClassAttribute Decorate a class with this attribute to mark it as mapping for an RDF class of the given type. Inheritance System.Object System.Attribute RdfClassAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public class RdfClassAttribute : Attribute Constructors | Improve this Doc View Source RdfClassAttribute(String) Constructor Declaration public RdfClassAttribute(string uriString) Parameters Type Name Description System.String uriString The uri of the RDF class for this mapping. Fields | Improve this Doc View Source MappedUri The Uri of the type. Declaration public readonly Uri MappedUri Field Value Type Description System.Uri"
  },
  "api/Semiodesk.Trinity.ResourceLockedException.html": {
    "href": "api/Semiodesk.Trinity.ResourceLockedException.html",
    "title": "Class ResourceLockedException",
    "keywords": "Class ResourceLockedException Inheritance System.Object System.Exception ResourceLockedException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class ResourceLockedException : Exception, ISerializable Constructors | Improve this Doc View Source ResourceLockedException(Exception) Declaration public ResourceLockedException(Exception inner) Parameters Type Name Description System.Exception inner Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Semiodesk.Trinity.Serialization.JsonResourceSerializerSettings.html": {
    "href": "api/Semiodesk.Trinity.Serialization.JsonResourceSerializerSettings.html",
    "title": "Class JsonResourceSerializerSettings",
    "keywords": "Class JsonResourceSerializerSettings Inheritance System.Object Newtonsoft.Json.JsonSerializerSettings JsonResourceSerializerSettings Inherited Members Newtonsoft.Json.JsonSerializerSettings.ReferenceLoopHandling Newtonsoft.Json.JsonSerializerSettings.MissingMemberHandling Newtonsoft.Json.JsonSerializerSettings.ObjectCreationHandling Newtonsoft.Json.JsonSerializerSettings.NullValueHandling Newtonsoft.Json.JsonSerializerSettings.DefaultValueHandling Newtonsoft.Json.JsonSerializerSettings.Converters Newtonsoft.Json.JsonSerializerSettings.PreserveReferencesHandling Newtonsoft.Json.JsonSerializerSettings.TypeNameHandling Newtonsoft.Json.JsonSerializerSettings.MetadataPropertyHandling Newtonsoft.Json.JsonSerializerSettings.TypeNameAssemblyFormat Newtonsoft.Json.JsonSerializerSettings.TypeNameAssemblyFormatHandling Newtonsoft.Json.JsonSerializerSettings.ConstructorHandling Newtonsoft.Json.JsonSerializerSettings.ContractResolver Newtonsoft.Json.JsonSerializerSettings.EqualityComparer Newtonsoft.Json.JsonSerializerSettings.ReferenceResolver Newtonsoft.Json.JsonSerializerSettings.ReferenceResolverProvider Newtonsoft.Json.JsonSerializerSettings.TraceWriter Newtonsoft.Json.JsonSerializerSettings.Binder Newtonsoft.Json.JsonSerializerSettings.SerializationBinder Newtonsoft.Json.JsonSerializerSettings.Error Newtonsoft.Json.JsonSerializerSettings.Context Newtonsoft.Json.JsonSerializerSettings.DateFormatString Newtonsoft.Json.JsonSerializerSettings.MaxDepth Newtonsoft.Json.JsonSerializerSettings.Formatting Newtonsoft.Json.JsonSerializerSettings.DateFormatHandling Newtonsoft.Json.JsonSerializerSettings.DateTimeZoneHandling Newtonsoft.Json.JsonSerializerSettings.DateParseHandling Newtonsoft.Json.JsonSerializerSettings.FloatFormatHandling Newtonsoft.Json.JsonSerializerSettings.FloatParseHandling Newtonsoft.Json.JsonSerializerSettings.StringEscapeHandling Newtonsoft.Json.JsonSerializerSettings.Culture Newtonsoft.Json.JsonSerializerSettings.CheckAdditionalContent System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity.Serialization Assembly : Semiodesk.Trinity.dll Syntax public class JsonResourceSerializerSettings : JsonSerializerSettings Constructors | Improve this Doc View Source JsonResourceSerializerSettings(IStore) Declaration public JsonResourceSerializerSettings(IStore store) Parameters Type Name Description IStore store"
  },
  "api/Semiodesk.Trinity.RdfPropertyAttribute.html": {
    "href": "api/Semiodesk.Trinity.RdfPropertyAttribute.html",
    "title": "Class RdfPropertyAttribute",
    "keywords": "Class RdfPropertyAttribute Decorate a property with this attribute to mark it as mapped RDF property with the given type. Inheritance System.Object System.Attribute RdfPropertyAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax [AttributeUsage(AttributeTargets.Property)] public class RdfPropertyAttribute : Attribute Constructors | Improve this Doc View Source RdfPropertyAttribute(String, Boolean) Constructor Declaration public RdfPropertyAttribute(string uriString, bool languageInvariant = false) Parameters Type Name Description System.String uriString There uri of the rdf property for this mapping. System.Boolean languageInvariant The mapping ignores the language setting and is always non-localized. Only valid if type or generic type is string or string collection. Fields | Improve this Doc View Source LanguageInvariant Flag determining if property is language invariant. Only valid for string or string collections. Declaration public bool LanguageInvariant Field Value Type Description System.Boolean | Improve this Doc View Source MappedUri Uri of the the RDF property Declaration public readonly Uri MappedUri Field Value Type Description System.Uri"
  },
  "api/Semiodesk.Trinity.ResourceQuery.rdf.html": {
    "href": "api/Semiodesk.Trinity.ResourceQuery.rdf.html",
    "title": "Class ResourceQuery.rdf",
    "keywords": "Class ResourceQuery.rdf The RDF Vocabulary (RDF) Inheritance System.Object ResourceQuery.rdf Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax protected static class rdf Fields | Improve this Doc View Source type The subject is an instance of a class. Declaration public static readonly Property type Field Value Type Description Property"
  },
  "api/Semiodesk.Trinity.SparqlQueryItemsProvider-1.html": {
    "href": "api/Semiodesk.Trinity.SparqlQueryItemsProvider-1.html",
    "title": "Class SparqlQueryItemsProvider<T>",
    "keywords": "Class SparqlQueryItemsProvider<T> The item provider for sparql queries. Inheritance System.Object SparqlQueryItemsProvider<T> Implements IItemsProvider <T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class SparqlQueryItemsProvider<T> : IItemsProvider<T> where T : Resource Type Parameters Name Description T Constructors | Improve this Doc View Source SparqlQueryItemsProvider(IModel, SparqlQuery, Boolean) Constructor for the SparqlQueryItemsProvider. Declaration public SparqlQueryItemsProvider(IModel model, SparqlQuery query, bool inferenceEnabled = true) Parameters Type Name Description IModel model The model on which the query should be executed. SparqlQuery query The query that should be executed. System.Boolean inferenceEnabled Modifier if inferncing should be enabled. Default is true Methods | Improve this Doc View Source Count() Number of elements in the result. Declaration public int Count() Returns Type Description System.Int32 | Improve this Doc View Source GetItems(Int32, Int32) Enumerator of the items. Should be narrowed with offset and limit. Declaration public IEnumerable<T> GetItems(int offset, int limit) Parameters Type Name Description System.Int32 offset Offset of the element where to start. System.Int32 limit Number of elements. Returns Type Description System.Collections.Generic.IEnumerable <T> Implements IItemsProvider<T>"
  },
  "api/Semiodesk.Trinity.SparqlQueryPreprocessor.html": {
    "href": "api/Semiodesk.Trinity.SparqlQueryPreprocessor.html",
    "title": "Class SparqlQueryPreprocessor",
    "keywords": "Class SparqlQueryPreprocessor Inheritance System.Object VDS.RDF.Parsing.Tokens.BaseTokeniser VDS.RDF.Parsing.Tokens.SparqlTokeniser SparqlPreprocessor SparqlQueryPreprocessor Implements VDS.RDF.Parsing.Tokens.ITokeniser Inherited Members SparqlPreprocessor.Tokens SparqlPreprocessor.PreviousTokenType SparqlPreprocessor.DefaultGraphs SparqlPreprocessor.DeclaredPrefixes SparqlPreprocessor.UsedPrefixes SparqlPreprocessor.Parameters SparqlPreprocessor.ParameterValues SparqlPreprocessor.ParameterTypes SparqlPreprocessor.Process(Boolean) SparqlPreprocessor.AddDefaultGraph(Uri) SparqlPreprocessor.AddNamedGraph(Uri) SparqlPreprocessor.GetPrefixDeclarations() SparqlPreprocessor.Bind(String, Object) SparqlPreprocessor.Serialize(Int32) SparqlPreprocessor.ToString() VDS.RDF.Parsing.Tokens.BaseTokeniser.StartNewToken() VDS.RDF.Parsing.Tokens.BaseTokeniser.Peek() VDS.RDF.Parsing.Tokens.BaseTokeniser.Backtrack() VDS.RDF.Parsing.Tokens.BaseTokeniser.ConsumeCharacter() VDS.RDF.Parsing.Tokens.BaseTokeniser.ConsumeCharacter(System.Boolean) VDS.RDF.Parsing.Tokens.BaseTokeniser.ConsumeNewLine(System.Boolean) VDS.RDF.Parsing.Tokens.BaseTokeniser.ConsumeNewLine(System.Boolean, System.Boolean) VDS.RDF.Parsing.Tokens.BaseTokeniser.SkipCharacter() VDS.RDF.Parsing.Tokens.BaseTokeniser.DiscardWhiteSpace() VDS.RDF.Parsing.Tokens.BaseTokeniser.HandleEscapes(VDS.RDF.Parsing.Tokens.TokeniserEscapeMode) VDS.RDF.Parsing.Tokens.BaseTokeniser.HandleComplexLocalNameEscapes() VDS.RDF.Parsing.Tokens.BaseTokeniser.IsHexDigit(System.Char) VDS.RDF.Parsing.Tokens.BaseTokeniser.Error(System.String) VDS.RDF.Parsing.Tokens.BaseTokeniser.UnexpectedCharacter(System.Char, System.String) VDS.RDF.Parsing.Tokens.BaseTokeniser.UnexpectedEndOfInput(System.String) VDS.RDF.Parsing.Tokens.BaseTokeniser.UnexpectedNewLine(System.String) VDS.RDF.Parsing.Tokens.BaseTokeniser.UnexpectedToken(System.String, VDS.RDF.Parsing.Tokens.IToken) VDS.RDF.Parsing.Tokens.BaseTokeniser.Format VDS.RDF.Parsing.Tokens.BaseTokeniser.Value VDS.RDF.Parsing.Tokens.BaseTokeniser.Length VDS.RDF.Parsing.Tokens.BaseTokeniser.CurrentLine VDS.RDF.Parsing.Tokens.BaseTokeniser.CurrentPosition VDS.RDF.Parsing.Tokens.BaseTokeniser.StartLine VDS.RDF.Parsing.Tokens.BaseTokeniser.StartPosition VDS.RDF.Parsing.Tokens.BaseTokeniser.EndLine VDS.RDF.Parsing.Tokens.BaseTokeniser.EndPosition VDS.RDF.Parsing.Tokens.BaseTokeniser.LastTokenType VDS.RDF.Parsing.Tokens.BaseTokeniser.HasBacktracked System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class SparqlQueryPreprocessor : SparqlPreprocessor, ITokeniser Constructors | Improve this Doc View Source SparqlQueryPreprocessor(TextReader, SparqlQuerySyntax) Declaration public SparqlQueryPreprocessor(TextReader input, SparqlQuerySyntax syntax) Parameters Type Name Description System.IO.TextReader input VDS.RDF.Parsing.SparqlQuerySyntax syntax Fields | Improve this Doc View Source GlobalScopeVariables Declaration public readonly List<string> GlobalScopeVariables Field Value Type Description System.Collections.Generic.List < System.String > | Improve this Doc View Source InScopeVariables Declaration public readonly List<string> InScopeVariables Field Value Type Description System.Collections.Generic.List < System.String > Properties | Improve this Doc View Source IsOrdered Declaration public bool IsOrdered { get; protected set; } Property Value Type Description System.Boolean | Improve this Doc View Source QueryProvidesStatements Declaration public bool QueryProvidesStatements { get; protected set; } Property Value Type Description System.Boolean | Improve this Doc View Source QueryType The SPARQL query form, i.e. ASK, DESCRIBE, SELECT, CONSTRUCT. Declaration public SparqlQueryType QueryType { get; protected set; } Property Value Type Description SparqlQueryType Methods | Improve this Doc View Source GetNextToken() Declaration public override IToken GetNextToken() Returns Type Description VDS.RDF.Parsing.Tokens.IToken Overrides SparqlPreprocessor.GetNextToken() | Improve this Doc View Source GetOrderByClause() Declaration public string GetOrderByClause() Returns Type Description System.String | Improve this Doc View Source GetRootGraphPattern() Declaration public string GetRootGraphPattern() Returns Type Description System.String | Improve this Doc View Source SetLimit(Int32) Adds a LIMIT clause to the query in order to restrict it to put an upper bound on the number of solutions returned. Declaration public void SetLimit(int limit) Parameters Type Name Description System.Int32 limit The number of return values. | Improve this Doc View Source SetOffset(Int32) Adds an OFFSET clause to the query which causes the solutions generated to start after the specified number of solutions. Declaration public void SetOffset(int offset) Parameters Type Name Description System.Int32 offset The number of return values. Implements VDS.RDF.Parsing.Tokens.ITokeniser"
  },
  "api/Semiodesk.Trinity.Store.Stardog.StardogStore.html": {
    "href": "api/Semiodesk.Trinity.Store.Stardog.StardogStore.html",
    "title": "Class StardogStore",
    "keywords": "Class StardogStore Inheritance System.Object StoreBase StardogStore Implements IStore System.IDisposable Inherited Members StoreBase.Log StoreBase.RemoveModel(IModel) StoreBase.ContainsModel(IModel) StoreBase.LoadOntologySettings(String, String) StoreBase.InitializeFromConfiguration(String, String) StoreBase.LoadConfiguration(String) StoreBase.LoadOntologies(IConfiguration, String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity.Store.Stardog Assembly : Semiodesk.Trinity.dll Syntax public class StardogStore : StoreBase, IStore, IDisposable Constructors | Improve this Doc View Source StardogStore(String, String, String, String) Declaration public StardogStore(string host, string username, string password, string storeId) Parameters Type Name Description System.String host System.String username System.String password System.String storeId Properties | Improve this Doc View Source IsReady Declaration public bool IsReady { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source BeginTransaction(IsolationLevel) Declaration public override ITransaction BeginTransaction(IsolationLevel isolationLevel) Parameters Type Name Description System.Data.IsolationLevel isolationLevel Returns Type Description ITransaction Overrides StoreBase.BeginTransaction(IsolationLevel) | Improve this Doc View Source ContainsModel(Uri) Declaration [Obsolete] public override bool ContainsModel(Uri uri) Parameters Type Name Description System.Uri uri Returns Type Description System.Boolean Overrides StoreBase.ContainsModel(Uri) | Improve this Doc View Source CreateModel(Uri) Declaration [Obsolete] public override IModel CreateModel(Uri uri) Parameters Type Name Description System.Uri uri Returns Type Description IModel Overrides StoreBase.CreateModel(Uri) | Improve this Doc View Source CreateModelGroup(IModel[]) Declaration public IModelGroup CreateModelGroup(params IModel[] models) Parameters Type Name Description IModel [] models Returns Type Description IModelGroup | Improve this Doc View Source CreateModelGroup(Uri[]) Declaration public IModelGroup CreateModelGroup(params Uri[] models) Parameters Type Name Description System.Uri [] models Returns Type Description IModelGroup | Improve this Doc View Source Dispose() Declaration public override void Dispose() Overrides StoreBase.Dispose() | Improve this Doc View Source ExecuteNonQuery(SparqlUpdate, ITransaction) Declaration public override void ExecuteNonQuery(SparqlUpdate query, ITransaction transaction = null) Parameters Type Name Description SparqlUpdate query ITransaction transaction Overrides StoreBase.ExecuteNonQuery(SparqlUpdate, ITransaction) | Improve this Doc View Source ExecuteQuery(ISparqlQuery, ITransaction) Declaration public override ISparqlQueryResult ExecuteQuery(ISparqlQuery query, ITransaction transaction = null) Parameters Type Name Description ISparqlQuery query ITransaction transaction Returns Type Description ISparqlQueryResult Overrides StoreBase.ExecuteQuery(ISparqlQuery, ITransaction) | Improve this Doc View Source ExecuteQuery(String, ITransaction) Declaration public StardogResultHandler ExecuteQuery(string query, ITransaction transaction = null) Parameters Type Name Description System.String query ITransaction transaction Returns Type Description StardogResultHandler | Improve this Doc View Source GetModel(Uri) Declaration public override IModel GetModel(Uri uri) Parameters Type Name Description System.Uri uri Returns Type Description IModel Overrides StoreBase.GetModel(Uri) | Improve this Doc View Source ListModels() Declaration public override IEnumerable<IModel> ListModels() Returns Type Description System.Collections.Generic.IEnumerable < IModel > Overrides StoreBase.ListModels() | Improve this Doc View Source Read(Stream, Uri, RdfSerializationFormat, Boolean) Declaration public override Uri Read(Stream stream, Uri graphUri, RdfSerializationFormat format, bool update) Parameters Type Name Description System.IO.Stream stream System.Uri graphUri RdfSerializationFormat format System.Boolean update Returns Type Description System.Uri Overrides StoreBase.Read(Stream, Uri, RdfSerializationFormat, Boolean) | Improve this Doc View Source Read(Uri, Uri, RdfSerializationFormat, Boolean) Declaration public override Uri Read(Uri graphUri, Uri url, RdfSerializationFormat format, bool update) Parameters Type Name Description System.Uri graphUri System.Uri url RdfSerializationFormat format System.Boolean update Returns Type Description System.Uri Overrides StoreBase.Read(Uri, Uri, RdfSerializationFormat, Boolean) | Improve this Doc View Source RemoveModel(Uri) Declaration public override void RemoveModel(Uri uri) Parameters Type Name Description System.Uri uri Overrides StoreBase.RemoveModel(Uri) | Improve this Doc View Source Write(Stream, Uri, RdfSerializationFormat) Writes a serialized graph to the given stream. See allowed RdfSerializationFormat . Declaration public override void Write(Stream stream, Uri graphUri, RdfSerializationFormat format) Parameters Type Name Description System.IO.Stream stream Stream to which the content should be written. System.Uri graphUri Uri fo the graph in this store RdfSerializationFormat format Allowed formats Overrides StoreBase.Write(Stream, Uri, RdfSerializationFormat) Implements IStore System.IDisposable"
  },
  "api/Semiodesk.Trinity.Store.Stardog.html": {
    "href": "api/Semiodesk.Trinity.Store.Stardog.html",
    "title": "Namespace Semiodesk.Trinity.Store.Stardog",
    "keywords": "Namespace Semiodesk.Trinity.Store.Stardog Classes StardogResultHandler StardogStore"
  },
  "api/Semiodesk.Trinity.Store.Virtuoso.html": {
    "href": "api/Semiodesk.Trinity.Store.Virtuoso.html",
    "title": "Namespace Semiodesk.Trinity.Store.Virtuoso",
    "keywords": "Namespace Semiodesk.Trinity.Store.Virtuoso Classes Graph Ruleset Rulesets VirtuosoStoreProvider VirtuosoTransaction Virtuoso transactions support For more information refer to : http://docs.openlinksw.com/virtuoso/coredbengine.html#Locking http://docs.openlinksw.com/virtuoso/ptune.html#TRANSACTION_ISOLATION_LEVELS Auto row commit = DEFINE sql:log-enable 2"
  },
  "api/Semiodesk.Trinity.Store.html": {
    "href": "api/Semiodesk.Trinity.Store.html",
    "title": "Namespace Semiodesk.Trinity.Store",
    "keywords": "Namespace Semiodesk.Trinity.Store Classes dotNetRDFStore dotNetRDFStoreProvider SparqlEndpointStoreProvider StardogStoreProvider This class allows the usage of the Stardog store. An IStore handle can be created by calling StoreFactory.CreateStore(\"provider=stardog;host=http://localhost:5820;uid=admin;pw=admin;sid=MyStore\"); Interfaces ITripleProvider A generic triple provider interface"
  },
  "api/Semiodesk.Trinity.VirtualizingResourceCollection-1.html": {
    "href": "api/Semiodesk.Trinity.VirtualizingResourceCollection-1.html",
    "title": "Class VirtualizingResourceCollection<T>",
    "keywords": "Class VirtualizingResourceCollection<T> A virtualizing collection of a resource query. Inheritance System.Object VirtualizingCollection <T> VirtualizingResourceCollection<T> Implements System.Collections.Generic.IList <T> System.Collections.Generic.ICollection <T> System.Collections.Generic.IEnumerable <T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable Inherited Members VirtualizingCollection<T>._pageSize VirtualizingCollection<T>._pageTimeout VirtualizingCollection<T>.PageSize VirtualizingCollection<T>.PageTimeout VirtualizingCollection<T>.Count VirtualizingCollection<T>.SyncRoot VirtualizingCollection<T>.IsSynchronized VirtualizingCollection<T>.IsReadOnly VirtualizingCollection<T>.IsFixedSize VirtualizingCollection<T>.Item[Int32] VirtualizingCollection<T>.IList.Item[Int32] VirtualizingCollection<T>.GetEnumerator() VirtualizingCollection<T>.IEnumerable.GetEnumerator() VirtualizingCollection<T>.Add(T) VirtualizingCollection<T>.IList.Add(Object) VirtualizingCollection<T>.IList.Contains(Object) VirtualizingCollection<T>.Contains(T) VirtualizingCollection<T>.Clear() VirtualizingCollection<T>.IList.IndexOf(Object) VirtualizingCollection<T>.IndexOf(T) VirtualizingCollection<T>.Insert(Int32, T) VirtualizingCollection<T>.IList.Insert(Int32, Object) VirtualizingCollection<T>.RemoveAt(Int32) VirtualizingCollection<T>.IList.Remove(Object) VirtualizingCollection<T>.Remove(T) VirtualizingCollection<T>.CopyTo(T[], Int32) VirtualizingCollection<T>.ICollection.CopyTo(Array, Int32) VirtualizingCollection<T>.CleanUpPages() VirtualizingCollection<T>.LoadPage(Int32) VirtualizingCollection<T>.PopulatePage(Int32, IList<T>) VirtualizingCollection<T>.RequestPage(Int32) VirtualizingCollection<T>.LoadCount() VirtualizingCollection<T>.FetchPage(Int32) VirtualizingCollection<T>.FetchCount() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class VirtualizingResourceCollection<T> : VirtualizingCollection<T>, IList<T>, ICollection<T>, IEnumerable<T>, IList, ICollection, IEnumerable where T : Resource Type Parameters Name Description T Constructors | Improve this Doc View Source VirtualizingResourceCollection(IModel, ResourceQuery, Boolean) Initializes a new instance of the VirtualizingResourceCollection<T> class. Declaration public VirtualizingResourceCollection(IModel model, ResourceQuery query, bool inferenceEnabled = false) Parameters Type Name Description IModel model ResourceQuery query System.Boolean inferenceEnabled | Improve this Doc View Source VirtualizingResourceCollection(IModel, ResourceQuery, Int32, Boolean) Initializes a new instance of the VirtualizingResourceCollection<T> class. Declaration public VirtualizingResourceCollection(IModel model, ResourceQuery query, int pageSize, bool inferenceEnabled = true) Parameters Type Name Description IModel model ResourceQuery query System.Int32 pageSize System.Boolean inferenceEnabled | Improve this Doc View Source VirtualizingResourceCollection(IModel, ResourceQuery, Int32, Int32, Boolean) Initializes a new instance of the VirtualizingResourceCollection<T> class. Declaration public VirtualizingResourceCollection(IModel model, ResourceQuery query, int pageSize, int pageTimeout, bool inferenceEnabled = true) Parameters Type Name Description IModel model ResourceQuery query System.Int32 pageSize System.Int32 pageTimeout System.Boolean inferenceEnabled Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable"
  },
  "api/Semiodesk.Trinity.VirtualizingSparqlCollection-1.html": {
    "href": "api/Semiodesk.Trinity.VirtualizingSparqlCollection-1.html",
    "title": "Class VirtualizingSparqlCollection<T>",
    "keywords": "Class VirtualizingSparqlCollection<T> A virtualizing collection for sparql query results Inheritance System.Object VirtualizingCollection <T> VirtualizingSparqlCollection<T> Implements System.Collections.Generic.IList <T> System.Collections.Generic.ICollection <T> System.Collections.Generic.IEnumerable <T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable Inherited Members VirtualizingCollection<T>._pageSize VirtualizingCollection<T>._pageTimeout VirtualizingCollection<T>.PageSize VirtualizingCollection<T>.PageTimeout VirtualizingCollection<T>.Count VirtualizingCollection<T>.SyncRoot VirtualizingCollection<T>.IsSynchronized VirtualizingCollection<T>.IsReadOnly VirtualizingCollection<T>.IsFixedSize VirtualizingCollection<T>.Item[Int32] VirtualizingCollection<T>.IList.Item[Int32] VirtualizingCollection<T>.GetEnumerator() VirtualizingCollection<T>.IEnumerable.GetEnumerator() VirtualizingCollection<T>.Add(T) VirtualizingCollection<T>.IList.Add(Object) VirtualizingCollection<T>.IList.Contains(Object) VirtualizingCollection<T>.Contains(T) VirtualizingCollection<T>.Clear() VirtualizingCollection<T>.IList.IndexOf(Object) VirtualizingCollection<T>.IndexOf(T) VirtualizingCollection<T>.Insert(Int32, T) VirtualizingCollection<T>.IList.Insert(Int32, Object) VirtualizingCollection<T>.RemoveAt(Int32) VirtualizingCollection<T>.IList.Remove(Object) VirtualizingCollection<T>.Remove(T) VirtualizingCollection<T>.CopyTo(T[], Int32) VirtualizingCollection<T>.ICollection.CopyTo(Array, Int32) VirtualizingCollection<T>.CleanUpPages() VirtualizingCollection<T>.LoadPage(Int32) VirtualizingCollection<T>.PopulatePage(Int32, IList<T>) VirtualizingCollection<T>.RequestPage(Int32) VirtualizingCollection<T>.LoadCount() VirtualizingCollection<T>.FetchPage(Int32) VirtualizingCollection<T>.FetchCount() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class VirtualizingSparqlCollection<T> : VirtualizingCollection<T>, IList<T>, ICollection<T>, IEnumerable<T>, IList, ICollection, IEnumerable where T : Resource Type Parameters Name Description T Constructors | Improve this Doc View Source VirtualizingSparqlCollection(IModel, SparqlQuery, Boolean) Initializes a new instance of the VirtualizingSparqlCollection<T> class. Declaration public VirtualizingSparqlCollection(IModel model, SparqlQuery query, bool inferenceEnabled = false) Parameters Type Name Description IModel model SparqlQuery query System.Boolean inferenceEnabled | Improve this Doc View Source VirtualizingSparqlCollection(IModel, SparqlQuery, Int32, Boolean) Initializes a new instance of the VirtualizingSparqlCollection<T> class. Declaration public VirtualizingSparqlCollection(IModel model, SparqlQuery query, int pageSize, bool inferenceEnabled = true) Parameters Type Name Description IModel model The model to query. SparqlQuery query The query. System.Int32 pageSize Size of the page. System.Boolean inferenceEnabled Using inferencing | Improve this Doc View Source VirtualizingSparqlCollection(IModel, SparqlQuery, Int32, Int32, Boolean) Initializes a new instance of the VirtualizingSparqlCollection<T> class. Declaration public VirtualizingSparqlCollection(IModel model, SparqlQuery query, int pageSize, int pageTimeout, bool inferenceEnabled = true) Parameters Type Name Description IModel model SparqlQuery query System.Int32 pageSize System.Int32 pageTimeout System.Boolean inferenceEnabled Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable"
  },
  "api/Semiodesk.Trinity.Collections.html": {
    "href": "api/Semiodesk.Trinity.Collections.html",
    "title": "Namespace Semiodesk.Trinity.Collections",
    "keywords": "Namespace Semiodesk.Trinity.Collections Classes AsyncVirtualizingCollection<T> Derived VirtualizatingCollection, performing loading asychronously. AsyncVirtualizingResourceCollection<T> An generic asynchrous virtualizing collection for resource queries. AsyncVirtualizingSparqlCollection<T> An generic asynchrous virtualizing collection for sparql queries. VirtualizingCollection<T> A generic virtualizing collection. Interfaces IItemsProvider<T> A generic items provider collection."
  },
  "api/Semiodesk.Trinity.Exceptions.StoreProviderMissingException.html": {
    "href": "api/Semiodesk.Trinity.Exceptions.StoreProviderMissingException.html",
    "title": "Class StoreProviderMissingException",
    "keywords": "Class StoreProviderMissingException Inheritance System.Object System.Exception StoreProviderMissingException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Semiodesk.Trinity.Exceptions Assembly : Semiodesk.Trinity.dll Syntax public class StoreProviderMissingException : Exception, ISerializable Constructors | Improve this Doc View Source StoreProviderMissingException(String) Declaration public StoreProviderMissingException(string message) Parameters Type Name Description System.String message | Improve this Doc View Source StoreProviderMissingException(String, Exception) Declaration public StoreProviderMissingException(string message, Exception inner) Parameters Type Name Description System.String message System.Exception inner Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Semiodesk.Trinity.IModelGroup.html": {
    "href": "api/Semiodesk.Trinity.IModelGroup.html",
    "title": "Interface IModelGroup",
    "keywords": "Interface IModelGroup The model group can be used to query over multiple models at once. Inherited Members IModel.Uri IModel.IsEmpty IModel.AddResource(IResource, ITransaction) IModel.AddResource<T>(T, ITransaction) IModel.CreateResource(String, ITransaction) IModel.CreateResource(Uri, ITransaction) IModel.CreateResource<T>(String, ITransaction) IModel.CreateResource<T>(Uri, ITransaction) IModel.CreateResource(Type, String, ITransaction) IModel.CreateResource(Uri, Type, ITransaction) IModel.DeleteResource(Uri, ITransaction) IModel.DeleteResource(IResource, ITransaction) IModel.ContainsResource(Uri, ITransaction) IModel.ContainsResource(IResource, ITransaction) IModel.ExecuteQuery(ISparqlQuery, Boolean, ITransaction) IModel.ExecuteQuery(ResourceQuery, Boolean, ITransaction) IModel.ExecuteUpdate(SparqlUpdate, ITransaction) IModel.GetResource(Uri, ITransaction) IModel.GetResource<T>(Uri, ITransaction) IModel.GetResource<T>(IResource, ITransaction) IModel.GetResource(Uri, Type, ITransaction) IModel.GetResource(IResource, ITransaction) IModel.GetResources(ISparqlQuery, Boolean, ITransaction) IModel.GetResources(ResourceQuery, Boolean, ITransaction) IModel.GetResources<T>(ISparqlQuery, Boolean, ITransaction) IModel.GetResources<T>(ResourceQuery, Boolean, ITransaction) IModel.GetResources<T>(Boolean, ITransaction) IModel.AsQueryable<T>(Boolean) IModel.GetBindings(ISparqlQuery, Boolean, ITransaction) IModel.Read(Uri, RdfSerializationFormat, Boolean) IModel.Read(Stream, RdfSerializationFormat, Boolean) IModel.Write(Stream, RdfSerializationFormat) IModel.UpdateResource(Resource, ITransaction) IModel.Clear() IModel.BeginTransaction(IsolationLevel) System.Collections.Generic.ISet<Semiodesk.Trinity.IModel>.Add(Semiodesk.Trinity.IModel) System.Collections.Generic.ISet<Semiodesk.Trinity.IModel>.ExceptWith(System.Collections.Generic.IEnumerable<Semiodesk.Trinity.IModel>) System.Collections.Generic.ISet<Semiodesk.Trinity.IModel>.IntersectWith(System.Collections.Generic.IEnumerable<Semiodesk.Trinity.IModel>) System.Collections.Generic.ISet<Semiodesk.Trinity.IModel>.IsProperSubsetOf(System.Collections.Generic.IEnumerable<Semiodesk.Trinity.IModel>) System.Collections.Generic.ISet<Semiodesk.Trinity.IModel>.IsProperSupersetOf(System.Collections.Generic.IEnumerable<Semiodesk.Trinity.IModel>) System.Collections.Generic.ISet<Semiodesk.Trinity.IModel>.IsSubsetOf(System.Collections.Generic.IEnumerable<Semiodesk.Trinity.IModel>) System.Collections.Generic.ISet<Semiodesk.Trinity.IModel>.IsSupersetOf(System.Collections.Generic.IEnumerable<Semiodesk.Trinity.IModel>) System.Collections.Generic.ISet<Semiodesk.Trinity.IModel>.Overlaps(System.Collections.Generic.IEnumerable<Semiodesk.Trinity.IModel>) System.Collections.Generic.ISet<Semiodesk.Trinity.IModel>.SetEquals(System.Collections.Generic.IEnumerable<Semiodesk.Trinity.IModel>) System.Collections.Generic.ISet<Semiodesk.Trinity.IModel>.SymmetricExceptWith(System.Collections.Generic.IEnumerable<Semiodesk.Trinity.IModel>) System.Collections.Generic.ISet<Semiodesk.Trinity.IModel>.UnionWith(System.Collections.Generic.IEnumerable<Semiodesk.Trinity.IModel>) System.Collections.Generic.ICollection<Semiodesk.Trinity.IModel>.Contains(Semiodesk.Trinity.IModel) System.Collections.Generic.ICollection<Semiodesk.Trinity.IModel>.CopyTo(Semiodesk.Trinity.IModel[], System.Int32) System.Collections.Generic.ICollection<Semiodesk.Trinity.IModel>.Remove(Semiodesk.Trinity.IModel) System.Collections.Generic.ICollection<Semiodesk.Trinity.IModel>.Count System.Collections.Generic.ICollection<Semiodesk.Trinity.IModel>.IsReadOnly System.Collections.Generic.IEnumerable<Semiodesk.Trinity.IModel>.GetEnumerator() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public interface IModelGroup : IModel, ISet<IModel>, ICollection<IModel>, IEnumerable<IModel>, IEnumerable Properties | Improve this Doc View Source DefaultModel The default model of this group Declaration IModel DefaultModel { get; set; } Property Value Type Description IModel"
  },
  "api/Semiodesk.Trinity.SparqlSerializer.html": {
    "href": "api/Semiodesk.Trinity.SparqlSerializer.html",
    "title": "Class SparqlSerializer",
    "keywords": "Class SparqlSerializer Provides functionality to perform serialization of native .NET types into SPARQL strings. Inheritance System.Object SparqlSerializer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class SparqlSerializer Methods | Improve this Doc View Source GenerateDatasetClause(IModel) Generate the Dataset for a single model Declaration public static string GenerateDatasetClause(IModel model) Parameters Type Name Description IModel model Returns Type Description System.String | Improve this Doc View Source GenerateDatasetClause(IModelGroup) Generate the Dataset for the given model group Declaration public static string GenerateDatasetClause(IModelGroup modelGroup) Parameters Type Name Description IModelGroup modelGroup Returns Type Description System.String | Improve this Doc View Source GenerateDatasetClause(IEnumerable<IModel>) Generate the Dataset for a enumeration of models Declaration public static string GenerateDatasetClause(IEnumerable<IModel> models) Parameters Type Name Description System.Collections.Generic.IEnumerable < IModel > models Returns Type Description System.String | Improve this Doc View Source Serialize(IModel, ResourceQuery, Boolean) Serialize a ResourceQuery from certain model. Can also only deliver the Uris of the result resources. Declaration public static string Serialize(IModel model, ResourceQuery query, bool onlyUris = false) Parameters Type Name Description IModel model ResourceQuery query System.Boolean onlyUris Returns Type Description System.String | Improve this Doc View Source Serialize(IModel, ResourceQuery, StringBuilder, SortedList<Int32, String>, IList<ResourceQuery>) Serialize a query from the given parameters Declaration public static void Serialize(IModel model, ResourceQuery query, StringBuilder whereBlock, SortedList<int, string> solutionModifiers, IList<ResourceQuery> processed) Parameters Type Name Description IModel model ResourceQuery query System.Text.StringBuilder whereBlock System.Collections.Generic.SortedList < System.Int32 , System.String > solutionModifiers System.Collections.Generic.IList < ResourceQuery > processed | Improve this Doc View Source SerializeCount(IModel, ISparqlQuery) Serialize a count query for the given SparqlQuery Declaration public static string SerializeCount(IModel model, ISparqlQuery query) Parameters Type Name Description IModel model ISparqlQuery query Returns Type Description System.String | Improve this Doc View Source SerializeCount(IModel, ResourceQuery) Serialize a count query for the given ResourceQuery Declaration public static string SerializeCount(IModel model, ResourceQuery query) Parameters Type Name Description IModel model ResourceQuery query Returns Type Description System.String | Improve this Doc View Source SerializeDateTime(DateTime) Serializes a DateTime Declaration public static string SerializeDateTime(DateTime obj) Parameters Type Name Description System.DateTime obj Returns Type Description System.String | Improve this Doc View Source SerializeFetchUris(IModel, ISparqlQuery, Int32, Int32) Declaration public static string SerializeFetchUris(IModel model, ISparqlQuery query, int offset = -1, int limit = -1) Parameters Type Name Description IModel model ISparqlQuery query System.Int32 offset System.Int32 limit Returns Type Description System.String | Improve this Doc View Source SerializeOffsetLimit(IModel, ISparqlQuery, Int32, Int32) Declaration public static string SerializeOffsetLimit(IModel model, ISparqlQuery query, int offset = -1, int limit = -1) Parameters Type Name Description IModel model ISparqlQuery query System.Int32 offset System.Int32 limit Returns Type Description System.String | Improve this Doc View Source SerializeResource(IResource) Serializes a resource Declaration public static string SerializeResource(IResource resource) Parameters Type Name Description IResource resource Returns Type Description System.String | Improve this Doc View Source SerializeString(String) Serializes a string and excapes special characters Declaration public static string SerializeString(string str) Parameters Type Name Description System.String str Returns Type Description System.String | Improve this Doc View Source SerializeTranslatedString(String, String) Serializes a string with a translation Declaration public static string SerializeTranslatedString(string str, string lang) Parameters Type Name Description System.String str System.String lang Returns Type Description System.String | Improve this Doc View Source SerializeTypedLiteral(Object, Uri) Serializes a typed literal Declaration public static string SerializeTypedLiteral(object obj, Uri typeUri) Parameters Type Name Description System.Object obj System.Uri typeUri Returns Type Description System.String | Improve this Doc View Source SerializeUri(Uri) Serializes a Uri Declaration public static string SerializeUri(Uri uri) Parameters Type Name Description System.Uri uri Returns Type Description System.String | Improve this Doc View Source SerializeValue(Object) Serializes a value Declaration public static string SerializeValue(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.String"
  },
  "api/Semiodesk.Trinity.SparqlUpdate.html": {
    "href": "api/Semiodesk.Trinity.SparqlUpdate.html",
    "title": "Class SparqlUpdate",
    "keywords": "Class SparqlUpdate A simple SPARQL Update class. This class aims to ease formulating SPARQL query strings by automatically setting PREFIX declarations from a given namespace manager. Inheritance System.Object SparqlUpdate Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class SparqlUpdate Constructors | Improve this Doc View Source SparqlUpdate(String) Create a new SPARQL Update with an optional namespace manager instance which can be used to declare PREFIX declarations for the namespace abbreviations used in the update string. Declaration public SparqlUpdate(string updateString) Parameters Type Name Description System.String updateString The u update string. Properties | Improve this Doc View Source Model Get or set the model used for this query. Declaration public IModel Model { get; set; } Property Value Type Description IModel | Improve this Doc View Source Resource Get or set the resource being updated. Declaration public IResource Resource { get; set; } Property Value Type Description IResource Methods | Improve this Doc View Source Bind(String, Object) Set the value for a query parameter which is preceeded by &apos;@'. Declaration public void Bind(string parameter, object value) Parameters Type Name Description System.String parameter The parameter name including the &apos;@'. System.Object value The paramter value. | Improve this Doc View Source ToString() Returns the query string with generated prefixes and subsituted parameters. Declaration public override string ToString() Returns Type Description System.String A valid SPARQL string. Overrides System.Object.ToString()"
  },
  "api/Semiodesk.Trinity.Store.Virtuoso.Ruleset.html": {
    "href": "api/Semiodesk.Trinity.Store.Virtuoso.Ruleset.html",
    "title": "Class Ruleset",
    "keywords": "Class Ruleset Inheritance System.Object Ruleset Namespace : Semiodesk.Trinity.Store.Virtuoso Assembly : Semiodesk.Trinity.Virtuoso.dll Syntax public class Ruleset : object Properties | Improve this Doc View Source GraphCollection Declaration public List<Graph> GraphCollection { get; set; } Property Value Type Description List < Graph > | Improve this Doc View Source Uri Declaration public string Uri { get; set; } Property Value Type Description System.String"
  },
  "api/Semiodesk.Trinity.Store.Virtuoso.Rulesets.html": {
    "href": "api/Semiodesk.Trinity.Store.Virtuoso.Rulesets.html",
    "title": "Class Rulesets",
    "keywords": "Class Rulesets Inheritance System.Object Rulesets Namespace : Semiodesk.Trinity.Store.Virtuoso Assembly : Semiodesk.Trinity.Virtuoso.dll Syntax public class Rulesets : object Properties | Improve this Doc View Source RulesetCollection Declaration public List<Ruleset> RulesetCollection { get; set; } Property Value Type Description List < Ruleset >"
  },
  "api/Semiodesk.Trinity.UriExtensions.html": {
    "href": "api/Semiodesk.Trinity.UriExtensions.html",
    "title": "Class UriExtensions",
    "keywords": "Class UriExtensions Extension of Uri class concering UriRef handling. Inheritance System.Object UriExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public static class UriExtensions Methods | Improve this Doc View Source ToUriRef(Uri) Create a UriRef from this Uri. Declaration public static UriRef ToUriRef(this Uri uri) Parameters Type Name Description System.Uri uri Returns Type Description UriRef"
  },
  "api/Semiodesk.Trinity.UriRef.html": {
    "href": "api/Semiodesk.Trinity.UriRef.html",
    "title": "Class UriRef",
    "keywords": "Class UriRef This class extends the framework Uri class to also include fragments for equality testing. Inheritance System.Object System.Uri UriRef Implements System.Runtime.Serialization.ISerializable Inherited Members System.Uri.SchemeDelimiter System.Uri.UriSchemeFile System.Uri.UriSchemeFtp System.Uri.UriSchemeGopher System.Uri.UriSchemeHttp System.Uri.UriSchemeHttps System.Uri.UriSchemeMailto System.Uri.UriSchemeNetPipe System.Uri.UriSchemeNetTcp System.Uri.UriSchemeNews System.Uri.UriSchemeNntp System.Uri.Canonicalize() System.Uri.CheckHostName(System.String) System.Uri.CheckSchemeName(System.String) System.Uri.CheckSecurity() System.Uri.Compare(System.Uri, System.Uri, System.UriComponents, System.UriFormat, System.StringComparison) System.Uri.Escape() System.Uri.EscapeDataString(System.String) System.Uri.EscapeString(System.String) System.Uri.EscapeUriString(System.String) System.Uri.FromHex(System.Char) System.Uri.GetComponents(System.UriComponents, System.UriFormat) System.Uri.GetLeftPart(System.UriPartial) System.Uri.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Uri.HexEscape(System.Char) System.Uri.HexUnescape(System.String, System.Int32) System.Uri.IsBadFileSystemCharacter(System.Char) System.Uri.IsBaseOf(System.Uri) System.Uri.IsExcludedCharacter(System.Char) System.Uri.IsHexDigit(System.Char) System.Uri.IsHexEncoding(System.String, System.Int32) System.Uri.IsReservedCharacter(System.Char) System.Uri.IsWellFormedOriginalString() System.Uri.IsWellFormedUriString(System.String, System.UriKind) System.Uri.MakeRelative(System.Uri) System.Uri.MakeRelativeUri(System.Uri) System.Uri.Parse() System.Uri.System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Uri.ToString() System.Uri.TryCreate(System.String, System.UriKind, System.Uri) System.Uri.TryCreate(System.Uri, System.String, System.Uri) System.Uri.TryCreate(System.Uri, System.Uri, System.Uri) System.Uri.Unescape(System.String) System.Uri.UnescapeDataString(System.String) System.Uri.AbsolutePath System.Uri.AbsoluteUri System.Uri.Authority System.Uri.DnsSafeHost System.Uri.Fragment System.Uri.Host System.Uri.HostNameType System.Uri.IdnHost System.Uri.IsAbsoluteUri System.Uri.IsDefaultPort System.Uri.IsFile System.Uri.IsLoopback System.Uri.IsUnc System.Uri.LocalPath System.Uri.OriginalString System.Uri.PathAndQuery System.Uri.Port System.Uri.Query System.Uri.Scheme System.Uri.Segments System.Uri.UserEscaped System.Uri.UserInfo System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class UriRef : Uri, ISerializable Constructors | Improve this Doc View Source UriRef(String) Create an UriRef from a string. Declaration public UriRef(string uriString) Parameters Type Name Description System.String uriString | Improve this Doc View Source UriRef(String, UriKind) Creates an UriRef from a string with a given UriKind. Declaration public UriRef(string uriString, UriKind uriKind) Parameters Type Name Description System.String uriString System.UriKind uriKind | Improve this Doc View Source UriRef(Uri) Creates an UriRef from an Uri Declaration public UriRef(Uri uri) Parameters Type Name Description System.Uri uri | Improve this Doc View Source UriRef(Uri, String) Creates an UriRef from a base uri and a relative uri as string. Declaration public UriRef(Uri baseUri, string relativeUri) Parameters Type Name Description System.Uri baseUri System.String relativeUri Methods | Improve this Doc View Source Equals(Object) Tests the equality of two UriRefs. Declaration public override bool Equals(object comparand) Parameters Type Name Description System.Object comparand Returns Type Description System.Boolean Overrides System.Uri.Equals(System.Object) | Improve this Doc View Source GetGuid(String) Generates a globally unique resource identifier in the Semiodesk namespace: <http://semiodesk.com/id/{GUID}/> Declaration public static Uri GetGuid(string format = \"http://semiodesk.com/id/{0}\") Parameters Type Name Description System.String format Returns Type Description System.Uri A Uniform Resource Identifier. | Improve this Doc View Source GetHashCode() Override of GetHashCode which factors the fragment in. Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Uri.GetHashCode() Implements System.Runtime.Serialization.ISerializable Extension Methods UriExtensions.ToUriRef(Uri)"
  },
  "api/Semiodesk.Trinity.ModelChangedDelegate.html": {
    "href": "api/Semiodesk.Trinity.ModelChangedDelegate.html",
    "title": "Delegate ModelChangedDelegate",
    "keywords": "Delegate ModelChangedDelegate Interface for ModelChanged event handlers. Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public delegate void ModelChangedDelegate(object sender, ModelChangedEventArgs e); Parameters Type Name Description System.Object sender The object which raised the event. ModelChangedEventArgs e Event specific arguments."
  },
  "api/Semiodesk.Trinity.Ontology.html": {
    "href": "api/Semiodesk.Trinity.Ontology.html",
    "title": "Class Ontology",
    "keywords": "Class Ontology Abstract class which marks subclasses as ontologies. Needed for automatic discovery. Inheritance System.Object Ontology Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public abstract class Ontology"
  },
  "api/Semiodesk.Trinity.Query.MethodCallExpressionExtensions.html": {
    "href": "api/Semiodesk.Trinity.Query.MethodCallExpressionExtensions.html",
    "title": "Class MethodCallExpressionExtensions",
    "keywords": "Class MethodCallExpressionExtensions Inheritance System.Object MethodCallExpressionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity.Query Assembly : Semiodesk.Trinity.dll Syntax public static class MethodCallExpressionExtensions Methods | Improve this Doc View Source GetArgumentValue<T>(MethodCallExpression, Int32) Declaration public static T GetArgumentValue<T>(this MethodCallExpression expression, int index) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression System.Int32 index Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetArgumentValue<T>(MethodCallExpression, Int32, T) Declaration public static T GetArgumentValue<T>(this MethodCallExpression expression, int index, T defaultValue) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression System.Int32 index T defaultValue Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source HasArgumentValue(MethodCallExpression, Int32, Object) Declaration public static bool HasArgumentValue(this MethodCallExpression expression, int index, object value) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression System.Int32 index System.Object value Returns Type Description System.Boolean | Improve this Doc View Source HasArgumentValueFromAlternatives(MethodCallExpression, Int32, Object[]) Declaration public static bool HasArgumentValueFromAlternatives(this MethodCallExpression expression, int index, params object[] values) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression System.Int32 index System.Object [] values Returns Type Description System.Boolean"
  },
  "api/Semiodesk.Trinity.RdfNamespaceAttribute.html": {
    "href": "api/Semiodesk.Trinity.RdfNamespaceAttribute.html",
    "title": "Class RdfNamespaceAttribute",
    "keywords": "Class RdfNamespaceAttribute Inheritance System.Object System.Attribute RdfNamespaceAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax [AttributeUsage(AttributeTargets.All | AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Constructor | AttributeTargets.Delegate | AttributeTargets.Enum | AttributeTargets.Event | AttributeTargets.Field | AttributeTargets.GenericParameter | AttributeTargets.Interface | AttributeTargets.Method | AttributeTargets.Module | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue | AttributeTargets.Struct)] public class RdfNamespaceAttribute : Attribute Constructors | Improve this Doc View Source RdfNamespaceAttribute(String) Declaration public RdfNamespaceAttribute(string uriString) Parameters Type Name Description System.String uriString | Improve this Doc View Source RdfNamespaceAttribute(Uri) Declaration public RdfNamespaceAttribute(Uri uri) Parameters Type Name Description System.Uri uri Fields | Improve this Doc View Source MappedUri Declaration public readonly Uri MappedUri Field Value Type Description System.Uri"
  },
  "api/Semiodesk.Trinity.ResourceProvider.html": {
    "href": "api/Semiodesk.Trinity.ResourceProvider.html",
    "title": "Class ResourceProvider",
    "keywords": "Class ResourceProvider Inheritance System.Object ResourceProvider Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class ResourceProvider Constructors | Improve this Doc View Source ResourceProvider() Declaration public ResourceProvider() | Improve this Doc View Source ResourceProvider(String, ResourceQuery) Declaration public ResourceProvider(string name, ResourceQuery query) Parameters Type Name Description System.String name ResourceQuery query Properties | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source Query Declaration public ResourceQuery Query { get; set; } Property Value Type Description ResourceQuery"
  },
  "api/Semiodesk.Trinity.SparqlPreprocessor.html": {
    "href": "api/Semiodesk.Trinity.SparqlPreprocessor.html",
    "title": "Class SparqlPreprocessor",
    "keywords": "Class SparqlPreprocessor A very simple SPARQL parser. This class is primarily intended to support a limited range of query preprocessing tasks such as setting the values of query parameters (@-variables) as quickly as possible. It does not aim to support the full SPARQL standard syntax. Inheritance System.Object VDS.RDF.Parsing.Tokens.BaseTokeniser VDS.RDF.Parsing.Tokens.SparqlTokeniser SparqlPreprocessor SparqlQueryPreprocessor Implements VDS.RDF.Parsing.Tokens.ITokeniser Inherited Members VDS.RDF.Parsing.Tokens.BaseTokeniser.StartNewToken() VDS.RDF.Parsing.Tokens.BaseTokeniser.Peek() VDS.RDF.Parsing.Tokens.BaseTokeniser.Backtrack() VDS.RDF.Parsing.Tokens.BaseTokeniser.ConsumeCharacter() VDS.RDF.Parsing.Tokens.BaseTokeniser.ConsumeCharacter(System.Boolean) VDS.RDF.Parsing.Tokens.BaseTokeniser.ConsumeNewLine(System.Boolean) VDS.RDF.Parsing.Tokens.BaseTokeniser.ConsumeNewLine(System.Boolean, System.Boolean) VDS.RDF.Parsing.Tokens.BaseTokeniser.SkipCharacter() VDS.RDF.Parsing.Tokens.BaseTokeniser.DiscardWhiteSpace() VDS.RDF.Parsing.Tokens.BaseTokeniser.HandleEscapes(VDS.RDF.Parsing.Tokens.TokeniserEscapeMode) VDS.RDF.Parsing.Tokens.BaseTokeniser.HandleComplexLocalNameEscapes() VDS.RDF.Parsing.Tokens.BaseTokeniser.IsHexDigit(System.Char) VDS.RDF.Parsing.Tokens.BaseTokeniser.Error(System.String) VDS.RDF.Parsing.Tokens.BaseTokeniser.UnexpectedCharacter(System.Char, System.String) VDS.RDF.Parsing.Tokens.BaseTokeniser.UnexpectedEndOfInput(System.String) VDS.RDF.Parsing.Tokens.BaseTokeniser.UnexpectedNewLine(System.String) VDS.RDF.Parsing.Tokens.BaseTokeniser.UnexpectedToken(System.String, VDS.RDF.Parsing.Tokens.IToken) VDS.RDF.Parsing.Tokens.BaseTokeniser.Format VDS.RDF.Parsing.Tokens.BaseTokeniser.Value VDS.RDF.Parsing.Tokens.BaseTokeniser.Length VDS.RDF.Parsing.Tokens.BaseTokeniser.CurrentLine VDS.RDF.Parsing.Tokens.BaseTokeniser.CurrentPosition VDS.RDF.Parsing.Tokens.BaseTokeniser.StartLine VDS.RDF.Parsing.Tokens.BaseTokeniser.StartPosition VDS.RDF.Parsing.Tokens.BaseTokeniser.EndLine VDS.RDF.Parsing.Tokens.BaseTokeniser.EndPosition VDS.RDF.Parsing.Tokens.BaseTokeniser.LastTokenType VDS.RDF.Parsing.Tokens.BaseTokeniser.HasBacktracked System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class SparqlPreprocessor : SparqlTokeniser, ITokeniser Constructors | Improve this Doc View Source SparqlPreprocessor(TextReader, SparqlQuerySyntax) Declaration public SparqlPreprocessor(TextReader input, SparqlQuerySyntax syntax) Parameters Type Name Description System.IO.TextReader input VDS.RDF.Parsing.SparqlQuerySyntax syntax Fields | Improve this Doc View Source DeclaredPrefixes Declaration public readonly HashSet<string> DeclaredPrefixes Field Value Type Description System.Collections.Generic.HashSet < System.String > | Improve this Doc View Source DefaultGraphs Declaration public readonly HashSet<string> DefaultGraphs Field Value Type Description System.Collections.Generic.HashSet < System.String > | Improve this Doc View Source Parameters Declaration public readonly HashSet<string> Parameters Field Value Type Description System.Collections.Generic.HashSet < System.String > | Improve this Doc View Source ParameterTypes Declaration public readonly Dictionary<string, int> ParameterTypes Field Value Type Description System.Collections.Generic.Dictionary < System.String , System.Int32 > | Improve this Doc View Source ParameterValues Declaration public readonly Dictionary<string, string> ParameterValues Field Value Type Description System.Collections.Generic.Dictionary < System.String , System.String > | Improve this Doc View Source PreviousTokenType Declaration protected int PreviousTokenType Field Value Type Description System.Int32 | Improve this Doc View Source Tokens We use the list of tokens to generate the query string with bound parameters on demand. Declaration protected readonly List<IToken> Tokens Field Value Type Description System.Collections.Generic.List < VDS.RDF.Parsing.Tokens.IToken > | Improve this Doc View Source UsedPrefixes Declaration public readonly HashSet<string> UsedPrefixes Field Value Type Description System.Collections.Generic.HashSet < System.String > Methods | Improve this Doc View Source AddDefaultGraph(Uri) Declaration public void AddDefaultGraph(Uri uri) Parameters Type Name Description System.Uri uri | Improve this Doc View Source AddNamedGraph(Uri) Declaration public void AddNamedGraph(Uri uri) Parameters Type Name Description System.Uri uri | Improve this Doc View Source Bind(String, Object) Set the value for a query parameter which is preceeded by &apos;@'. Declaration public void Bind(string parameter, object value) Parameters Type Name Description System.String parameter The parameter name including the &apos;@'. System.Object value The paramter value. | Improve this Doc View Source GetNextToken() Declaration public override IToken GetNextToken() Returns Type Description VDS.RDF.Parsing.Tokens.IToken Overrides VDS.RDF.Parsing.Tokens.SparqlTokeniser.GetNextToken() | Improve this Doc View Source GetPrefixDeclarations() Declaration public string GetPrefixDeclarations() Returns Type Description System.String | Improve this Doc View Source Process(Boolean) Declaration public void Process(bool declarePrefixes) Parameters Type Name Description System.Boolean declarePrefixes | Improve this Doc View Source Serialize(Int32) Declaration protected string Serialize(int outputLevel = 0) Parameters Type Name Description System.Int32 outputLevel Returns Type Description System.String | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements VDS.RDF.Parsing.Tokens.ITokeniser"
  },
  "api/Semiodesk.Trinity.SparqlQuery.html": {
    "href": "api/Semiodesk.Trinity.SparqlQuery.html",
    "title": "Class SparqlQuery",
    "keywords": "Class SparqlQuery A simple SPAQL Query class. This class aims to ease formulating SPARQL query strings by automatically setting PREFIX declarations from a given namespace manager. Inheritance System.Object SparqlQuery Implements ISparqlQuery Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class SparqlQuery : ISparqlQuery Constructors | Improve this Doc View Source SparqlQuery(String, Boolean) Creates a new SPARQL query. If enabled, the PREFIXES used in any of the query's graph patterns will be declared in the query header if they are found in the application config. Additionally, the query may be compacted in order to reduce processing overhead when being used repeatedly in loops. Declaration public SparqlQuery(string queryString, bool declarePrefixes = true) Parameters Type Name Description System.String queryString The SPARQL query string. System.Boolean declarePrefixes Set to true if the namespace prefixes used in the query should be declared. Properties | Improve this Doc View Source IsInferenceEnabled Indicates if the query result should be expanded using run-time inferencing. Declaration public bool IsInferenceEnabled { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Model Get or set the model used for this query. Declaration public IModel Model { get; set; } Property Value Type Description IModel | Improve this Doc View Source QueryType The query form as defined in http://www.w3.org/TR/rdf-sparql-query/#QueryForms Declaration public SparqlQueryType QueryType { get; protected set; } Property Value Type Description SparqlQueryType Methods | Improve this Doc View Source Bind(String, Object) Set the value for a query parameter which is preceeded by &apos;@'. Declaration public void Bind(string parameter, object value) Parameters Type Name Description System.String parameter The parameter name including the &apos;@'. System.Object value The paramter value. | Improve this Doc View Source GetDeclaredPrefixes() Returns all prefixes that were specified by the query. Declaration public IEnumerable<string> GetDeclaredPrefixes() Returns Type Description System.Collections.Generic.IEnumerable < System.String > | Improve this Doc View Source GetDefaultModels() Enumerates the graphs which are declared in FROM and FROM NAMED directives at the root level. Declaration public IEnumerable<string> GetDefaultModels() Returns Type Description System.Collections.Generic.IEnumerable < System.String > An enumeration of URI strings. | Improve this Doc View Source GetGlobalScopeVariableNames() Declaration public string[] GetGlobalScopeVariableNames() Returns Type Description System.String [] | Improve this Doc View Source GetRootGraphPattern() Declaration public string GetRootGraphPattern() Returns Type Description System.String | Improve this Doc View Source GetRootOrderByClause() Indicates if the query contains an ORDER BY clause in any of its graph patterns. Declaration public string GetRootOrderByClause() Returns Type Description System.String true if the query contains an ORDER BY clause, false otherwise. | Improve this Doc View Source ProvidesStatements() Indicates if the query provides a description of one or more resources. Declaration public bool ProvidesStatements() Returns Type Description System.Boolean | Improve this Doc View Source ToString() Returns the query string with generated prefixes and subsituted parameters. Declaration public override string ToString() Returns Type Description System.String A valid SPARQL string. Overrides System.Object.ToString() Implements ISparqlQuery"
  },
  "api/Semiodesk.Trinity.Store.dotNetRDFStoreProvider.html": {
    "href": "api/Semiodesk.Trinity.Store.dotNetRDFStoreProvider.html",
    "title": "Class dotNetRDFStoreProvider",
    "keywords": "Class dotNetRDFStoreProvider Inheritance System.Object StoreProvider dotNetRDFStoreProvider Inherited Members StoreProvider.Name StoreProvider.ConfigurationOptions System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity.Store Assembly : Semiodesk.Trinity.dll Syntax [Export(typeof(StoreProvider))] public class dotNetRDFStoreProvider : StoreProvider Constructors | Improve this Doc View Source dotNetRDFStoreProvider() Declaration public dotNetRDFStoreProvider() Methods | Improve this Doc View Source GetStore(Dictionary<String, String>) Declaration public override IStore GetStore(Dictionary<string, string> configurationDictionary) Parameters Type Name Description System.Collections.Generic.Dictionary < System.String , System.String > configurationDictionary Returns Type Description IStore Overrides StoreProvider.GetStore(Dictionary<String, String>)"
  },
  "api/Semiodesk.Trinity.Store.ITripleProvider.html": {
    "href": "api/Semiodesk.Trinity.Store.ITripleProvider.html",
    "title": "Interface ITripleProvider",
    "keywords": "Interface ITripleProvider A generic triple provider interface Namespace : Semiodesk.Trinity.Store Assembly : Semiodesk.Trinity.dll Syntax public interface ITripleProvider Properties | Improve this Doc View Source Count Number of total triples Declaration int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source HasNext Indicates if another triple is available Declaration bool HasNext { get; } Property Value Type Description System.Boolean | Improve this Doc View Source O Object Declaration INode O { get; } Property Value Type Description VDS.RDF.INode | Improve this Doc View Source P Predicate Declaration Uri P { get; } Property Value Type Description System.Uri | Improve this Doc View Source S Subject Declaration INode S { get; } Property Value Type Description VDS.RDF.INode Methods | Improve this Doc View Source Reset() Resets the provider Declaration void Reset() | Improve this Doc View Source SetNext() Iterates to the next triple Declaration void SetNext()"
  },
  "api/Semiodesk.Trinity.StoreBase.html": {
    "href": "api/Semiodesk.Trinity.StoreBase.html",
    "title": "Class StoreBase",
    "keywords": "Class StoreBase This class encapsulates the functionality of an abstract triple store. Cannot be used directly. Use StoreFactory to get a concret implementation. Inheritance System.Object StoreBase dotNetRDFStore StardogStore Implements IStore System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public abstract class StoreBase : IStore, IDisposable Properties | Improve this Doc View Source IsReady This property gives the state of the store. True means that the connection is ready and awaiting queries. Declaration public virtual bool IsReady { get; protected set; } Property Value Type Description System.Boolean | Improve this Doc View Source Log Set this property to log the SPARQL queries which are executed on this store. For example, to log to the console, set this property to System.Console.Write(System.String). Declaration public Action<string> Log { get; set; } Property Value Type Description System.Action < System.String > Methods | Improve this Doc View Source BeginTransaction(IsolationLevel) Starts a transaction. The resulting transaction handle can be used to chain operations together. Declaration public abstract ITransaction BeginTransaction(IsolationLevel isolationLevel) Parameters Type Name Description System.Data.IsolationLevel isolationLevel Returns Type Description ITransaction | Improve this Doc View Source ContainsModel(IModel) Query if the model exists in the store. OBSOLETE: This method does not list empty models. At the moment you should just call GetModel() and test for IsEmpty Declaration [Obsolete(\"This method does not list empty models. At the moment you should just call GetModel() and test for IsEmpty\")] public virtual bool ContainsModel(IModel model) Parameters Type Name Description IModel model Handle to the model which is to be queried. Returns Type Description System.Boolean | Improve this Doc View Source ContainsModel(Uri) Query if the model exists in the store. OBSOLETE: This method does not list empty models. At the moment you should just call GetModel() and test for IsEmpty Declaration [Obsolete(\"This method does not list empty models. At the moment you should just call GetModel() and test for IsEmpty\")] public abstract bool ContainsModel(Uri uri) Parameters Type Name Description System.Uri uri Uri of the model which is to be queried. Returns Type Description System.Boolean | Improve this Doc View Source CreateModel(Uri) Adds a new model with the given uri to the storage. Declaration [Obsolete(\"It is not necessary to create models explicitly. Use GetModel() instead, if the model does not exist, it will be created implicitly.\")] public virtual IModel CreateModel(Uri uri) Parameters Type Name Description System.Uri uri Uri of the model Returns Type Description IModel Handle to the model | Improve this Doc View Source CreateModelGroup(IModel[]) Creates a model group which allows for queries to be made on multiple models at once. Declaration public virtual IModelGroup CreateModelGroup(params IModel[] models) Parameters Type Name Description IModel [] models The list of model handles that should be grouped together. Returns Type Description IModelGroup | Improve this Doc View Source CreateModelGroup(Uri[]) Creates a model group which allows for queries to be made on multiple models at once. Declaration public virtual IModelGroup CreateModelGroup(params Uri[] models) Parameters Type Name Description System.Uri [] models The list of uris of the models that should be grouped together. Returns Type Description IModelGroup | Improve this Doc View Source Dispose() Disposes this store and it's underlying connection. This object cannot be reused after disposing. Declaration public abstract void Dispose() | Improve this Doc View Source ExecuteNonQuery(SparqlUpdate, ITransaction) Executes a query on the store which does not expect a result. Declaration public abstract void ExecuteNonQuery(SparqlUpdate update, ITransaction transaction = null) Parameters Type Name Description SparqlUpdate update ITransaction transaction | Improve this Doc View Source ExecuteQuery(ISparqlQuery, ITransaction) Executes a SparqlQuery on the store. Declaration public abstract ISparqlQueryResult ExecuteQuery(ISparqlQuery query, ITransaction transaction = null) Parameters Type Name Description ISparqlQuery query ITransaction transaction Returns Type Description ISparqlQueryResult | Improve this Doc View Source GetModel(Uri) Gets a handle to a model in the store. Declaration public virtual IModel GetModel(Uri uri) Parameters Type Name Description System.Uri uri Uri of the model. Returns Type Description IModel | Improve this Doc View Source InitializeFromConfiguration(String, String) Initializes the store from the configuration. It uses either the provided file or attempts to load from \"ontologies.config\" located next to the executing assembly. For legacy reasons it also looks in the app.config file. If the ontology files are in a different path, this can be supplied as a base path.. Declaration public virtual void InitializeFromConfiguration(string configPath = null, string sourceDir = null) Parameters Type Name Description System.String configPath Path the configuration should be read from. System.String sourceDir Path where the ontologies should be searched for. | Improve this Doc View Source ListModels() Lists all models in the store. Declaration public abstract IEnumerable<IModel> ListModels() Returns Type Description System.Collections.Generic.IEnumerable < IModel > All handles to existing models. | Improve this Doc View Source LoadConfiguration(String) This method loads the configuration data from the given file. This can read the old App.config and new ontologies.config files. Declaration protected IConfiguration LoadConfiguration(string configPath = null) Parameters Type Name Description System.String configPath Path to either ontologies.config or App.config file. Returns Type Description Semiodesk.Trinity.Configuration.IConfiguration | Improve this Doc View Source LoadOntologies(IConfiguration, String) Loads Ontologies defined in the currently loaded config file into the store. Declaration protected void LoadOntologies(IConfiguration configuration, string sourceDir = null) Parameters Type Name Description Semiodesk.Trinity.Configuration.IConfiguration configuration Handle of the configuration. System.String sourceDir Searchpath for the ontologies. | Improve this Doc View Source LoadOntologySettings(String, String) Initializes the store from the configuration. It uses either the provided file or attempts to load from \"ontologies.config\" located next to the executing assembly. For legacy reasons it also looks in the app.config file. If the ontology files are in a different path, this can be supplied as a base path.. Declaration [Obsolete(\"This method will be removed in the future. Use InitializeFromConfiguration() instead.\")] public virtual void LoadOntologySettings(string configPath = null, string sourceDir = null) Parameters Type Name Description System.String configPath Load a specific configuration file. System.String sourceDir If given, this function tries to load the ontologies from this folder. | Improve this Doc View Source Read(Stream, Uri, RdfSerializationFormat, Boolean) Loads a serialized graph from the given stream into the current store. See allowed RdfSerializationFormat . Declaration public abstract Uri Read(Stream stream, Uri graphUri, RdfSerializationFormat format, bool update) Parameters Type Name Description System.IO.Stream stream Stream containing a serialized graph System.Uri graphUri Uri of the graph in this store RdfSerializationFormat format Allowed formats System.Boolean update Pass false if you want to overwrite the existing data. True if you want to add the new data to the existing. Returns Type Description System.Uri | Improve this Doc View Source Read(Uri, Uri, RdfSerializationFormat, Boolean) Loads a serialized graph from the given location into the current store. See allowed RdfSerializationFormat . Declaration public abstract Uri Read(Uri modelUri, Uri url, RdfSerializationFormat format, bool update) Parameters Type Name Description System.Uri modelUri Uri of the graph in this store System.Uri url Location RdfSerializationFormat format Allowed formats System.Boolean update Pass false if you want to overwrite the existing data. True if you want to add the new data to the existing. Returns Type Description System.Uri | Improve this Doc View Source RemoveModel(IModel) Removes model from the store. Declaration public virtual void RemoveModel(IModel model) Parameters Type Name Description IModel model Handle of the model which is to be removed. | Improve this Doc View Source RemoveModel(Uri) Removes model from the store. Declaration public abstract void RemoveModel(Uri uri) Parameters Type Name Description System.Uri uri Uri of the model which is to be removed. | Improve this Doc View Source Write(Stream, Uri, RdfSerializationFormat) Writes a serialized graph to the given stream. See allowed RdfSerializationFormat . Declaration public abstract void Write(Stream fs, Uri graphUri, RdfSerializationFormat format) Parameters Type Name Description System.IO.Stream fs Stream to which the content should be written. System.Uri graphUri Uri fo the graph in this store RdfSerializationFormat format Allowed formats Implements IStore System.IDisposable"
  },
  "api/Semiodesk.Trinity.StoreFactory.html": {
    "href": "api/Semiodesk.Trinity.StoreFactory.html",
    "title": "Class StoreFactory",
    "keywords": "Class StoreFactory This is the factory for object implementing the IStore interface. If you want to use your own store, you can load the assembly containing the provider with the LoadProvider method. Inheritance System.Object StoreFactory Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class StoreFactory Methods | Improve this Doc View Source CreateStore(String) Creates a store from the given connection string. Declaration public static IStore CreateStore(string connectionString) Parameters Type Name Description System.String connectionString Returns Type Description IStore | Improve this Doc View Source CreateStoreFromConfiguration(String) Tries to read a connection string with the given name from the configuration. If no name was given, the first compatible connection string is used. Declaration public static IStore CreateStoreFromConfiguration(string name = null) Parameters Type Name Description System.String name Returns Type Description IStore | Improve this Doc View Source LoadProvider(FileInfo) Tries to load a store provider from the given assembly. Declaration public static bool LoadProvider(FileInfo assemblyFile) Parameters Type Name Description System.IO.FileInfo assemblyFile Returns Type Description System.Boolean | Improve this Doc View Source LoadProvider(Assembly) Declaration public static bool LoadProvider(Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly Returns Type Description System.Boolean | Improve this Doc View Source LoadProvider(String) Tries to load a store provider from the given assembly. Declaration public static bool LoadProvider(string assemblyPath) Parameters Type Name Description System.String assemblyPath Returns Type Description System.Boolean | Improve this Doc View Source TestConnectionString(String) Tests if the given connection string is valid. Declaration public static bool TestConnectionString(string connectionString) Parameters Type Name Description System.String connectionString Returns Type Description System.Boolean"
  },
  "api/Semiodesk.Trinity.Collections.AsyncVirtualizingSparqlCollection-1.html": {
    "href": "api/Semiodesk.Trinity.Collections.AsyncVirtualizingSparqlCollection-1.html",
    "title": "Class AsyncVirtualizingSparqlCollection<T>",
    "keywords": "Class AsyncVirtualizingSparqlCollection<T> An generic asynchrous virtualizing collection for sparql queries. Inheritance System.Object VirtualizingCollection <T> AsyncVirtualizingCollection <T> AsyncVirtualizingSparqlCollection<T> Implements System.Collections.Generic.IList <T> System.Collections.Generic.ICollection <T> System.Collections.Generic.IEnumerable <T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable System.Collections.Specialized.INotifyCollectionChanged System.ComponentModel.INotifyPropertyChanged Inherited Members AsyncVirtualizingCollection<T>.SynchronizationContext AsyncVirtualizingCollection<T>.IsLoading AsyncVirtualizingCollection<T>.LoadCount() AsyncVirtualizingCollection<T>.LoadPage(Int32) AsyncVirtualizingCollection<T>.CollectionChanged AsyncVirtualizingCollection<T>.PropertyChanged VirtualizingCollection<T>._pageSize VirtualizingCollection<T>._pageTimeout VirtualizingCollection<T>.PageSize VirtualizingCollection<T>.PageTimeout VirtualizingCollection<T>.Count VirtualizingCollection<T>.SyncRoot VirtualizingCollection<T>.IsSynchronized VirtualizingCollection<T>.IsReadOnly VirtualizingCollection<T>.IsFixedSize VirtualizingCollection<T>.Item[Int32] VirtualizingCollection<T>.IList.Item[Int32] VirtualizingCollection<T>.GetEnumerator() VirtualizingCollection<T>.IEnumerable.GetEnumerator() VirtualizingCollection<T>.Add(T) VirtualizingCollection<T>.IList.Add(Object) VirtualizingCollection<T>.IList.Contains(Object) VirtualizingCollection<T>.Contains(T) VirtualizingCollection<T>.Clear() VirtualizingCollection<T>.IList.IndexOf(Object) VirtualizingCollection<T>.IndexOf(T) VirtualizingCollection<T>.Insert(Int32, T) VirtualizingCollection<T>.IList.Insert(Int32, Object) VirtualizingCollection<T>.RemoveAt(Int32) VirtualizingCollection<T>.IList.Remove(Object) VirtualizingCollection<T>.Remove(T) VirtualizingCollection<T>.CopyTo(T[], Int32) VirtualizingCollection<T>.ICollection.CopyTo(Array, Int32) VirtualizingCollection<T>.CleanUpPages() VirtualizingCollection<T>.PopulatePage(Int32, IList<T>) VirtualizingCollection<T>.RequestPage(Int32) VirtualizingCollection<T>.FetchPage(Int32) VirtualizingCollection<T>.FetchCount() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity.Collections Assembly : Semiodesk.Trinity.dll Syntax public class AsyncVirtualizingSparqlCollection<T> : AsyncVirtualizingCollection<T>, IList<T>, ICollection<T>, IEnumerable<T>, IList, ICollection, IEnumerable, INotifyCollectionChanged, INotifyPropertyChanged where T : Resource Type Parameters Name Description T Constructors | Improve this Doc View Source AsyncVirtualizingSparqlCollection(IModel, SparqlQuery, Boolean) Initializes a new instance of the AsyncVirtualizingSparqlCollection<T> class. Declaration public AsyncVirtualizingSparqlCollection(IModel model, SparqlQuery query, bool inferenceEnabled = false) Parameters Type Name Description IModel model SparqlQuery query System.Boolean inferenceEnabled | Improve this Doc View Source AsyncVirtualizingSparqlCollection(IModel, SparqlQuery, Int32, Boolean) Initializes a new instance of the AsyncVirtualizingSparqlCollection<T> class. Declaration public AsyncVirtualizingSparqlCollection(IModel model, SparqlQuery query, int pageSize, bool inferenceEnabled = true) Parameters Type Name Description IModel model SparqlQuery query System.Int32 pageSize System.Boolean inferenceEnabled | Improve this Doc View Source AsyncVirtualizingSparqlCollection(IModel, SparqlQuery, Int32, Int32, Boolean) Initializes a new instance of the AsyncVirtualizingSparqlCollection<T> class. Declaration public AsyncVirtualizingSparqlCollection(IModel model, SparqlQuery query, int pageSize, int pageTimeout, bool inferenceEnabled = true) Parameters Type Name Description IModel model SparqlQuery query System.Int32 pageSize System.Int32 pageTimeout System.Boolean inferenceEnabled Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable System.Collections.Specialized.INotifyCollectionChanged System.ComponentModel.INotifyPropertyChanged"
  },
  "api/Semiodesk.Trinity.IModel.html": {
    "href": "api/Semiodesk.Trinity.IModel.html",
    "title": "Interface IModel",
    "keywords": "Interface IModel An interface for classes which provide functionality to manage a set of resources. Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public interface IModel Properties | Improve this Doc View Source IsEmpty True if the model is empty. Declaration [JsonIgnore] bool IsEmpty { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Uri Uri of this model. Declaration UriRef Uri { get; } Property Value Type Description UriRef Methods | Improve this Doc View Source AddResource(IResource, ITransaction) Adds an existing resource to the model and its backing RDF store. The resulting resource supports the use of the Commit() method. Declaration IResource AddResource(IResource resource, ITransaction transaction = null) Parameters Type Name Description IResource resource The resource to be added to the model. ITransaction transaction Transaction associated with the action. Returns Type Description IResource The resource which is now connected to the current model. | Improve this Doc View Source AddResource<T>(T, ITransaction) Adds an existing resource to the model and its backing RDF store. The resulting resource supports the use of the Commit() method. Declaration T AddResource<T>(T resource, ITransaction transaction = null) where T : Resource Parameters Type Name Description T resource The resource to be added to the model. ITransaction transaction Transaction associated with this action. Returns Type Description T The resource which is now connected to the current model. Type Parameters Name Description T | Improve this Doc View Source AsQueryable<T>(Boolean) TODO Declaration IQueryable<T> AsQueryable<T>(bool inferenceEnabled = false) where T : Resource Parameters Type Name Description System.Boolean inferenceEnabled Returns Type Description System.Linq.IQueryable <T> Type Parameters Name Description T | Improve this Doc View Source BeginTransaction(IsolationLevel) Starts a transaction which can be used to group more queries together to be executed as one. Declaration ITransaction BeginTransaction(IsolationLevel isolationLevel) Parameters Type Name Description System.Data.IsolationLevel isolationLevel Isolation level used to lock the database. Returns Type Description ITransaction A handle to the transaction. | Improve this Doc View Source Clear() Removes all elements from the model. Declaration void Clear() | Improve this Doc View Source ContainsResource(IResource, ITransaction) Indicates wheter a given resource is part of the model. Declaration bool ContainsResource(IResource resource, ITransaction transaction = null) Parameters Type Name Description IResource resource Resource that should be looked up in the model. ITransaction transaction Transaction associated with this action. Returns Type Description System.Boolean True if the resource is part of the model, False if not. | Improve this Doc View Source ContainsResource(Uri, ITransaction) Indicates wheter a given resource is part of the model. Declaration bool ContainsResource(Uri uri, ITransaction transaction = null) Parameters Type Name Description System.Uri uri A Uniform Resource Identifier. ITransaction transaction Transaction associated with this action. Returns Type Description System.Boolean True if the resource is part of the model, False if not. | Improve this Doc View Source CreateResource(String, ITransaction) Creates a new resource in the model and its backing RDF store. Declaration IResource CreateResource(string format = \"http://semiodesk.com/id/{0}\", ITransaction transaction = null) Parameters Type Name Description System.String format The format string from which a globally unique identifier URI should be generated from. ITransaction transaction Transaction associated with this action. Returns Type Description IResource An instance of the given object type wrapping the newly created resource. Exceptions Type Condition System.ArgumentException Throws ArgumentException if a resource with the given URI already exists in the model. | Improve this Doc View Source CreateResource(Type, String, ITransaction) Creates a new resource in the model and its backing RDF store. Provides a resource object of the given type. Declaration object CreateResource(Type type, string format = \"http://semiodesk.com/id/{0}\", ITransaction transaction = null) Parameters Type Name Description System.Type type The concrete type of the resource. This must be a subclass of resource. System.String format The format of the resulting uri. ITransaction transaction Transaction associated with this action. Returns Type Description System.Object An instance of the given object type wrapping the newly created resource. Exceptions Type Condition System.ArgumentException Throws ArgumentException if a resource with the given URI already exists in the model. | Improve this Doc View Source CreateResource(Uri, ITransaction) Creates a new resource in the model and its backing RDF store. Declaration IResource CreateResource(Uri uri, ITransaction transaction = null) Parameters Type Name Description System.Uri uri A Uniform Resource Identifier. ITransaction transaction Transaction associated with this action. Returns Type Description IResource The newly created resource. Exceptions Type Condition System.ArgumentException Throws ArgumentException if a resource with the given URI already exists in the model. | Improve this Doc View Source CreateResource(Uri, Type, ITransaction) Creates a new resource in the model and its backing RDF store. Provides a resource object of the given type. This method can be used to create a resource of a type which was asserted at runtime. Declaration object CreateResource(Uri uri, Type t, ITransaction transaction = null) Parameters Type Name Description System.Uri uri A Uniform Resource Identifier. System.Type t Type of the resource object. Must be derived from Resource. ITransaction transaction Transaction associated with this action. Returns Type Description System.Object An instance of the given object type wrapping the newly created resource. Exceptions Type Condition System.Exception Throws ArgumentException if a resource with the given URI already exists in the model. | Improve this Doc View Source CreateResource<T>(String, ITransaction) Creates a new resource in the model and its backing RDF store. Provides a resource object of the given type. Declaration T CreateResource<T>(string format = \"http://semiodesk.com/id/{0}\", ITransaction transaction = null) where T : Resource Parameters Type Name Description System.String format The format string from which a globally unique identifier URI should be generated from. ITransaction transaction Transaction associated with this action. Returns Type Description T An instance of the given object type wrapping the newly created resource. Type Parameters Name Description T Type of the resource object. Must be derived from Resource. Exceptions Type Condition System.ArgumentException Throws ArgumentException if a resource with the given URI already exists in the model. | Improve this Doc View Source CreateResource<T>(Uri, ITransaction) Creates a new resource in the model and its backing RDF store. Provides a resource object of the given type. Declaration T CreateResource<T>(Uri uri, ITransaction transaction = null) where T : Resource Parameters Type Name Description System.Uri uri A Uniform Resource Identifier. ITransaction transaction Transaction associated with this action. Returns Type Description T An instance of the given object type wrapping the newly created resource. Type Parameters Name Description T Type of the resource object. Must be derived from Resource. Exceptions Type Condition System.ArgumentException Throws ArgumentException if a resource with the given URI already exists in the model. | Improve this Doc View Source DeleteResource(IResource, ITransaction) Removes the given resource from the model and its backing RDF store. Note that there is no verification that the given resource and its stored represenation have identical properties. Declaration void DeleteResource(IResource resource, ITransaction transaction = null) Parameters Type Name Description IResource resource Resource that is to be removed from the model. ITransaction transaction Transaction associated with this action. | Improve this Doc View Source DeleteResource(Uri, ITransaction) Removes the given resource from the model and its backing RDF store. Note that there is no verification that the given resource and its stored represenation have identical properties. Declaration void DeleteResource(Uri uri, ITransaction transaction = null) Parameters Type Name Description System.Uri uri A Uniform Resource Identifier. ITransaction transaction The transaction associated with this action. | Improve this Doc View Source ExecuteQuery(ISparqlQuery, Boolean, ITransaction) Execute a SPARQL query against the model. Declaration ISparqlQueryResult ExecuteQuery(ISparqlQuery query, bool inferenceEnabled = false, ITransaction transaction = null) Parameters Type Name Description ISparqlQuery query A SparqlQuery object. System.Boolean inferenceEnabled Modifier to enable inferencing. Default is false. ITransaction transaction Transaction associated with this action. Returns Type Description ISparqlQueryResult A SPARQL query result object. | Improve this Doc View Source ExecuteQuery(ResourceQuery, Boolean, ITransaction) Execute a ResourceQuery against the model. Declaration IResourceQueryResult ExecuteQuery(ResourceQuery query, bool inferenceEnabled = false, ITransaction transaction = null) Parameters Type Name Description ResourceQuery query A ResourceQuery object. System.Boolean inferenceEnabled Modifier to enable inferencing. Default is false. ITransaction transaction Transaction associated with the action. Returns Type Description IResourceQueryResult A SPARQL query result object. | Improve this Doc View Source ExecuteUpdate(SparqlUpdate, ITransaction) Execute a SparqlUpdate against the model. Declaration void ExecuteUpdate(SparqlUpdate update, ITransaction transaction = null) Parameters Type Name Description SparqlUpdate update A sparql update object. ITransaction transaction Transaction associated with this action. | Improve this Doc View Source GetBindings(ISparqlQuery, Boolean, ITransaction) Executes a SPARQL query and provides an enumeration of matching resources. Declaration IEnumerable<BindingSet> GetBindings(ISparqlQuery query, bool inferenceEnabled = false, ITransaction transaction = null) Parameters Type Name Description ISparqlQuery query A SparqlQuery object. System.Boolean inferenceEnabled Modifier to enable inferencing. Default is false. ITransaction transaction Transaction associated with the action. Returns Type Description System.Collections.Generic.IEnumerable < BindingSet > An enumeration of resources that match the given query. | Improve this Doc View Source GetResource(IResource, ITransaction) Retrieves a resource from the model. Declaration IResource GetResource(IResource resource, ITransaction transaction = null) Parameters Type Name Description IResource resource The instance of IResource to be retrieved. ITransaction transaction Transaction associated with this action. Returns Type Description IResource A resource with all asserted properties. | Improve this Doc View Source GetResource(Uri, ITransaction) Retrieves a resource from the model. Declaration IResource GetResource(Uri uri, ITransaction transaction = null) Parameters Type Name Description System.Uri uri A Uniform Resource Identifier. ITransaction transaction Transaction associated with this action. Returns Type Description IResource A resource with all asserted properties. | Improve this Doc View Source GetResource(Uri, Type, ITransaction) Retrieves a resource from the model. Provides a resource object of the given type. Declaration object GetResource(Uri uri, Type type, ITransaction transaction = null) Parameters Type Name Description System.Uri uri A Uniform Resource Identifier. System.Type type The type the resource should have. ITransaction transaction Transaction associated with this action. Returns Type Description System.Object A resource with all asserted properties. | Improve this Doc View Source GetResource<T>(IResource, ITransaction) Retrieves a resource from the model. Declaration T GetResource<T>(IResource resource, ITransaction transaction = null) where T : Resource Parameters Type Name Description IResource resource The instance of IResource to be retrieved. ITransaction transaction Transaction associated with this action. Returns Type Description T A resource with all asserted properties. Type Parameters Name Description T | Improve this Doc View Source GetResource<T>(Uri, ITransaction) Retrieves a resource from the model. Provides a resource object of the given type. Declaration T GetResource<T>(Uri uri, ITransaction transaction = null) where T : Resource Parameters Type Name Description System.Uri uri A Uniform Resource Identifier. ITransaction transaction Transaction associated with this action. Returns Type Description T A resource with all asserted properties. Type Parameters Name Description T | Improve this Doc View Source GetResources(ISparqlQuery, Boolean, ITransaction) Executes a SPARQL query and provides an enumeration of matching resources. Declaration IEnumerable<Resource> GetResources(ISparqlQuery query, bool inferenceEnabled = false, ITransaction transaction = null) Parameters Type Name Description ISparqlQuery query A SparqlQuery object. System.Boolean inferenceEnabled Modifier to enable inferencing. Default is false. ITransaction transaction Transaction associated with the action. Returns Type Description System.Collections.Generic.IEnumerable < Resource > An enumeration of resources that match the given query. | Improve this Doc View Source GetResources(ResourceQuery, Boolean, ITransaction) Executes a resource query and provides an enumeration of matching resources. Declaration IEnumerable<Resource> GetResources(ResourceQuery query, bool inferenceEnabled = false, ITransaction transaction = null) Parameters Type Name Description ResourceQuery query A ResourceQuery object. System.Boolean inferenceEnabled Modifier to enable inferencing. Default is false. ITransaction transaction Transaction associated with the action. Returns Type Description System.Collections.Generic.IEnumerable < Resource > An enumeration of resources that match the given query. | Improve this Doc View Source GetResources<T>(ISparqlQuery, Boolean, ITransaction) Executes a SPARQL query and provides an enumeration of matching resources. Declaration IEnumerable<T> GetResources<T>(ISparqlQuery query, bool inferenceEnabled = false, ITransaction transaction = null) where T : Resource Parameters Type Name Description ISparqlQuery query A SparqlQuery object. System.Boolean inferenceEnabled Modifier to enable inferencing. Default is false. ITransaction transaction Transaction associated with the action. Returns Type Description System.Collections.Generic.IEnumerable <T> An enumeration of resources that match the given query. Type Parameters Name Description T | Improve this Doc View Source GetResources<T>(ResourceQuery, Boolean, ITransaction) Executes a resource query and provides an enumeration of matching resources. Declaration IEnumerable<T> GetResources<T>(ResourceQuery query, bool inferenceEnabled = false, ITransaction transaction = null) where T : Resource Parameters Type Name Description ResourceQuery query A ResourceQuery object. System.Boolean inferenceEnabled Modifier to enable inferencing. Default is false. ITransaction transaction Transaction associated with the action. Returns Type Description System.Collections.Generic.IEnumerable <T> An enumeration of resources that match the given query. Type Parameters Name Description T | Improve this Doc View Source GetResources<T>(Boolean, ITransaction) Returns a enumeration of all resources that match the given type. Declaration IEnumerable<T> GetResources<T>(bool inferenceEnabled = false, ITransaction transaction = null) where T : Resource Parameters Type Name Description System.Boolean inferenceEnabled Modifier to enable inferencing. Default is false. ITransaction transaction Transaction associated with the action. Returns Type Description System.Collections.Generic.IEnumerable <T> An enumeration of resources that match the given query. Type Parameters Name Description T | Improve this Doc View Source Read(Stream, RdfSerializationFormat, Boolean) Imports the contents of a graph serialized in the stream to this model. Declaration bool Read(Stream stream, RdfSerializationFormat format, bool update) Parameters Type Name Description System.IO.Stream stream The stream containing the serialization RdfSerializationFormat format Format of the serialization System.Boolean update True to update the model, false to replace the data. Returns Type Description System.Boolean True if the contents of the model were imported, False if not. | Improve this Doc View Source Read(Uri, RdfSerializationFormat, Boolean) Imports the contents of a model located by the given URL. The method supports importing files and other models stored in the local RDF store. Declaration bool Read(Uri url, RdfSerializationFormat format, bool update) Parameters Type Name Description System.Uri url A uniform resource locator. RdfSerializationFormat format The serialization format. System.Boolean update True to update the model, false to replace the data. Returns Type Description System.Boolean True if the contents of the model were imported, False if not. | Improve this Doc View Source UpdateResource(Resource, ITransaction) Updates a resource with it's current state in the model. Declaration void UpdateResource(Resource resource, ITransaction transaction = null) Parameters Type Name Description Resource resource ITransaction transaction | Improve this Doc View Source Write(Stream, RdfSerializationFormat) Serializes the contents of the model and provides a memory stream. Declaration void Write(Stream fs, RdfSerializationFormat format) Parameters Type Name Description System.IO.Stream fs The file stream to write to. RdfSerializationFormat format The serialization format."
  },
  "api/Semiodesk.Trinity.Serialization.html": {
    "href": "api/Semiodesk.Trinity.Serialization.html",
    "title": "Namespace Semiodesk.Trinity.Serialization",
    "keywords": "Namespace Semiodesk.Trinity.Serialization Classes JsonResourceConverter JsonResourceSerializerSettings"
  },
  "api/Semiodesk.Trinity.StatementPattern.html": {
    "href": "api/Semiodesk.Trinity.StatementPattern.html",
    "title": "Class StatementPattern",
    "keywords": "Class StatementPattern Inheritance System.Object StatementPattern Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class StatementPattern Constructors | Improve this Doc View Source StatementPattern(Uri, Uri, Object) Declaration public StatementPattern(Uri s, Uri p, object o) Parameters Type Name Description System.Uri s System.Uri p System.Object o Properties | Improve this Doc View Source FilterOperation Declaration public FilterOperation FilterOperation { get; protected set; } Property Value Type Description FilterOperation | Improve this Doc View Source Object Declaration public object Object { get; protected set; } Property Value Type Description System.Object | Improve this Doc View Source Predicate Declaration public Uri Predicate { get; protected set; } Property Value Type Description System.Uri | Improve this Doc View Source SortDirection Declaration public SortDirection SortDirection { get; protected set; } Property Value Type Description SortDirection | Improve this Doc View Source SortPriority Declaration public int SortPriority { get; protected set; } Property Value Type Description System.Int32 | Improve this Doc View Source Subject Declaration public Uri Subject { get; protected set; } Property Value Type Description System.Uri Methods | Improve this Doc View Source Contains(String, Boolean) Declaration public StatementPattern Contains(string value, bool caseSensitive = false) Parameters Type Name Description System.String value System.Boolean caseSensitive Returns Type Description StatementPattern | Improve this Doc View Source Equal(Object) Declaration public StatementPattern Equal(object value) Parameters Type Name Description System.Object value Returns Type Description StatementPattern | Improve this Doc View Source GreaterOrEqual(Object) Declaration public StatementPattern GreaterOrEqual(object value) Parameters Type Name Description System.Object value Returns Type Description StatementPattern | Improve this Doc View Source GreaterThan(Object) Declaration public StatementPattern GreaterThan(object value) Parameters Type Name Description System.Object value Returns Type Description StatementPattern | Improve this Doc View Source LessOrEqual(Object) Declaration public StatementPattern LessOrEqual(object value) Parameters Type Name Description System.Object value Returns Type Description StatementPattern | Improve this Doc View Source LessThan(Object) Declaration public StatementPattern LessThan(object value) Parameters Type Name Description System.Object value Returns Type Description StatementPattern | Improve this Doc View Source NotEqual(Object) Declaration public StatementPattern NotEqual(object value) Parameters Type Name Description System.Object value Returns Type Description StatementPattern | Improve this Doc View Source SortAscending(Int32) Declaration public StatementPattern SortAscending(int priority = -1) Parameters Type Name Description System.Int32 priority Returns Type Description StatementPattern | Improve this Doc View Source SortDescending(Int32) Declaration public StatementPattern SortDescending(int priority = -1) Parameters Type Name Description System.Int32 priority Returns Type Description StatementPattern"
  },
  "api/Semiodesk.Trinity.Store.dotNetRDFStore.html": {
    "href": "api/Semiodesk.Trinity.Store.dotNetRDFStore.html",
    "title": "Class dotNetRDFStore",
    "keywords": "Class dotNetRDFStore Inheritance System.Object StoreBase dotNetRDFStore Implements IStore System.IDisposable Inherited Members StoreBase.Log StoreBase.RemoveModel(IModel) StoreBase.ContainsModel(IModel) StoreBase.LoadOntologySettings(String, String) StoreBase.InitializeFromConfiguration(String, String) StoreBase.LoadConfiguration(String) StoreBase.LoadOntologies(IConfiguration, String) StoreBase.CreateModel(Uri) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity.Store Assembly : Semiodesk.Trinity.dll Syntax public class dotNetRDFStore : StoreBase, IStore, IDisposable Constructors | Improve this Doc View Source dotNetRDFStore(String[]) Creates a new dotNetRDFStore. Declaration public dotNetRDFStore(string[] schemes) Parameters Type Name Description System.String [] schemes Properties | Improve this Doc View Source IsReady Indicates if the store is ready to be queried. Declaration public override bool IsReady { get; protected set; } Property Value Type Description System.Boolean Overrides StoreBase.IsReady Methods | Improve this Doc View Source BeginTransaction(IsolationLevel) Declaration public override ITransaction BeginTransaction(IsolationLevel isolationLevel) Parameters Type Name Description System.Data.IsolationLevel isolationLevel Returns Type Description ITransaction Overrides StoreBase.BeginTransaction(IsolationLevel) | Improve this Doc View Source ContainsModel(Uri) Query if the model exists in the store. OBSOLETE: This method does not list empty models. At the moment you should just call GetModel() and test for IsEmpty() Declaration [Obsolete(\"This method does not list empty models. At the moment you should just call GetModel() and test for IsEmpty()\")] public override bool ContainsModel(Uri uri) Parameters Type Name Description System.Uri uri Uri of the model which is to be queried. Returns Type Description System.Boolean Overrides StoreBase.ContainsModel(Uri) | Improve this Doc View Source CreateModelGroup(IModel[]) Creates a model group which allows for queries to be made on multiple models at once. Declaration public IModelGroup CreateModelGroup(params IModel[] models) Parameters Type Name Description IModel [] models Returns Type Description IModelGroup | Improve this Doc View Source CreateModelGroup(Uri[]) Creates a model group which allows for queries to be made on multiple models at once. Declaration public override IModelGroup CreateModelGroup(params Uri[] models) Parameters Type Name Description System.Uri [] models Returns Type Description IModelGroup Overrides StoreBase.CreateModelGroup(Uri[]) | Improve this Doc View Source Dispose() Closes the store. It is not usable after this call. Declaration public override void Dispose() Overrides StoreBase.Dispose() | Improve this Doc View Source ExecuteNonQuery(SparqlUpdate, ITransaction) Executes a query on the store which does not expect a result. Declaration public override void ExecuteNonQuery(SparqlUpdate query, ITransaction transaction = null) Parameters Type Name Description SparqlUpdate query The update query ITransaction transaction An associated transaction Overrides StoreBase.ExecuteNonQuery(SparqlUpdate, ITransaction) | Improve this Doc View Source ExecuteQuery(ISparqlQuery, ITransaction) Executes a SparqlQuery on the store. Declaration public override ISparqlQueryResult ExecuteQuery(ISparqlQuery query, ITransaction transaction = null) Parameters Type Name Description ISparqlQuery query ITransaction transaction Returns Type Description ISparqlQueryResult Overrides StoreBase.ExecuteQuery(ISparqlQuery, ITransaction) | Improve this Doc View Source ExecuteQuery(String) This method queries the dotNetRdf store directly. Declaration public object ExecuteQuery(string query) Parameters Type Name Description System.String query Returns Type Description System.Object | Improve this Doc View Source GetModel(Uri) Gets a handle to a model in the store. Declaration public override IModel GetModel(Uri uri) Parameters Type Name Description System.Uri uri Uri of the model. Returns Type Description IModel Overrides StoreBase.GetModel(Uri) | Improve this Doc View Source ListModels() Lists all models in the store. Declaration public override IEnumerable<IModel> ListModels() Returns Type Description System.Collections.Generic.IEnumerable < IModel > All handles to existing models. Overrides StoreBase.ListModels() | Improve this Doc View Source Read(Stream, Uri, RdfSerializationFormat, Boolean) Loads a serialized graph from the given stream into the current store. See allowed RdfSerializationFormat . Declaration public override Uri Read(Stream stream, Uri graphUri, RdfSerializationFormat format, bool update) Parameters Type Name Description System.IO.Stream stream Stream containing a serialized graph System.Uri graphUri Uri of the graph in this store RdfSerializationFormat format Allowed formats System.Boolean update Pass false if you want to overwrite the existing data. True if you want to add the new data to the existing. Returns Type Description System.Uri Overrides StoreBase.Read(Stream, Uri, RdfSerializationFormat, Boolean) | Improve this Doc View Source Read(Uri, Uri, RdfSerializationFormat, Boolean) Loads a serialized graph from the given location into the current store. See allowed RdfSerializationFormat . Declaration public override Uri Read(Uri graphUri, Uri url, RdfSerializationFormat format, bool update) Parameters Type Name Description System.Uri graphUri Uri of the graph in this store System.Uri url Location RdfSerializationFormat format Allowed formats System.Boolean update Pass false if you want to overwrite the existing data. True if you want to add the new data to the existing. Returns Type Description System.Uri Overrides StoreBase.Read(Uri, Uri, RdfSerializationFormat, Boolean) | Improve this Doc View Source RemoveModel(Uri) Removes model from the store. Declaration public override void RemoveModel(Uri uri) Parameters Type Name Description System.Uri uri Uri of the model which is to be removed. Overrides StoreBase.RemoveModel(Uri) | Improve this Doc View Source TryParse(TextReader, IGraph, RdfSerializationFormat) Declaration public static void TryParse(TextReader reader, IGraph graph, RdfSerializationFormat format) Parameters Type Name Description System.IO.TextReader reader VDS.RDF.IGraph graph RdfSerializationFormat format | Improve this Doc View Source Write(Stream, Uri, RdfSerializationFormat) Writes a serialized graph to the given stream. See allowed RdfSerializationFormat . Declaration public override void Write(Stream stream, Uri graphUri, RdfSerializationFormat format) Parameters Type Name Description System.IO.Stream stream Stream to which the content should be written. System.Uri graphUri Uri fo the graph in this store RdfSerializationFormat format Allowed formats Overrides StoreBase.Write(Stream, Uri, RdfSerializationFormat) Implements IStore System.IDisposable"
  },
  "api/Semiodesk.Trinity.Store.Virtuoso.VirtuosoStoreProvider.html": {
    "href": "api/Semiodesk.Trinity.Store.Virtuoso.VirtuosoStoreProvider.html",
    "title": "Class VirtuosoStoreProvider",
    "keywords": "Class VirtuosoStoreProvider Inheritance System.Object StoreProvider VirtuosoStoreProvider Inherited Members StoreProvider.Name StoreProvider.ConfigurationOptions StoreProvider.GetStore(Dictionary<String, String>) Namespace : Semiodesk.Trinity.Store.Virtuoso Assembly : Semiodesk.Trinity.Virtuoso.dll Syntax public class VirtuosoStoreProvider : StoreProvider Constructors | Improve this Doc View Source VirtuosoStoreProvider() Declaration public VirtuosoStoreProvider() Methods | Improve this Doc View Source GetStore(Dictionary<String, String>) Declaration public override IStore GetStore(Dictionary<string, string> configurationDictionary) Parameters Type Name Description Dictionary < System.String , System.String > configurationDictionary Returns Type Description IStore"
  },
  "api/Semiodesk.Trinity.Store.Virtuoso.VirtuosoTransaction.html": {
    "href": "api/Semiodesk.Trinity.Store.Virtuoso.VirtuosoTransaction.html",
    "title": "Class VirtuosoTransaction",
    "keywords": "Class VirtuosoTransaction Virtuoso transactions support For more information refer to : http://docs.openlinksw.com/virtuoso/coredbengine.html#Locking http://docs.openlinksw.com/virtuoso/ptune.html#TRANSACTION_ISOLATION_LEVELS Auto row commit = DEFINE sql:log-enable 2 Inheritance System.Object VirtuosoTransaction Implements ITransaction System.IDisposable Namespace : Semiodesk.Trinity.Store.Virtuoso Assembly : Semiodesk.Trinity.Virtuoso.dll Syntax public class VirtuosoTransaction : object, ITransaction, IDisposable Fields | Improve this Doc View Source Transaction Declaration public OpenLink.Data.Virtuoso.VirtuosoTransaction Transaction Field Value Type Description OpenLink.Data.Virtuoso.VirtuosoTransaction Properties | Improve this Doc View Source IsolationLevel Declaration public System.Data.IsolationLevel IsolationLevel { get; } Property Value Type Description System.Data.IsolationLevel Methods | Improve this Doc View Source Commit() Declaration public void Commit() | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Rollback() Declaration public void Rollback() Events | Improve this Doc View Source OnFinishedTransaction Declaration public event FinishedTransactionEvent OnFinishedTransaction Event Type Type Description FinishedTransactionEvent Implements ITransaction System.IDisposable"
  },
  "api/Semiodesk.Trinity.XsdTypeMapper.ObjectSerializationDelegate.html": {
    "href": "api/Semiodesk.Trinity.XsdTypeMapper.ObjectSerializationDelegate.html",
    "title": "Delegate XsdTypeMapper.ObjectSerializationDelegate",
    "keywords": "Delegate XsdTypeMapper.ObjectSerializationDelegate The object serialization delegate Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public delegate string ObjectSerializationDelegate(object obj); Parameters Type Name Description System.Object obj Returns Type Description System.String"
  },
  "api/Semiodesk.Trinity.XsdTypeMapper.html": {
    "href": "api/Semiodesk.Trinity.XsdTypeMapper.html",
    "title": "Class XsdTypeMapper",
    "keywords": "Class XsdTypeMapper Provides functionality for the serialization and deserialization of .NET objects to XML Schema encoded strings. Inheritance System.Object XsdTypeMapper Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class XsdTypeMapper Fields | Improve this Doc View Source NativeToXsd Maps .NET types to XSD type URIs. Declaration protected static Dictionary<Type, Uri> NativeToXsd Field Value Type Description System.Collections.Generic.Dictionary < System.Type , System.Uri > | Improve this Doc View Source Serializers Maps .NET types to object serialization delegates. Declaration protected static Dictionary<Type, XsdTypeMapper.ObjectSerializationDelegate> Serializers Field Value Type Description System.Collections.Generic.Dictionary < System.Type , XsdTypeMapper.ObjectSerializationDelegate > | Improve this Doc View Source XsdToNative Maps XSD type URIs to .NET types. Declaration protected static Dictionary<string, Type> XsdToNative Field Value Type Description System.Collections.Generic.Dictionary < System.String , System.Type > Methods | Improve this Doc View Source DeserializeBool(String) Deserialize a bool from a string. Declaration public static object DeserializeBool(string str) Parameters Type Name Description System.String str The serialized bool Returns Type Description System.Object A bool value | Improve this Doc View Source DeserializeByteArray(String) Deserialize a ByteArray from a string. Declaration public static object DeserializeByteArray(string str) Parameters Type Name Description System.String str The serialized ByteArray Returns Type Description System.Object A ByteArray value | Improve this Doc View Source DeserializeDateTime(String) Deserialize a DateTime from a string. Declaration public static object DeserializeDateTime(string str) Parameters Type Name Description System.String str The serialized DateTime Returns Type Description System.Object A DateTime value | Improve this Doc View Source DeserializeDecimal(String) Deserialize a decimal from a string. Declaration public static object DeserializeDecimal(string str) Parameters Type Name Description System.String str The serialized decimal Returns Type Description System.Object A decimal value | Improve this Doc View Source DeserializeDouble(String) Deserialize a double from a string. Declaration public static object DeserializeDouble(string str) Parameters Type Name Description System.String str The serialized double Returns Type Description System.Object A double value | Improve this Doc View Source DeserializeInt16(String) Deserialize an int16 from a string. Declaration public static object DeserializeInt16(string str) Parameters Type Name Description System.String str The serialized int16 Returns Type Description System.Object An int16 | Improve this Doc View Source DeserializeInt32(String) Deserialize an int32 from a string. Declaration public static object DeserializeInt32(string str) Parameters Type Name Description System.String str The serialized int32 Returns Type Description System.Object a int32 value | Improve this Doc View Source DeserializeInt64(String) Deserialize an int64 from a string. Declaration public static object DeserializeInt64(string str) Parameters Type Name Description System.String str The serialized int64 Returns Type Description System.Object A int64 value | Improve this Doc View Source DeserializeLiteralNode(BaseLiteralNode) Deserialize a LiteralNode from a string. Declaration public static object DeserializeLiteralNode(BaseLiteralNode node) Parameters Type Name Description VDS.RDF.BaseLiteralNode node The serialized LiteralNode Returns Type Description System.Object A LiteralNode value | Improve this Doc View Source DeserializeResource(String) Deserialize a Resource from a string. Declaration public static object DeserializeResource(string str) Parameters Type Name Description System.String str The serialized Resource Returns Type Description System.Object A Resource value | Improve this Doc View Source DeserializeSingle(String) Deserialize a single from a string. Declaration public static object DeserializeSingle(string str) Parameters Type Name Description System.String str The serialized single Returns Type Description System.Object A single value | Improve this Doc View Source DeserializeString(String) Deserialize string, nothing to do. Declaration public static object DeserializeString(string str) Parameters Type Name Description System.String str The string Returns Type Description System.Object The string | Improve this Doc View Source DeserializeString(String, Uri) Deserialize string with given type uri. Declaration public static object DeserializeString(string str, Uri typeUri) Parameters Type Name Description System.String str The value as string. System.Uri typeUri The xsd type. Returns Type Description System.Object The value in its correct type. | Improve this Doc View Source DeserializeUInt16(String) Deserialize an uint6 from a string. Declaration public static object DeserializeUInt16(string str) Parameters Type Name Description System.String str The serialized int64 Returns Type Description System.Object A uint16 value | Improve this Doc View Source DeserializeUInt32(String) Deserialize an int32 from a string. Declaration public static object DeserializeUInt32(string str) Parameters Type Name Description System.String str The serialized int32 Returns Type Description System.Object A int32 value | Improve this Doc View Source DeserializeUInt64(String) Deserialize an uint64 from a string. Declaration public static object DeserializeUInt64(string str) Parameters Type Name Description System.String str The serialized uint64 Returns Type Description System.Object A uint64 value | Improve this Doc View Source DeserializeUri(String) Deserialize a uri from a string. Declaration public static object DeserializeUri(string str) Parameters Type Name Description System.String str The serialized uri Returns Type Description System.Object A uri value | Improve this Doc View Source DeserializeXmlNode(XmlNode) Deserialize a XmlNode from a string. Declaration public static object DeserializeXmlNode(XmlNode node) Parameters Type Name Description System.Xml.XmlNode node The serialized XmlNode Returns Type Description System.Object A XmlNode value | Improve this Doc View Source GetTypeFromXsd(Uri) Provides the XML Schema type URI for a given .NET type. Declaration public static Type GetTypeFromXsd(Uri uri) Parameters Type Name Description System.Uri uri A xsd type uri. Returns Type Description System.Type A XML Schema type URI. | Improve this Doc View Source GetXsdTypeUri(Type) Provides the XML Schema type URI for a given .NET type. Declaration public static Uri GetXsdTypeUri(Type type) Parameters Type Name Description System.Type type A .NET type object. Returns Type Description System.Uri A XML Schema type URI. | Improve this Doc View Source HasXsdTypeUri(Type) Indicates if there is a registered XML Schema type URI for the given .NET type. Declaration public static bool HasXsdTypeUri(Type type) Parameters Type Name Description System.Type type A .NET type object. Returns Type Description System.Boolean true if there is a XML schema type, false otherwise. | Improve this Doc View Source SerializeBool(Object) Serialize a bool Declaration public static string SerializeBool(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.String | Improve this Doc View Source SerializeByteArray(Object) Serialize a byte array Declaration public static string SerializeByteArray(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.String | Improve this Doc View Source SerializeDateTime(Object) Serialize a DateTime Declaration public static string SerializeDateTime(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.String | Improve this Doc View Source SerializeDecimal(Object) Serialize a decimal Declaration public static string SerializeDecimal(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.String | Improve this Doc View Source SerializeDouble(Object) Serialize a double Declaration public static string SerializeDouble(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.String | Improve this Doc View Source SerializeInt16(Object) Serialize an Int16 Declaration public static string SerializeInt16(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.String | Improve this Doc View Source SerializeInt32(Object) Serialize an Int32 Declaration public static string SerializeInt32(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.String | Improve this Doc View Source SerializeInt64(Object) Serialize an Int64 Declaration public static string SerializeInt64(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.String | Improve this Doc View Source SerializeIResource(Object) Serialize an IResource Declaration public static string SerializeIResource(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.String | Improve this Doc View Source SerializeObject(Object) Serializes an object to an XML Schema encoded string. Declaration public static string SerializeObject(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.String | Improve this Doc View Source SerializeObject(Object, Type) Serializes an object forcd to a given type to an XML Schema encoded string. Declaration public static string SerializeObject(object obj, Type type) Parameters Type Name Description System.Object obj System.Type type Returns Type Description System.String | Improve this Doc View Source SerializeSingle(Object) Serialize a float Declaration public static string SerializeSingle(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.String | Improve this Doc View Source SerializeString(Object) Serialize a string Declaration public static string SerializeString(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.String | Improve this Doc View Source SerializeStringArray(Object) Serialize an array of strings Declaration public static string SerializeStringArray(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.String | Improve this Doc View Source SerializeStringCultureInfoTuple(Object) Serialize a tuple consisting of a string and its associated culture Declaration public static string SerializeStringCultureInfoTuple(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.String | Improve this Doc View Source SerializeUInt16(Object) Serialize an Uint16 Declaration public static string SerializeUInt16(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.String | Improve this Doc View Source SerializeUInt32(Object) Serialize an Uint32 Declaration public static string SerializeUInt32(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.String | Improve this Doc View Source SerializeUInt64(Object) Serialize an Uint64 Declaration public static string SerializeUInt64(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.String | Improve this Doc View Source SerializeUri(Object) Serialize an Uri Declaration public static string SerializeUri(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.String"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Documentation",
    "keywords": "Documentation We wanted to create a RDF API for C# and Mono that does not require the developer to work with the triple store by adding and removing triples manually. On the lowest level we offer a Resource-Property-Value interface. On the highest level, the developer can work with mapped classes. This makes the API perfect for developing user interfaces, as it supports data binding and modern application paradigms such as MVC / MVVM . Setup One of the core requirements for Semiodesk Trinity was that ontology terms need to be easily accessible from native .NET languages. If you are using the Semiodesk.Trinity.Modelling NuGet package you are ready to go. In a pre-compilation step, our framework generates a C# representation of the ontology in a the file obj/ontologies.g.cs . It creates classes for each given ontology. These classes contain basic information about the ontology: #!csharp string prefix = owl.Prefix; Uri ns = owl.Namespace; and all RDF classes and properties. #!csharp Class onto = owl.Ontology; // type contains the class with URI <http://www.w3.org/2002/07/owl#Ontology> string ontoString = OWL.Ontology; // ontoString contains the string constant \"http://www.w3.org/2002/07/owl#Ontology\" These can then be used to make queries, add values to resources or create class mappings. The convention is that lower case ontology classes (e.g. rdf) contains the Class and Property instances, upper case classes (e.g. RDF) contains the string representations neccessary for the attributes. The generation of the ontolgies can be configured in the App.config file. The following snippet shows an example how this looks like. #!xml <configuration> ... <configSections> <section name=\"TrinitySettings\" type=\"Semiodesk.Trinity.Configuration.TrinitySettings, Semiodesk.Trinity\" /> </configSections> <!-- Generate the ontology classes in the 'CliExample'-namespace --> <TrinitySettings namespace=\"CliExample\"> <OntologySettings> <!--Generate the class 'CliExample.rdf' from the contents of the file Ontologies\\rdf.rdf --> <Ontology Uri=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" Prefix=\"rdf\"> <FileSource Location=\"Ontologies\\rdf.rdf\" /> </Ontology> </OntologySettings> </TrinitySettings> ... </configuration> Using the namespace attribute of the TrinitySettings element you can control the CLR namespace in which the ontologies should be generated. The Uri is the namespace of the ontology. the Prefix is a shortcode for the ontology. This is used as the generated classes name. The FileSource element defines the location of the file relative to the configuration. || |---| | Note: If you are using NuGet, please be aware that if you change the framework (for example from .Net 4.5 to .Net 3.5 you need to retarget the packages. In most cases the easiest way to do that is by reinstalling them. | Store Connection A Rdf store, Triple store or simply just store represents the physical location of the data. This can either be in a database, a remote endpoint or just a temporary store in the computers memory. Establish connection to a store with #!csharp IStore store = StoreFactory.CreateStore(\"CONNECTIONSTRING\"); If you don't want to keep the connection store in code, you can define a connection string in the app.config #!xml <configuration> ... <connectionStrings> <add name=\"virt0\" providerName=\"Semiodesk.Trinity\" connectionString=\"provider=virtuoso;host=localhost;port=1111;uid=dba;pw=dba;rule=urn:semiodesk/ruleset\" /> </connectionStrings> ... </configuration> Then you can create a store with the followling call #!csharp IStore store = StoreFactory.CreateStoreFromConfiguration(\"virt0\"); The connection string has one fixed key, the provider . All following keys depend on the selected provider. Currently three providers are supported, OpenLink Virtuoso, SparqlEndpoints and a memory store based on dotnetrdf. It is also possible to write and load a custom store module. Loading Configuration to Store The ontologies specified in the configuration need to be loaded into the store to do things like inferencing. The method to do this is called Store.LoadOntologySettings() . Optionally it can be given the path of a configuration file. By default it will use the app.config file of the current assembly. As second parameter you can define the base directory for the ontologies. || |---| | IMPORTANT: Do not forget to set all ontologies to \"Copy always\" so they will be found at runtime. | Example: #!csharp store.LoadOntologySettings(); // Or store.LoadOntologySettings(Path.Combine(Environment.CurrentDirectory, \"myConfig.cfg\")); // Or store.LoadOntologySettings(Path.Combine(Environment.CurrentDirectory, \"myConfig.cfg\"), \"C:\\\\ontologyDir\"); It is in the responsibility of the developer to decide whether the ontologies have changed and need to be redeployed. During development it usually is no issue to do that at the start of the software. OpenLink Virtuoso This store is an excellent choice as backend if you want to host your own Semantic-enabled application. You can download the open source version of it here . The following example creates a connection to an OpenLink Virtuoso: #!csharp IStore store = StoreFactory.CreateStore(\"provider=virtuoso;host=localhost;port=1111;uid=dba;pw=dba\"); Possible options are: host : Hostename of the server where the Virtuoso instance is being run port : Port of the Virtuoso instance. This can be looked up in the server configuration uid and pw : Credentals to access the server rule : The default ruleset for inferencing. Rulesets can be defined in the app.config like this: #!xml <configuration> ... <TrinitySettings> <VirtuosoStoreSettings> <RuleSets> <RuleSet Uri=\"urn:semiodesk/ruleset\"> <Graphs> <Graph Uri=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" /> </Graphs> </RuleSet> </RuleSets> </VirtuosoStoreSettings> </TrinitySettings> ... </configuration> Sparql Endpoints Sparql Endpoints offer a platform independent way to access linked data. If you just need reliable read-only access, this would be the way to go. #!csharp IStore store = StoreFactory.CreateStore(\"provider=sparqlendpoint;endpoint=http://live.dbpedia.org/sparql\"); With the only option endpoint you can define the endpoint you want to connect to. Please keep in mind that Sparql Endpoints do not support model management or data updates. Memory Store This store is great for small projects which don't need much in the way of inferencing. If you just want to load a serialized collection of triples or an ontology, this offers the most flexiblity. Just remember that you have to save the content manually before shutting down the application or everything is lost. #!csharp IStore store = StoreFactory.CreateStore(\"provider=dotnetrdf\"); Custom Store If you want to use the Trinity with a currently unsupported store, you can write a custom store provider and register it with Trinity. With the following function you can try to load the custom module. #!csharp StoreFactory.LoadProvider(\"CustomStoreProvider.dll\") The CustomStoreProvider.dll needs to contain a class derived from StoreProvider and an IStore implementation to work. Then you can create a connection to the store by calling the CreateStore function with the provider name you set. #!csharp IStore store = StoreFactory.CreateStore(\"provider=YourProviderName\"); Model Management A model can be used to group contextual data together. They create a barrier between data that can be used to separate information and controll the access to the data. For example, it makes sense to create a model for each registered user on your system, if they are not allowed to share data. These barriers can be softend tough, as it is possible to query multiple models at once. The following code snippet outlines the basic methods for managing the models in a store: #!csharp IStore store = StoreFactory.CreateStore(\"provider=virtuoso;host=localhost;port=1111;uid=dba;pw=dba\"); Uri modelUri = new Uri(\"http://localhost:8890/Models/ExampleModel\"); // Check if a model with the given URI already exists. if (store.ContainsModel(modelUri)) { // Remove the model from the store. store.RemoveModel(modelUri); } // Create an empty model in the store. store.CreateModel(modelUri); // Now we can do work with the model. IModel model = store.GetModel(modelUri); // Load the contents from a file into the model. store.Read(modelUri, new Uri(\"file://example.n3\"), RdfSerializationFormat.N3); // Write the contents of a model into a file. FileStream stream = new FileStream(\"file://example.rdf\", FileMode.Create); store.Write(stream, modelUri, RdfSerializationFormat.RdfXml); Model Groups A model group allows to make queries over multiple models at once. This is great way to blend different information sources together. Due to technical restrictions it is not possible to modify the result resources tough. They are marked as read-only and a commit will result in an error. The following code piece demonstrates how model groups work. #!csharp // create model group of two models IModelGroup modelGroup = store.CreateModelGroup(new Uri(\"ex:Test1\"), new Uri(\"ex:Test2\")); // we can use a model group like a regular model bool contains = modelGroup.ContainsResource(new Uri(\"ex:Test/testResource\")); // we can make queris on them ResourceQuery q = new ResourceQuery(nco.Contact); var res = modelGroup.GetResources(q); // we cannot change resources directly IResource resource= modelGroup.GetResource(resourceUri); // we need to get a writable represenation from the IModel test1 = store.GetModel(new Uri(\"ex:Test1\")); if( test1.ContainsResource(resource.Uri) ) resource = test1.GetResource(resource.Uri); Because of the nature of the models, it is possible that resources exist in both models at once, both with different bits of information. This is why the developer has to decide which resource he want to change and thus, which part of the information he wants to modify. Resource Management Creating new generic resources is done with the CreateResource function on the model handle. #!csharp IResource john = model.CreateResource(new Uri(\"ex:testModel/john\")); Adding Properties To add a property we use the AddProperty method. Look at the Chapter Ontology Handling to see how to use properties from an ontology. #!csharp // Without generated ontologies john.AddProperty(new Property(new Uri(\"ex:myProperty\"), \"My value\"); // With generated ontologies john.AddProperty(rdf.type, nco.Contact); john.AddProperty(nco.fullname, \"John Doe\"); Iterating over Properties To iterate over all properties, we can call the ListProperties method. To access the values, we have then have to call the ListValues method. There is also a GetValue method, which will only return the first value or null. #!csharp foreach( Property p in john.ListProperties()) { foreach( var value in john.ListValues(p) ) { Console.WriteLine(\"{0} {1} {2}\", john, p, value); } } Alternatively you can call ListValues and iterate over all Triples. #!csharp foreach( Tuple<Property, object> tuple in john.ListValues()) { Console.WriteLine(\"{0} {1} {2}\", john, tuple.Item1, tuple.Item2); } To test if a property exists in a resource, you can call HasProperty either just with a property or with a property and value to test for a combination. Removing Properties To remove a property, simply call RemoveProperty with the property and the value you want to remove. #!csharp // Without generated ontologies john.RemoveProperty(new Property(new Uri(\"ex:myProperty\")), \"My value\"); // With generated ontologies john.RemoveProperty(rdf.type, nco.Contact); john.RemoveProperty(nco.fullname, \"John Doe\"); Save Changes To persist changes in the model, they need to be comitted. Every modification in the resource is temporary until the Commit method is called. #!csharp john.Commit(); If the resource has been created by calling it's constructor and not using the IModel.CreateResource method, it can be added retroactivly by calling IModel.AddResource . The resulting copy of the resource supports the Commit method. #!csharp john2 = model.AddResource(john); Semantic Object Mapping Semiodesk Trinity offers two ways of doing class mapping. The more readable and easier one is decorating. It needs to run a post-compiler step. If you cannot do that, you can also use mapping objects. In the following we describe both ways. Note: Valid types for mapping are all base value types, DateTime, Classes derived from Resource as well as collections of these types implementing the IList interface. Decorating #!csharp [RdfClass(FOAF.Person)] public class Person : Agent { #region Constructors public Person(Uri uri) : base(uri) { } #endregion #region Mapping [RdfProperty(FOAF.firstName)] public string FirstName{ get; set; } [RdfProperty(FOAF.lastName)] public string LastName { get; set; } #endregion } The class needs to be decorated with the RDF class it is mapping. It is important that the constructor with a Uri parameter is implemented. For the actual mapping of properties, you just need to decorate them with the RDF property they should be mapped to. The getter and setter need to be empty. For the decorating you need to use the upper case prefix of the ontologies (e.g. FOAF instead of foaf) because C# only accepts static strings for decorating. Mapping objects In environments that cannot do post-build processing, it can be desirable to use the native mapping mechanism. The following example demonstrates how this works. #!csharp public class Person : Agent { #region Constructors // This constructor is neccessary public Person(Uri uri) : base(uri) { } #endregion #region Mapping // This function defines which RDF class or classes should be mapped public override IEnumerable<Class> GetTypes() { return new Class[] { foaf.Person }; } // every mapped property needs a PropertyMapping object to store the value, it needs the name of the property as well as the RDF property it mapps as parameter protected PropertyMapping<string> firstNameProperty = new PropertyMapping<string>(\"FirstName\", foaf.firstName); // The getter and setter of the property need to access the PropertyMapping object for the real value public string FirstName { get { return GetValue(firstNameProperty); } set { SetValue(firstNameProperty, value); } } protected PropertyMapping<string> lastNameProperty = new PropertyMapping<string>(\"LastName\", foaf.lastName); public string LastName { get { return GetValue(lastNameProperty); } set { SetValue(lastNameProperty, value); } } #endregion } Resource Query Inline queries are error prone, as native data types need to be serialized manually by the developer each time. With the resource query this work is done by the API. || |---| | Note: Though C# already has a concept for queries embedded in code, LINQ, we decided against it. The reason for this is because not all SPARQL expressions can be mapped to LINQ expressions. We are still evaluating the possiblities we have. | SPARQL queries are basically patterns that are matched against the graph. #!SPARQL PREFIX nco: <http://www.semanticdesktop.org/ontologies/2007/03/22/nco#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> DESCRIBE ?contact WHERE { ?contact rdf:type nco:Contact . ?contact nco:belongsToGroup ?group . ?group nco:contactGroupName �Family� . ?contact nco:birthDate ?birthDate . FILTER (?birthDate < \"1990-01-01\"^^xsd:date ) } This query tries to find a contact, born before 1. January 1990 and belongs to the group \"Family\". The following example shows this query in the Resource Query format. #!csharp ResourceQuery contact = new ResourceQuery(nco.PersonContact); contact.Where(nco.birthDate).LessThan(new DateTime(1990, 1, 1)); ResourceQuery group = new ResourceQuery(nco.ContactGroup); group.Where(nco.contactGroupName, \"Family\"); contact.Where(nco.belongsToGroup, group); IResourceQueryResult result = model.ExecuteQuery(contact); foreach (Resource r in result.GetResources()) { Console.WriteLine(r.Uri); } Paged Data Access Loading a large amount of resources takes some time. In most cases it is not necessary to access them all at once but only one at a time. For these cases the data can be loaded in chunks. The following example shows how it is done. #!csharp ResourceQuery q = new ResourceQuery(foaf.Person); // This also works for SparqlQueries var x = model.ExecuteQuery(q); int count = x.Count(); int pageSize = 600; int pageCount = (count + pageSize - 1) / pageSize; for (int j = 0; j < pageCount; j++) { var result = x.GetResources<Person>(j * pageSize, pageSize); foreach (Resource r in result.GetResources()) { Console.WriteLine(r.Uri); } } Data Virtualization ..."
  },
  "tutorials/musicBrowser.html": {
    "href": "tutorials/musicBrowser.html",
    "title": "Music Browser",
    "keywords": "Music Browser This examples shows you how to access the LinkedBrainz dataset with the Trinity API. It uses WinForms as UI toolkit and utilises Data binding. Linkedbrainz seems to be offline. Before you try this example check linkedbrainz.org!! You can download the finished example from http://static.semiodesk.com/semiodesk.trinity/examples/0.9/MusicBrowser.zip Because of the way NuGet works, there is one step that needs to be completed for the example to work. Open the Nuget Package Manager console (\"Tools\" -> \"NuGet Package Manager\" -> \"Package Manager Console\") and install Semiodesk.Trinity.Modelling. #! PM> Install-Package Semiodesk.Trinity.Modelling Ontologies and Object Model## As data model we've used the Music Ontology , the FOAF and the DCES . For the object model we have created representations of the artist as well as his created works. || |---| | Note: As you can see, there is no connection between MusicArtist and Release. In this example we have solved the latency problem by wrapping this request in a separate query. | Accessing Sparql Endpoints To query the endpoint we need to create a store with the appropriate parameters. #!csharp IStore _store = StoreFactory.CreateStore(\"provider=sparqlendpoint;endpoint=http://linkedbrainz.org/sparql\"); IModel _model = _store.GetModel(new Uri(\"http://linkedbrainz.org/sparql\")); We use the Sparql Endpoint provider and configure the endpoint adress at http://linkedbrainz.org/sparql . Data binding Though a bit rudimentary, data binding is possible in Winforms. We have created two ListBoxes which are displaying the Title property of our resources. This can be done by setting the DisplayMember Property of the ListBox. As datasource we create a VirtualizingResourceCollection and set it to the ListBoxes DataSource. #!csharp ResourceQuery artistEntity = new ResourceQuery(artist); // Artist is the concrete artist resource. ResourceQuery madeEntity = new ResourceQuery(mo.Release); artistEntity.Where(foaf.made, madeEntity); albumListBox.DataSource = new VirtualizingResourceCollection<Release>(Model, madeEntity); Loading Data in Parallel We have used the async/await pattern to keep the UI responsive during querying. As threading is not an issue when using a SPARQL endpoint there is no need to worry about connection pooling."
  },
  "tutorials/simpleUnity.html": {
    "href": "tutorials/simpleUnity.html",
    "title": "Simple Unity Example",
    "keywords": "Simple Unity Example There are a number of use cases where semantic web technology makes a lot of sense in a gaming engine. In this first example we do not want bother ourselves to much with persistence. We look at how, in general, the Semiodesk Trinity platform can be used in combination with the Unity3d framework. A few restrictions apply: Modelling/Object Mapping should be done in a separate project .Net 3.5 only Requirements for this example: Basic knowledge about Unity3D Knowledge about C# and threading (BackgroundWorker) What does this Example do This is a small \"game\" which lists all books of a series on the press of a button. In this example it's the Lord of the Rings. It follows the links of the subsequent works. We start out with a hard coded link to the book \" The Fellowship of the Ring \". The property \" dbo:subsequentWork \" links all three books of the trilogy together. What are the problem of this example? Dbpedia data does not always follow ontologies. We use for this example the Lord of the Rings trilogy. If we were to exchange that for Harry Potter books, it doesn't work because the links are not there. Well, thats generated data for you. Downloading the finished Project I know, a lot of people want to skip ahead and see what the result looks like. You can download the result from the following link: http://static.semiodesk.com/semiodesk.trinity/examples/0.9/SimpleDbpedia.zip Because of the way NuGet works, there is one step that needs to be completed for the example to work. Open the Nuget Package Manager console (\"Tools\" -> \"NuGet Package Manager\" -> \"Package Manager Console\") and install Semiodesk.Trinity.Modelling. #! PM> Install-Package Semiodesk.Trinity.Modelling -source http://nuget.semiodesk.com/api/v2/ Make a release build before you open the project in Unity. You can find the scene under Assets/Scenes/Simple.scene . Getting started First you need to set up a new Unity3d Project. Next to the Assets folder you can put a new folder for the ontology mapping project. I usually call it External. Here we create a new C# Library project (create it either in Visual Studio or XamarinStudio/Monodevelop). To make the results of this projects available our Unity projects, we need to set the build output (preferably of the release build) to ..\\..\\Assets\\Plugins\\ The Plugins directory is a special folder of unity which treats the contained DLLs differently. Adding Semiodesk Trinity Now we can add the Semiodesk.Trinity.Modelling package to the project by executing the following command in the Package Manager Console ( Tools -> NuGet Package Manager -> Package Manager Console ). || |---| | IMPORTANT: We currently have some issues with our dependencies. The current version of OpenLink.Data.Virtuoso.dll is not comaptible with Mono. This is why we decided to switch back to the old version. As this change is not in the release branch at the moment, it is neccessary to use the development branch. | #! PM> Install-Package Semiodesk.Trinity.Modelling -source http://nuget.semiodesk.com/api/v2/ Then you need to manually remove the references to virtado3, dotNetRDF.Data.Virtuoso and OpenLink.Data.Virtuoso as these are not compatible with Unity3D. Adding the dbpedia ontology I have picked up the dbpdia ontology from this link . The next step is to extract it to the ontologies directory. Then we need the foaf ontology which I stored as foaf.rdf in the ontologies directory. Then we can add the following part to the OntologySettings section in the App.config #!xml <Ontology Uri=\"http://dbpedia.org/ontology/\" Prefix=\"dbo\"> <FileSource Location=\"Ontologies\\dbpedia_2015-04.nt\"/> </Ontology> <Ontology Uri=\"http://xmlns.com/foaf/0.1/\" Prefix=\"foaf\"> <FileSource Location=\"Ontologies\\foaf.rdf\" /> </Ontology> Create object mapping Now we add the C# classes for the mappings we want. For example we want information about written works: #!csharp [RdfClass(DBO.WrittenWork)] public class WrittenWork : Resource { #region Constructor public WrittenWork(Uri uri) : base(uri) {} public WrittenWork(Resource other) : base(other) {} public WrittenWork(string uriString) : base(uriString) {} #endregion #region Properties [RdfProperty(FOAF.name)] public string Name { get; set; } [RdfProperty(DBO.previousWork)] public List<WrittenWork> PreviousWork { get; set; } [RdfProperty(DBO.subsequentWork)] public List<WrittenWork> SubsequentWork { get; set; } [RdfProperty(DBO.author)] public Person Author { get; set; } #endregion } To get information about the author, we need a mapping for foaf:Person #!csharp [RdfClass(FOAF.Person)] public class Person : Resource { public Person(Uri uri) : base(uri) {} [RdfProperty(FOAF.name)] public string Name { get; set; } [RdfProperty(FOAF.surname)] public string Surname { get; set; } [RdfProperty(FOAF.givenname)] public string GivenName { get; set; } } For convenience we also create a DataStore class which connects to the store on creation. #!csharp public class DataStore { #region Members Uri _endpoint = new Uri(\"http://live.dbpedia.org/sparql\"); IStore _store; public IStore Store { get { return _store; } } #endregion #region Constructor public DataStore() { SemiodeskDiscovery.Discover(); _store = StoreFactory.CreateStore(\"provider=sparqlendpoint;endpoint=http://live.dbpedia.org/sparql\"); } #endregion } Integration into Unity3d To get the Trinity running in Unity3D you first need to set the Api Compatibility Level to .NET 2.0 Subset . For this, open the Player settings in Unity3D (Edit -> Project Settings -> Player) and change the appropriate entry. When the DataModel project is now being built in release mode, Unity should automatically pick it up and make it available for scripting. Adding a simple interaction For this example we just need a Canvas with a Button and a Text control. Add them to your scene (GameObject -> UI -> Canvas / Button / Text). Now we add the querying mechanism by adding a script to the canvas. For this, just select the canvas and in the Inspector click Add Component -> New Script and make sure Csharp is selected. We call this script LoadData and add the following code to it. #!csharp using UnityEngine; using UnityEngine.UI; using System.Collections; using DataModel; using Semiodesk.Trinity; using System; using System.ComponentModel; using System.Collections.Generic; public class LoadData : MonoBehaviour { public Text Target; DataStore _store; IModel _model; BackgroundWorker _worker; Queue<Action> _actions = new Queue<Action>(); WrittenWork _currentBook; Uri _targetBook; // Use this for initialization void Start () { _targetBook = new Uri (\"http://dbpedia.org/resource/The_Fellowship_of_the_Ring\"); _store = new DataStore (); _model = _store.Model; _worker = new BackgroundWorker (); _worker.DoWork += (object sender, DoWorkEventArgs e) => ExecuteLoad(); } // Update is called once per frame void Update () { lock (_actions) { if( _actions.Count > 0 ) { _actions.Dequeue().Invoke(); } } } public void StartLoading() { _worker.RunWorkerAsync (); } void ExecuteLoad() { if (_currentBook == null) { _currentBook = _model.GetResource<WrittenWork> (_targetBook, null); } else { var works = _currentBook.SubsequentWork; if( works.Count > 0 ) _currentBook = works[0]; } if (_currentBook != null) { lock(_actions) { _actions.Enqueue (new Action (() => Target.text = _currentBook.Name)); } } } void OnDestroy() { _worker.Dispose (); } } Now we just need to set the Button to call the appropriate function. Select it and set the On Click() handler like in the following image. || |---| | Note: Even tough the setting of Target.text does not seem like a call to Unity method, it could be property that calls methods which are not allowed to be called from a thread. To be safe, relay as much as possible back to the UI thread. | The result You now have a small game that gives you the title of all three parts of The Lord of the Rings if you press the button repeatedly. Yay for Semantic Web!"
  },
  "tutorials/virtuoso.html": {
    "href": "tutorials/virtuoso.html",
    "title": "Set up a Virtuoso instance",
    "keywords": "Set up a Virtuoso instance Many features of the Semiodesk.Trinity API are geared towards the Virtuoso Database . If you create a quick installation to get you started then just follow the instructions. The process is a bit different depending on the platform you are on. Windows 1. Get the latest binary distribution You can find the pre-build package on this page . 2. Unzip it to your desired location This is where your Virtuoso installation will reside, so pick a sensible directory. Inside this directory, you will have the following folders: bin contains the binaries database contains an example configuration doc contains the documentation hosting additional modules lib the libraries to access the database vad VAD packages BPEL, Conductor, tutorials, documentation 3. Set up the configuration To get started quick, you can just use the example configuration in the database folder. 4. Starting Virtuoso Here we have two options, the quickstart which creates a Virtuoso instance that stops once the console window is closed and installing Virtuoso as a Windows Service. a. Quickstart Open a console in your Virtuoso directory and start it with the following command: bin\\virtuoso-t.exe -f -c database/virtuoso.ini Closing the console or pressing ctrl-c will stop the database server. b. Installing Virtuoso as a Service This process takes a few more steps, but the Server will automatically be started when the computer is restarted. First you need a console with administration rights. The easiest way to get one is to open the start menu, type in \"cmd.exe\" and press ctrl-shift-enter. You then need to navigate into your virtuoso installation directory. To install the Service, enter bin\\virtuoso-t.exe +service screate -I \"My Virtuoso Server\" -c database/virtuoso.ini To start the Service, enter bin\\virtuoso-t.exe +service start -I \"My Virtuoso Server\" If you want to remove it from your system, you can use bin\\virtuoso-t.exe +service delete -I \"My Virtuoso Server\" 5. Testing if everything works Navigate to http://localhost:8890/conductor/ and try to login with dba/dba. If everything works you should now have a running Virtuoso server. 6. Using Virtuoso with the Semiodesk.Trinity API When you use the default configuration, you can use the following configuration string \"provider=virtuoso;host=localhost;port=1111;uid=dba;pw=dba\" with the Semiodesk.Trinity. To create the store, use the following snippet: #!c# IStore store = Stores.CreateStore(\"provider=virtuoso;host=localhost;port=1111;uid=dba;pw=dba\");"
  },
  "tutorials/firstSteps.html": {
    "href": "tutorials/firstSteps.html",
    "title": "First Steps",
    "keywords": "First Steps The tutorial on this page should give you a first impression what you can do with the Semiodesk Trinity API. If you follow the steps you will have a working application that already uses a lot of features that semantic web technologies can offer. You can download the finished example from http://static.semiodesk.com/semiodesk.trinity/examples/0.9/CliExample-0.9.102.zip We have prepared this example to work under Windows with the .Net platform. Different examples for Linux and Mac are not done yet but they will be published here once they are completed. This example is a simple console application that just creates and queries some data. In following examples we will show you how to do more complicated stuff. Create a project To get started we will open Visual Studio and create a new console project, lets call it \"CliExample\". Now we can start to add the dependencies using NuGet. We add the Semiodesk.Trinity.Modelling to the project. This package contains the tools that are neccessary to create the object mapping. It also has a dependency to the Semiodesk.Trinity.Core package which contains the actual library. The resulting project structure should look like this The package added a folder called Ontologies, which contains the three most basic ontologies, rdf, rdfs and owl. The App.config file has been extended to contain the configuration for Semiodesk.Trinity. Now we can start to build the domain model for our application. Add an ontology First we need to add the foundation of our modelling to the project, the ontologies. If you have been following this tutorial and asking yourself what an ontology is, don't worry. It's basically just a collection of classes and their properties formalised in a standardised way. In this example you don't have to write one yourself, we can just take an existing one. If you want to read up on the topic here is a link to the Wikipedia article . In this example we're going to use the 'Friend of a Friend' ontology, or just foaf in short. We download a XML/RDF serialised version from http://xmlns.com/foaf/spec/index.rdf and copy it into the 'Ontologies' folder in the ObjectModel project. Also to avoid confusion, we rename it to 'foaf.rdf'. Then we just need to add the file to the project in Visual Studio. Now we need to change the configuration to make the new ontology known to Semiodesk.Trinity. To make this happen, we add the following passage to the App.config under . #!xml <!--http://xmlns.com/foaf/0.1/--> <Ontology Uri=\"http://xmlns.com/foaf/0.1/\" Prefix=\"foaf\"> <FileSource Location=\"Ontologies\\foaf.rdf\"/> </Ontology> With this, we tell the framework where the ontology lies, what base uri it has and the prefix it should use for the C# class. As we want to use inferencing, we need to tell Virtuoso to use these ontologies, so we have to modify the RuleSet in the same file. Just replace the existing VirtuosoSpecific part with the following one and you are set. #!xml <VirtuosoStoreSettings> <RuleSets> <RuleSet Uri=\"urn:semiodesk/ruleset\"> <Graphs> <Graph Uri=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" /> <Graph Uri=\"http://www.w3.org/2000/01/rdf-schema#\" /> <Graph Uri=\"http://www.w3.org/2002/07/owl#\" /> <Graph Uri=\"http://xmlns.com/foaf/0.1/\" /> </Graphs> </RuleSet> </RuleSets> </VirtuosoStoreSettings> When you build your project now it creates the c# represenations of the ontologies in the background. Create mappings Now we want to create our domain model. We are building a small manager for people in groups. We are using the foaf ontology as a base, so we just have to create the classes according to the specification . || |---| | Note: We are currently working on a tool to automatically create a mapping from an ontology. These steps will be significantly easier in the future. | As base class for our Group and Person we want to use an Agent class. So we create a new class called Agent. #!csharp using System; using System.Collections.Generic; using Semiodesk.Trinity; namespace CliExample { [RdfClass(FOAF.Agent)] public class Agent : Resource { public Agent(Uri uri) : base(uri) { EMailAccounts = new List<Resource>(); } [RdfProperty(FOAF.name)] public string Name { get; set; } [RdfProperty(FOAF.mbox)] public List<Resource> EMailAccounts { get; set; } } } The class needs to be derived from Resource. The mapping can simply be done by decorating the class and the properties with the rdf classes and properties from the foaf ontology. || |---| | Note: There is a distinction to be made between the generated foaf class and the upper case FOAF class. The upper case version supplies the string representaion of the ontology elements and should only be used for the decorating. The lower case variant supplies Class and Property objects. | Lets now create the other two classes, Person and Group. Person is derived from Agent and has a property that models the relationship between a person and other people. #!csharp [RdfClass(FOAF.Person)] public class Person : Agent { public Person(Uri uri) : base(uri) { Knows = new List<Person>(); } [RdfProperty(FOAF.knows)] public List<Person> Knows { get; set; } } And the Group, which is also derived from Agent and contains a property modelling its membership property. #!csharp [RdfClass(FOAF.Group)] public class Group : Agent { public Group(Uri uri) : base(uri) { Member = new List<Agent>(); } [RdfProperty(FOAF.member)] public List<Agent> Member { get; set; } } Connection to the backend We want to use a Virtuoso backend for this example. It is fairly simple to set up, so just follow the instructions here . The quickstart method should be sufficient for this case. To tell Semiodesk.Trinity how to connect to the running Virtuoso instance, we need to add the following connection string to the App.config file. #!xml <connectionStrings> <add name=\"virt0\" providerName=\"Semiodesk.Trinity\" connectionString=\"provider=virtuoso;host=localhost;port=1111;uid=dba;pw=dba;rule=urn:semiodesk/ruleset\"/> </connectionStrings> When you build your application now, the given ontologies will be deployed to the Virtuoso instance given in the connection string. To verify this, you can look at the Virtuoso Conductor in your browser (default is http://localhost:8890 , login is dba/dba) you should be able see the new ontology graphs when you navigate to \"Linked Data\" -> \"Graphs\". The following screenshot shows how it should look like. Building the application Now we can start writing the application. First we need to do some initialization and then we can open a connection to the store. This can be done by using the name of the connection string. With the LoadOntologySettings() method we tell the store to import all ontologies from the current app.config file. In the case of the Virtuoso the ruleset is also created. #!c# SemiodeskDiscovery.Discover(); IStore store = StoreFactory.CreateStoreFromConfiguration(\"virt0\"); store.LoadOntologySettings(); Then we either create or open a model. If the model exists, we clear it, so we don't add the same information again. A model in RDF contains triples and is identified by a Uri. It can be used to group information of one domain together. #!csharp Uri modelUri = new Uri(\"http://semiodesk.com/example/cli\"); IModel model; if (store.ContainsModel(modelUri)) { model = store.GetModel(modelUri); model.Clear(); } else { model = store.CreateModel(modelUri); } Then we can start to add our mapped objects to the model. First we let the model create a new resource of type \"Person\". The empty parameter in the CreateResource() method means that we want the model to create a URI for the resource. After adding values to the resource we need to commit it to the model by calling the Commit() method. #!csharp Person john = model.CreateResource<Person>(); john.EMailAccounts.Add(new Resource(\"mailto:john.doe@example.com\")); john.Name = \"John Doe\"; john.Commit(); Group myGroup = model.CreateResource<Group>(); myGroup.Name = \"My Group\"; myGroup.Member.Add(john); myGroup.Commit(); When we want to get every Agent, meaning all Group and all Person objects, we can call ''model.GetResources (true)''. The type restricts the query to all Agent objects. With the true parameter we tell the model to infer the types from the ontologies. Because foaf:Person and foaf:Group are subclasses of foaf:Agent the query also returns the mapped objects for these classes. #!csharp foreach (Agent a in model.GetResources<Agent>(true)) { Console.WriteLine(a.Name); }"
  },
  "tutorials/installation.html": {
    "href": "tutorials/installation.html",
    "title": "Installation",
    "keywords": "Installation On this page we describe the methods to install Semiodesk Trinity. Via NuGet The easiest way to install the library is via NuGet. You can install the base library with the following command: PM> Install-Package Semiodesk.Trinity.Core If you want to be able to use the object mapping features of Trinity, you should add the following package: PM> Install-Package Semiodesk.Trinity.Modelling Via Package (Not recommended)## Download the latest stable package . This archive contains everything that is needed to create a Semantic Web application with Semiodesk Trinity. Further Information For a complete introduction follow our First Steps tutorial."
  },
  "tutorials/intro.html": {
    "href": "tutorials/intro.html",
    "title": "Tutorials",
    "keywords": "Tutorials First Steps Learn quickly how to get started. Tutorial Music Browser A sample desktop application that lets you browse through artists and their records Tutorial Simple Unity3d Example A small Unity3d example to get you started. Tutorial Web Application with ASP.NET and SignalR Utilize Trinity to write a web application vizualizing kowledge graphs. Tutorial"
  },
  "tutorials/license.html": {
    "href": "tutorials/license.html",
    "title": "License",
    "keywords": "License The Semiodesk.Trinity library and tools found in this repository are licensed under the the MIT License (MIT). Copyright (c) 2015 Semiodesk GmbH Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "tutorials/webApp.html": {
    "href": "tutorials/webApp.html",
    "title": "Web Application",
    "keywords": "Web Application This example demonstrate how to use Semiodesk Trinity with ASP.NET MVC 5 and SignalR. The resulting application is able to generate random people and connections between them. The web page visualizes the dependencies in a graph with D3js . You can download the finished example from http://static.semiodesk.com/semiodesk.trinity/examples/0.9/WebApp.zip Because of the way NuGet works, you have to add the Semiodesk Trinity packages manually. Open the Nuget Package Manager console (\"Tools\" -> \"NuGet Package Manager\" -> \"Package Manager Console\") and install Semiodesk.Trinity.Modelling to the DataModel Project and Semiodesk.Trinity.Core to the EbApp. #! PM> Install-Package Semiodesk.Trinity.Modelling -ProjectName DataModel PM> Install-Package Semiodesk.Trinity.Core -ProjectName WebApp Also, you might need to configure the Virtuoso connection string in the Web.config file appropriately. Architecture and Object Model Overview To separate the data model from the application I have created a project that only contains the ontologies and the mapped classes. To keep things simple, I used the foaf ontology again. The mapping is nearly the same as the first steps example . As we want to serialize our objects to Json we need to change it a bit. Serializers often have limitation when it comes to possible dependency cycles. We need to handle the Knows relationship differently than before. To prevent loops we hide the Knows property from the serializer with JsonIgnore and create a new property that only exposes the URIs of the related objects. That way we can still access the objects, but only when we actively decide to do so. #!csharp [RdfProperty(FOAF.knows), JsonIgnore] public List<Person> Knows { get; set; } public IEnumerable<Uri> knows { get { return from x in Knows select x.Uri; } } To make the data available, I have implemented the repository pattern under Models/ResourceRepository.cs . This is used to create an additional abstraction layer between the database and it's peculiarities and the application logic. Displaying the Data The actual data is not rendered directly to html, but queried by the Javascript code that is deployed using ASP.NET. Creating a data backend is very easy using the aforementioned repository pattern and SignalR . This has the advantage that the data can be loaded asynchronously, while the web page is already displayed. The following diagram shows the full process how the data is acquired. The result is then transformed to create a visualisation with D3. Checklist Things to consider when you build a new project with ASP.NET and Trinity: Add SemiodeskDiscovery.Discover(); to Global.asax.cs -- Application_Start() Get ResourceRepository.cs and StoreFactory.cs from this example, they are generic and make your life easier. While creating the mapping classes, think about serialization issues. If you have trouble with SignalR, use ``` #!javascript $.connection.hub.logging = true;"
  },
  "index.html": {
    "href": "index.html",
    "title": "Semiodesk Trinity",
    "keywords": "Semiodesk Trinity Trinity is an application development platform for Microsoft .NET and Mono. It allows to easily build Linked Data and Semantic Web applications based on the RDF metadata standard issued by the W3C. The API allows for developing first-class .NET applications with direct access to Linked Open Data repositories and knowledge bases such as DBPedia, Freebase, Geonames, BBC Business News, BBC Sports and many more. Benefits Semiodesk Trinity is based on the Resource Description Framework (RDF) linked data platform, which is an open standard maintained by the World Wide Web Consortium (W3C). This means your data is vendor-independent and will be easily accessible and exchangable in many years to come. Compared to many propriety graph databases, it has some considerable advantages: Standardized Graph Data Model RDF extends the linking structure of the Word Wide Web to name things and the relationships between them. Using this simple model, it allows structured and semi-structured data to be mixed, exposed, and shared across different applications. Ontologies: Class & Property Inheritance Ontologies provide a powerful way to describe classes and their properties in RDF. In contrast to many established data modelling frameworks, ontologies also allow to define inheritance relationships amongst properties. Since ontologies are part of the data graph, this can happen during application rutime. Powerful & Intuitive Query Language Trinity supports Linq queries for your mapped objects. Developers familiar with this way of writing queries won't need to change their approach. For people who require more specialized query, it is always possible to use SPARQL. Logical Inferencing Ontologies provide rich knowledge about data structure, such as sub-class, sub-property hierarchies and about the transitivity of properties. Many RDF databases can make use of logical reasoning during application runtime to answer queries about facts which have not been explicitly saved. License The library and tools in this repository are all released under the terms of the MIT license. This means you can use it for all kinds of projects, including commercial ones. The source code, documentation and issue tracking can be found at our Github project page. If you like what we are doing and want to support us, please consider donating. Technical Support If you encounter problems with Semiodesk Trinity you can use our issue tracking system. If you are interested in priority support or need some technical expertise, you can contact us under hello@semiodesk.com or through the contact page. Please join our public mailing list to ask questions and for sharing ideas of any kind. Community & Contributing We'd like to encourage anyone who is interested in using or contributing to Trinity to join our public mailing list for discussing anything related to this project. If you want to contribute source code, please make sure that you have all the rights for publication under a MIT license and create a pull request at our Github project site."
  },
  "api/Semiodesk.Trinity.Collections.IItemsProvider-1.html": {
    "href": "api/Semiodesk.Trinity.Collections.IItemsProvider-1.html",
    "title": "Interface IItemsProvider<T>",
    "keywords": "Interface IItemsProvider<T> A generic items provider collection. Namespace : Semiodesk.Trinity.Collections Assembly : Semiodesk.Trinity.dll Syntax public interface IItemsProvider<T> Type Parameters Name Description T Methods | Improve this Doc View Source Count() Number of element in the provider. Declaration int Count() Returns Type Description System.Int32 | Improve this Doc View Source GetItems(Int32, Int32) Enumerator of the items. Declaration IEnumerable<T> GetItems(int offset, int limit) Parameters Type Name Description System.Int32 offset System.Int32 limit Returns Type Description System.Collections.Generic.IEnumerable <T>"
  },
  "api/Semiodesk.Trinity.FileSystemInfoExtensions.html": {
    "href": "api/Semiodesk.Trinity.FileSystemInfoExtensions.html",
    "title": "Class FileSystemInfoExtensions",
    "keywords": "Class FileSystemInfoExtensions Extension to FileSystemInfo concerting UriRef handling Inheritance System.Object FileSystemInfoExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public static class FileSystemInfoExtensions Methods | Improve this Doc View Source ToUriRef(FileSystemInfo) Create a UriRef from a FileSystemInfo Declaration public static UriRef ToUriRef(this FileSystemInfo fileInfo) Parameters Type Name Description System.IO.FileSystemInfo fileInfo Returns Type Description UriRef"
  },
  "api/Semiodesk.Trinity.IResourceQueryResult.html": {
    "href": "api/Semiodesk.Trinity.IResourceQueryResult.html",
    "title": "Interface IResourceQueryResult",
    "keywords": "Interface IResourceQueryResult Interface for results of a resource query. Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public interface IResourceQueryResult Methods | Improve this Doc View Source Count() Number of results Declaration int Count() Returns Type Description System.Int32 | Improve this Doc View Source GetResources(Int32, Int32) Enumerator of the resulting resources. Declaration IEnumerable<Resource> GetResources(int offset = -1, int limit = -1) Parameters Type Name Description System.Int32 offset System.Int32 limit Returns Type Description System.Collections.Generic.IEnumerable < Resource > | Improve this Doc View Source GetResources<T>(Int32, Int32) Enumerator of the results bound to a certain type. Declaration IEnumerable<T> GetResources<T>(int offset = -1, int limit = -1) where T : Resource Parameters Type Name Description System.Int32 offset System.Int32 limit Returns Type Description System.Collections.Generic.IEnumerable <T> Type Parameters Name Description T"
  },
  "api/Semiodesk.Trinity.Store.SparqlEndpointStoreProvider.html": {
    "href": "api/Semiodesk.Trinity.Store.SparqlEndpointStoreProvider.html",
    "title": "Class SparqlEndpointStoreProvider",
    "keywords": "Class SparqlEndpointStoreProvider Inheritance System.Object StoreProvider SparqlEndpointStoreProvider Inherited Members StoreProvider.Name StoreProvider.ConfigurationOptions System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity.Store Assembly : Semiodesk.Trinity.dll Syntax [Export(typeof(StoreProvider))] public class SparqlEndpointStoreProvider : StoreProvider Constructors | Improve this Doc View Source SparqlEndpointStoreProvider() Declaration public SparqlEndpointStoreProvider() Methods | Improve this Doc View Source GetStore(Dictionary<String, String>) Declaration public override IStore GetStore(Dictionary<string, string> configurationDictionary) Parameters Type Name Description System.Collections.Generic.Dictionary < System.String , System.String > configurationDictionary Returns Type Description IStore Overrides StoreProvider.GetStore(Dictionary<String, String>)"
  },
  "api/Semiodesk.Trinity.Store.Stardog.StardogResultHandler.html": {
    "href": "api/Semiodesk.Trinity.Store.Stardog.StardogResultHandler.html",
    "title": "Class StardogResultHandler",
    "keywords": "Class StardogResultHandler Inheritance System.Object VDS.RDF.Parsing.Handlers.BaseHandler VDS.RDF.Parsing.Handlers.BaseResultsHandler StardogResultHandler Implements VDS.RDF.ISparqlResultsHandler VDS.RDF.INodeFactory Inherited Members VDS.RDF.Parsing.Handlers.BaseResultsHandler.StartResults() VDS.RDF.Parsing.Handlers.BaseResultsHandler.StartResultsInternal() VDS.RDF.Parsing.Handlers.BaseResultsHandler.EndResults(System.Boolean) VDS.RDF.Parsing.Handlers.BaseResultsHandler.EndResultsInternal(System.Boolean) VDS.RDF.Parsing.Handlers.BaseResultsHandler.HandleBooleanResult(System.Boolean) VDS.RDF.Parsing.Handlers.BaseResultsHandler.HandleVariable(System.String) VDS.RDF.Parsing.Handlers.BaseResultsHandler.HandleResult(VDS.RDF.Query.SparqlResult) VDS.RDF.Parsing.Handlers.BaseHandler.CreateBlankNode() VDS.RDF.Parsing.Handlers.BaseHandler.CreateBlankNode(System.String) VDS.RDF.Parsing.Handlers.BaseHandler.CreateGraphLiteralNode() VDS.RDF.Parsing.Handlers.BaseHandler.CreateGraphLiteralNode(VDS.RDF.IGraph) VDS.RDF.Parsing.Handlers.BaseHandler.CreateLiteralNode(System.String, System.Uri) VDS.RDF.Parsing.Handlers.BaseHandler.CreateLiteralNode(System.String) VDS.RDF.Parsing.Handlers.BaseHandler.CreateLiteralNode(System.String, System.String) VDS.RDF.Parsing.Handlers.BaseHandler.CreateUriNode(System.Uri) VDS.RDF.Parsing.Handlers.BaseHandler.CreateVariableNode(System.String) VDS.RDF.Parsing.Handlers.BaseHandler.GetNextBlankNodeID() VDS.RDF.Parsing.Handlers.BaseHandler.NodeFactory System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity.Store.Stardog Assembly : Semiodesk.Trinity.dll Syntax public class StardogResultHandler : BaseResultsHandler, ISparqlResultsHandler, INodeFactory Constructors | Improve this Doc View Source StardogResultHandler() Declaration public StardogResultHandler() Properties | Improve this Doc View Source BoolResult Declaration public bool BoolResult { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source SparqlResultSet Declaration public SparqlResultSet SparqlResultSet { get; } Property Value Type Description VDS.RDF.Query.SparqlResultSet Methods | Improve this Doc View Source GetAnwser() Declaration public bool GetAnwser() Returns Type Description System.Boolean | Improve this Doc View Source HandleBooleanResultInternal(Boolean) Declaration protected override void HandleBooleanResultInternal(bool result) Parameters Type Name Description System.Boolean result Overrides VDS.RDF.Parsing.Handlers.BaseResultsHandler.HandleBooleanResultInternal(System.Boolean) | Improve this Doc View Source HandleResultInternal(SparqlResult) Declaration protected override bool HandleResultInternal(SparqlResult result) Parameters Type Name Description VDS.RDF.Query.SparqlResult result Returns Type Description System.Boolean Overrides VDS.RDF.Parsing.Handlers.BaseResultsHandler.HandleResultInternal(VDS.RDF.Query.SparqlResult) | Improve this Doc View Source HandleVariableInternal(String) Declaration protected override bool HandleVariableInternal(string var) Parameters Type Name Description System.String var Returns Type Description System.Boolean Overrides VDS.RDF.Parsing.Handlers.BaseResultsHandler.HandleVariableInternal(System.String) Implements VDS.RDF.ISparqlResultsHandler VDS.RDF.INodeFactory"
  },
  "api/Semiodesk.Trinity.StoreProvider.html": {
    "href": "api/Semiodesk.Trinity.StoreProvider.html",
    "title": "Class StoreProvider",
    "keywords": "Class StoreProvider This is the abstract store provider class. Implement it if you want to write your own store provider. Inheritance System.Object StoreProvider dotNetRDFStoreProvider SparqlEndpointStoreProvider StardogStoreProvider VirtuosoStoreProvider Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public abstract class StoreProvider Constructors | Improve this Doc View Source StoreProvider() The constructor of the store provider Declaration public StoreProvider() Properties | Improve this Doc View Source ConfigurationOptions All valid configuration options Declaration protected string[] ConfigurationOptions { get; set; } Property Value Type Description System.String [] | Improve this Doc View Source Name The name of the store. Declaration public string Name { get; protected set; } Property Value Type Description System.String Methods | Improve this Doc View Source GetStore(Dictionary<String, String>) The GetStore method which will be called with the parsed configuration string. Declaration public abstract IStore GetStore(Dictionary<string, string> configurationDictionary) Parameters Type Name Description System.Collections.Generic.Dictionary < System.String , System.String > configurationDictionary Returns Type Description IStore"
  },
  "api/Semiodesk.Trinity.StringExtensions.html": {
    "href": "api/Semiodesk.Trinity.StringExtensions.html",
    "title": "Class StringExtensions",
    "keywords": "Class StringExtensions Collection of string extension related to Uris Inheritance System.Object StringExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public static class StringExtensions Methods | Improve this Doc View Source ToUriRef(String) Create a UriRef from this string. Declaration public static UriRef ToUriRef(this string uriString) Parameters Type Name Description System.String uriString Returns Type Description UriRef | Improve this Doc View Source ToUriRef(String, UriKind) Create a UriRef from this string with a given kind Declaration public static UriRef ToUriRef(this string uriString, UriKind uriKind) Parameters Type Name Description System.String uriString System.UriKind uriKind Returns Type Description UriRef"
  },
  "api/Semiodesk.Trinity.Class.html": {
    "href": "api/Semiodesk.Trinity.Class.html",
    "title": "Class Class",
    "keywords": "Class Class Represents a RDF class Inheritance System.Object Resource Class Implements IResource System.ComponentModel.INotifyPropertyChanged System.IDisposable ITransactional Inherited Members Resource.Model Resource.Uri Resource.IsNew Resource.IsDisposed Resource.IsSynchronized Resource.IsReadOnly Resource.SetIsReadOnly(Boolean) Resource.Language Resource.SetModel(IModel) Resource.GetTypes() Resource.ToString() Resource.Equals(Object) Resource.GetHashCode() Resource.AddProperty(Property, IResource) Resource.AddProperty(Property, String) Resource.AddProperty(Property, String, CultureInfo) Resource.AddProperty(Property, String, String) Resource.AddProperty(Property, Int16) Resource.AddProperty(Property, Int32) Resource.AddProperty(Property, Int64) Resource.AddProperty(Property, UInt16) Resource.AddProperty(Property, UInt32) Resource.AddProperty(Property, UInt64) Resource.AddProperty(Property, Single) Resource.AddProperty(Property, Double) Resource.AddProperty(Property, Decimal) Resource.AddProperty(Property, Boolean) Resource.AddProperty(Property, DateTime) Resource.AddProperty(Property, TimeSpan) Resource.AddProperty(Property, Byte[]) Resource.AddProperty(Property, Uri) Resource.RemoveProperty(Property, IResource) Resource.RemoveProperty(Property, String) Resource.RemoveProperty(Property, String, CultureInfo) Resource.RemoveProperty(Property, String, String) Resource.RemoveProperty(Property, Int16) Resource.RemoveProperty(Property, Int32) Resource.RemoveProperty(Property, Int64) Resource.RemoveProperty(Property, UInt16) Resource.RemoveProperty(Property, UInt32) Resource.RemoveProperty(Property, UInt64) Resource.RemoveProperty(Property, Single) Resource.RemoveProperty(Property, Double) Resource.RemoveProperty(Property, Decimal) Resource.RemoveProperty(Property, Boolean) Resource.RemoveProperty(Property, DateTime) Resource.RemoveProperty(Property, Byte[]) Resource.RemoveProperty(Property, Uri) Resource.HasProperty(Property) Resource.HasProperty(Property, Object) Resource.HasProperty(Property, String, CultureInfo) Resource.HasProperty(Property, String, String) Resource.ListValues() Resource.ListValues(Property) Resource.ListProperties() Resource.GetValue(Property) Resource.GetValue(Property, Object) Resource.Commit() Resource.Rollback() Resource.HasPropertyMapping(Property, Type) Resource.GetValue<T>(PropertyMapping<T>) Resource.SetValue<T>(PropertyMapping<T>, T) Resource.RegisterPropertyChanged(String) Resource.RaisePropertyChanged(String) Resource.ReloadLocalizedMappings() Resource.Dispose() Resource.PropertyChanged Resource.VerifyPropertyName(String) Resource.ThrowOnInvalidPropertyName System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class Class : Resource, IResource, INotifyPropertyChanged, IDisposable, ITransactional Constructors | Improve this Doc View Source Class(UriRef) Constrctor Declaration public Class(UriRef uri) Parameters Type Name Description UriRef uri | Improve this Doc View Source Class(String) Constrctor Declaration public Class(string uriString) Parameters Type Name Description System.String uriString | Improve this Doc View Source Class(Uri) Constructor Declaration public Class(Uri uri) Parameters Type Name Description System.Uri uri Implements IResource System.ComponentModel.INotifyPropertyChanged System.IDisposable ITransactional Extension Methods ResourceExtensions.FindAll<T>(IResource, T, Int32) ResourceExtensions.FindAll<T>(IResource, IEnumerable<T>, Int32)"
  },
  "api/Semiodesk.Trinity.Exceptions.html": {
    "href": "api/Semiodesk.Trinity.Exceptions.html",
    "title": "Namespace Semiodesk.Trinity.Exceptions",
    "keywords": "Namespace Semiodesk.Trinity.Exceptions Classes InvalidQueryException This exception will be thrown if the store rejects the query as invalid. StoreProviderMissingException"
  },
  "api/Semiodesk.Trinity.Collections.AsyncVirtualizingResourceCollection-1.html": {
    "href": "api/Semiodesk.Trinity.Collections.AsyncVirtualizingResourceCollection-1.html",
    "title": "Class AsyncVirtualizingResourceCollection<T>",
    "keywords": "Class AsyncVirtualizingResourceCollection<T> An generic asynchrous virtualizing collection for resource queries. Inheritance System.Object VirtualizingCollection <T> AsyncVirtualizingCollection <T> AsyncVirtualizingResourceCollection<T> Implements System.Collections.Generic.IList <T> System.Collections.Generic.ICollection <T> System.Collections.Generic.IEnumerable <T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable System.Collections.Specialized.INotifyCollectionChanged System.ComponentModel.INotifyPropertyChanged Inherited Members AsyncVirtualizingCollection<T>.SynchronizationContext AsyncVirtualizingCollection<T>.IsLoading AsyncVirtualizingCollection<T>.LoadCount() AsyncVirtualizingCollection<T>.LoadPage(Int32) AsyncVirtualizingCollection<T>.CollectionChanged AsyncVirtualizingCollection<T>.PropertyChanged VirtualizingCollection<T>._pageSize VirtualizingCollection<T>._pageTimeout VirtualizingCollection<T>.PageSize VirtualizingCollection<T>.PageTimeout VirtualizingCollection<T>.Count VirtualizingCollection<T>.SyncRoot VirtualizingCollection<T>.IsSynchronized VirtualizingCollection<T>.IsReadOnly VirtualizingCollection<T>.IsFixedSize VirtualizingCollection<T>.Item[Int32] VirtualizingCollection<T>.IList.Item[Int32] VirtualizingCollection<T>.GetEnumerator() VirtualizingCollection<T>.IEnumerable.GetEnumerator() VirtualizingCollection<T>.Add(T) VirtualizingCollection<T>.IList.Add(Object) VirtualizingCollection<T>.IList.Contains(Object) VirtualizingCollection<T>.Contains(T) VirtualizingCollection<T>.Clear() VirtualizingCollection<T>.IList.IndexOf(Object) VirtualizingCollection<T>.IndexOf(T) VirtualizingCollection<T>.Insert(Int32, T) VirtualizingCollection<T>.IList.Insert(Int32, Object) VirtualizingCollection<T>.RemoveAt(Int32) VirtualizingCollection<T>.IList.Remove(Object) VirtualizingCollection<T>.Remove(T) VirtualizingCollection<T>.CopyTo(T[], Int32) VirtualizingCollection<T>.ICollection.CopyTo(Array, Int32) VirtualizingCollection<T>.CleanUpPages() VirtualizingCollection<T>.PopulatePage(Int32, IList<T>) VirtualizingCollection<T>.RequestPage(Int32) VirtualizingCollection<T>.FetchPage(Int32) VirtualizingCollection<T>.FetchCount() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity.Collections Assembly : Semiodesk.Trinity.dll Syntax public class AsyncVirtualizingResourceCollection<T> : AsyncVirtualizingCollection<T>, IList<T>, ICollection<T>, IEnumerable<T>, IList, ICollection, IEnumerable, INotifyCollectionChanged, INotifyPropertyChanged where T : Resource Type Parameters Name Description T Constructors | Improve this Doc View Source AsyncVirtualizingResourceCollection(IModel, ResourceQuery, Boolean) Initializes a new instance of the AsyncVirtualizingSparqlCollection<T> class. Declaration public AsyncVirtualizingResourceCollection(IModel model, ResourceQuery query, bool inferenceEnabled = false) Parameters Type Name Description IModel model ResourceQuery query System.Boolean inferenceEnabled | Improve this Doc View Source AsyncVirtualizingResourceCollection(IModel, ResourceQuery, Int32, Boolean) Initializes a new instance of the AsyncVirtualizingSparqlCollection<T> class. Declaration public AsyncVirtualizingResourceCollection(IModel model, ResourceQuery query, int pageSize, bool inferenceEnabled = true) Parameters Type Name Description IModel model ResourceQuery query System.Int32 pageSize System.Boolean inferenceEnabled | Improve this Doc View Source AsyncVirtualizingResourceCollection(IModel, ResourceQuery, Int32, Int32, Boolean) Initializes a new instance of the AsyncVirtualizingSparqlCollection<T> class. Declaration public AsyncVirtualizingResourceCollection(IModel model, ResourceQuery query, int pageSize, int pageTimeout, bool inferenceEnabled = true) Parameters Type Name Description IModel model ResourceQuery query System.Int32 pageSize System.Int32 pageTimeout System.Boolean inferenceEnabled Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable System.Collections.Specialized.INotifyCollectionChanged System.ComponentModel.INotifyPropertyChanged"
  },
  "api/Semiodesk.Trinity.FinishedTransactionEvent.html": {
    "href": "api/Semiodesk.Trinity.FinishedTransactionEvent.html",
    "title": "Delegate FinishedTransactionEvent",
    "keywords": "Delegate FinishedTransactionEvent Handle for transaction events. Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public delegate void FinishedTransactionEvent(object sender, TransactionEventArgs e); Parameters Type Name Description System.Object sender TransactionEventArgs e"
  },
  "api/Semiodesk.Trinity.IStore.html": {
    "href": "api/Semiodesk.Trinity.IStore.html",
    "title": "Interface IStore",
    "keywords": "Interface IStore The IStorage interface describes the methods an RDF Storage has to implement. Inherited Members System.IDisposable.Dispose() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public interface IStore : IDisposable Properties | Improve this Doc View Source IsReady Indicates if the store is ready to be queried. Declaration bool IsReady { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Log Set this property to log the SPARQL queries which are executed on this store. For example, to log to the console, set this property to System.Console.Write(System.String). Declaration Action<string> Log { get; set; } Property Value Type Description System.Action < System.String > Methods | Improve this Doc View Source BeginTransaction(IsolationLevel) Starts a transaction. The resulting transaction handle can be used to chain operations together. Declaration ITransaction BeginTransaction(IsolationLevel isolationLevel) Parameters Type Name Description System.Data.IsolationLevel isolationLevel The isolation level of the transaction. Returns Type Description ITransaction | Improve this Doc View Source ContainsModel(IModel) Query if the model exists in the store. OBSOLETE: This method does not list empty models. At the moment you should just call GetModel() and test for IsEmpty Declaration [Obsolete(\"This method does not list empty models. At the moment you should just call GetModel() and test for IsEmpty\")] bool ContainsModel(IModel model) Parameters Type Name Description IModel model Handle to the model which is to be queried. Returns Type Description System.Boolean | Improve this Doc View Source ContainsModel(Uri) Query if the model exists in the store. OBSOLETE: This method does not list empty models. At the moment you should just call GetModel() and test for IsEmpty Declaration [Obsolete(\"This method does not list empty models. At the moment you should just call GetModel() and test for IsEmpty\")] bool ContainsModel(Uri uri) Parameters Type Name Description System.Uri uri Uri of the model which is to be queried. Returns Type Description System.Boolean | Improve this Doc View Source CreateModel(Uri) Adds a new model with the given uri to the storage. Declaration IModel CreateModel(Uri uri) Parameters Type Name Description System.Uri uri Uri of the model Returns Type Description IModel Handle to the model | Improve this Doc View Source CreateModelGroup(IModel[]) Creates a model group which allows for queries to be made on multiple models at once. Declaration IModelGroup CreateModelGroup(params IModel[] models) Parameters Type Name Description IModel [] models The list of uris of the models that should be grouped together. Returns Type Description IModelGroup | Improve this Doc View Source CreateModelGroup(Uri[]) Creates a model group which allows for queries to be made on multiple models at once. Declaration IModelGroup CreateModelGroup(params Uri[] models) Parameters Type Name Description System.Uri [] models The list of uris of the models that should be grouped together. Returns Type Description IModelGroup | Improve this Doc View Source ExecuteNonQuery(SparqlUpdate, ITransaction) Executes a query on the store which does not expect a result. Declaration void ExecuteNonQuery(SparqlUpdate update, ITransaction transaction = null) Parameters Type Name Description SparqlUpdate update ITransaction transaction | Improve this Doc View Source ExecuteQuery(ISparqlQuery, ITransaction) Executes a SparqlQuery on the store. Declaration ISparqlQueryResult ExecuteQuery(ISparqlQuery query, ITransaction transaction = null) Parameters Type Name Description ISparqlQuery query ITransaction transaction Returns Type Description ISparqlQueryResult | Improve this Doc View Source GetModel(Uri) Gets a handle to a model in the store. Declaration IModel GetModel(Uri uri) Parameters Type Name Description System.Uri uri Uri of the model. Returns Type Description IModel | Improve this Doc View Source InitializeFromConfiguration(String, String) Initializes the store from the configuration. It uses either the provided file or attempts to load from \"ontologies.config\" located next to the executing assembly. For legacy reasons it also looks in the app.config file. If the ontology files are in a different path, this can be supplied as a base path.. Declaration void InitializeFromConfiguration(string configPath = null, string sourceDir = null) Parameters Type Name Description System.String configPath Path the configuration should be read from. System.String sourceDir Path where the ontologies should be searched for. | Improve this Doc View Source ListModels() Lists all models in the store. Declaration IEnumerable<IModel> ListModels() Returns Type Description System.Collections.Generic.IEnumerable < IModel > All handles to existing models. | Improve this Doc View Source LoadOntologySettings(String, String) Initializes the store from the configuration. It uses either the provided file or attempts to load from \"ontologies.config\" located next to the executing assembly. For legacy reasons it also looks in the app.config file. If the ontology files are in a different path, this can be supplied as a base path.. Declaration [Obsolete(\"This method will be removed in the future. Use InitializeFromConfiguration() instead.\")] void LoadOntologySettings(string configPath = null, string sourceDir = null) Parameters Type Name Description System.String configPath Load a specific configuration file. System.String sourceDir If given, this function tries to load the ontologies from this folder. | Improve this Doc View Source Read(Stream, Uri, RdfSerializationFormat, Boolean) Loads a serialized graph from the given stream into the current store. See allowed RdfSerializationFormat . Declaration Uri Read(Stream stream, Uri graphUri, RdfSerializationFormat format, bool update) Parameters Type Name Description System.IO.Stream stream Stream containing a serialized graph System.Uri graphUri Uri of the graph in this store RdfSerializationFormat format Allowed formats System.Boolean update Pass false if you want to overwrite the existing data. True if you want to add the new data to the existing. Returns Type Description System.Uri | Improve this Doc View Source Read(Uri, Uri, RdfSerializationFormat, Boolean) Loads a serialized graph from the given location into the current store. See allowed RdfSerializationFormat . Declaration Uri Read(Uri graphUri, Uri url, RdfSerializationFormat format, bool update) Parameters Type Name Description System.Uri graphUri Uri of the graph in this store System.Uri url Location RdfSerializationFormat format Allowed formats System.Boolean update Pass false if you want to overwrite the existing data. True if you want to add the new data to the existing. Returns Type Description System.Uri | Improve this Doc View Source RemoveModel(IModel) Removes model from the store. Declaration void RemoveModel(IModel model) Parameters Type Name Description IModel model Handle to the model which is to be removed. | Improve this Doc View Source RemoveModel(Uri) Removes model from the store. Declaration void RemoveModel(Uri uri) Parameters Type Name Description System.Uri uri Uri of the model which is to be removed. | Improve this Doc View Source Write(Stream, Uri, RdfSerializationFormat) Writes a serialized graph to the given stream. See allowed RdfSerializationFormat . Declaration void Write(Stream fs, Uri graphUri, RdfSerializationFormat format) Parameters Type Name Description System.IO.Stream fs Stream to which the content should be written. System.Uri graphUri Uri fo the graph in this store RdfSerializationFormat format Allowed formats"
  },
  "api/Semiodesk.Trinity.ModelChangedEventArgs.html": {
    "href": "api/Semiodesk.Trinity.ModelChangedEventArgs.html",
    "title": "Class ModelChangedEventArgs",
    "keywords": "Class ModelChangedEventArgs Provides information about changes in a RDF model. Inheritance System.Object System.EventArgs ModelChangedEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class ModelChangedEventArgs : EventArgs Constructors | Improve this Doc View Source ModelChangedEventArgs(ModelChangeType, IEnumerable<IResource>) Create a new ModelChangedEventArgs instance. Declaration public ModelChangedEventArgs(ModelChangeType changeType, IEnumerable<IResource> changedResources) Parameters Type Name Description ModelChangeType changeType The kind of change to the model. System.Collections.Generic.IEnumerable < IResource > changedResources Resources which are subject to the change. Fields | Improve this Doc View Source ChangedResources Resources which are subject to the change. Declaration public readonly IEnumerable<IResource> ChangedResources Field Value Type Description System.Collections.Generic.IEnumerable < IResource > | Improve this Doc View Source ChangeType The kind of change to the model. Declaration public readonly ModelChangeType ChangeType Field Value Type Description ModelChangeType"
  },
  "api/Semiodesk.Trinity.OntologyDiscovery.html": {
    "href": "api/Semiodesk.Trinity.OntologyDiscovery.html",
    "title": "Class OntologyDiscovery",
    "keywords": "Class OntologyDiscovery This static class contains a mapping of all properties and classes to its uris for discovery of the proper object and its attributes. For future reference: look into PreApplicationStartMethodAttribute Class or ModuleInitializer Inheritance System.Object OntologyDiscovery Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public static class OntologyDiscovery Fields | Improve this Doc View Source Classes All registered RDF classes in the current application. Declaration public static Dictionary<string, Class> Classes Field Value Type Description System.Collections.Generic.Dictionary < System.String , Class > | Improve this Doc View Source Namespaces All registered RDF ontology prefixes in the current application. Declaration public static Dictionary<string, Uri> Namespaces Field Value Type Description System.Collections.Generic.Dictionary < System.String , System.Uri > | Improve this Doc View Source Properties All registered RDF properties in the current application. Declaration public static Dictionary<string, Property> Properties Field Value Type Description System.Collections.Generic.Dictionary < System.String , Property > Methods | Improve this Doc View Source AddAssembly(Assembly) Register an assembly to search for RDF ontologies. Declaration public static void AddAssembly(Assembly asm) Parameters Type Name Description System.Reflection.Assembly asm | Improve this Doc View Source AddNamespace(String, Uri) Declaration public static void AddNamespace(string prefix, Uri uri) Parameters Type Name Description System.String prefix System.Uri uri | Improve this Doc View Source GetProperty(String) Returns a a property with the given string. Creates a new one if it doesn't exist. Declaration public static Property GetProperty(string u) Parameters Type Name Description System.String u Returns Type Description Property | Improve this Doc View Source GetProperty(Uri) Returns a a property with the given Uri. Creates a new one if it doesn't exist. Declaration public static Property GetProperty(Uri u) Parameters Type Name Description System.Uri u Returns Type Description Property"
  },
  "api/Semiodesk.Trinity.Query.MemberInfoExtensions.html": {
    "href": "api/Semiodesk.Trinity.Query.MemberInfoExtensions.html",
    "title": "Class MemberInfoExtensions",
    "keywords": "Class MemberInfoExtensions Inheritance System.Object MemberInfoExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity.Query Assembly : Semiodesk.Trinity.dll Syntax public static class MemberInfoExtensions Methods | Improve this Doc View Source GetMemberType(MemberInfo) Declaration public static Type GetMemberType(this MemberInfo member) Parameters Type Name Description System.Reflection.MemberInfo member Returns Type Description System.Type | Improve this Doc View Source IsBuiltInCall(MemberInfo) Declaration public static bool IsBuiltInCall(this MemberInfo member) Parameters Type Name Description System.Reflection.MemberInfo member Returns Type Description System.Boolean | Improve this Doc View Source IsUriType(MemberInfo) Declaration public static bool IsUriType(this MemberInfo member) Parameters Type Name Description System.Reflection.MemberInfo member Returns Type Description System.Boolean | Improve this Doc View Source TryGetCustomAttribute<TAttribute>(MemberInfo) Declaration public static TAttribute TryGetCustomAttribute<TAttribute>(this MemberInfo member) where TAttribute : Attribute Parameters Type Name Description System.Reflection.MemberInfo member Returns Type Description TAttribute Type Parameters Name Description TAttribute"
  }
}